// AUTOGENERATED DO NOT EDIT

`timescale 1ns / 1ps

module leaf_counter_0(input logic clk, input logic [0:1411] l, output logic [7:0] val [0:12]);
    integer i;
	// -0.25
	logic [0:55] g0;
	reg [0:55] g0_reg;
	assign g0[0] = l[0] || l[6] || l[12];
	assign g0[1] = l[20] || l[24] || l[25] || l[27];
	assign g0[2] = l[35] || l[39] || l[40] || l[42];
	assign g0[3] = l[54];
	assign g0[4] = l[67] || l[69] || l[73];
	assign g0[5] = l[81] || l[85];
	assign g0[6] = l[101] || l[106];
	assign g0[7] = l[112] || l[116];
	assign g0[8] = l[129] || l[132];
	assign g0[9] = l[147] || l[151];
	assign g0[10] = l[163] || l[166];
	assign g0[11] = l[172] || l[182];
	assign g0[12] = l[194] || l[200];
	assign g0[13] = l[246];
	assign g0[14] = l[259] || l[262];
	assign g0[15] = l[275];
	assign g0[16] = l[289];
	assign g0[17] = l[313];
	assign g0[18] = l[333] || l[339];
	assign g0[19] = l[357];
	assign g0[20] = l[364] || l[371] || l[375];
	assign g0[21] = l[379] || l[385] || l[391];
	assign g0[22] = l[398] || l[401];
	assign g0[23] = l[429] || l[434];
	assign g0[24] = l[440] || l[442] || l[444];
	assign g0[25] = l[462] || l[468];
	assign g0[26] = l[481];
	assign g0[27] = l[489] || l[490] || l[494];
	assign g0[28] = l[500] || l[505] || l[506] || l[508] || l[510];
	assign g0[29] = l[527];
	assign g0[30] = l[547];
	assign g0[31] = l[565] || l[570];
	assign g0[32] = l[575] || l[583];
	assign g0[33] = l[596] || l[597];
	assign g0[34] = l[603] || l[605];
	assign g0[35] = l[623] || l[627];
	assign g0[36] = l[643];
	assign g0[37] = l[651];
	assign g0[38] = l[668];
	assign g0[39] = l[683] || l[688];
	assign g0[40] = l[709];
	assign g0[41] = l[759] || l[761] || l[763] || l[769];
	assign g0[42] = l[780];
	assign g0[43] = l[819];
	assign g0[44] = l[844];
	assign g0[45] = l[856] || l[861];
	assign g0[46] = l[887];
	assign g0[47] = l[909];
	assign g0[48] = l[982] || l[984];
	assign g0[49] = l[1009] || l[1014];
	assign g0[50] = l[1063];
	assign g0[51] = l[1073];
	assign g0[52] = l[1086];
	assign g0[53] = l[1145];
	assign g0[54] = l[1213];
	assign g0[55] = l[1237];
	
    always_ff @(posedge clk) begin
        g0_reg <= g0;
    end
    
	logic [2:0] v0c0l0_out [0:13];
	logic [2:0] v0c0l0 [0:13];
	assign v0c0l0_out[0] = g0_reg[0] + g0_reg[1] + g0_reg[2] + g0_reg[3];
	assign v0c0l0_out[1] = g0_reg[4] + g0_reg[5] + g0_reg[6] + g0_reg[7];
	assign v0c0l0_out[2] = g0_reg[8] + g0_reg[9] + g0_reg[10] + g0_reg[11];
	assign v0c0l0_out[3] = g0_reg[12] + g0_reg[13] + g0_reg[14] + g0_reg[15];
	assign v0c0l0_out[4] = g0_reg[16] + g0_reg[17] + g0_reg[18] + g0_reg[19];
	assign v0c0l0_out[5] = g0_reg[20] + g0_reg[21] + g0_reg[22] + g0_reg[23];
	assign v0c0l0_out[6] = g0_reg[24] + g0_reg[25] + g0_reg[26] + g0_reg[27];
	assign v0c0l0_out[7] = g0_reg[28] + g0_reg[29] + g0_reg[30] + g0_reg[31];
	assign v0c0l0_out[8] = g0_reg[32] + g0_reg[33] + g0_reg[34] + g0_reg[35];
	assign v0c0l0_out[9] = g0_reg[36] + g0_reg[37] + g0_reg[38] + g0_reg[39];
	assign v0c0l0_out[10] = g0_reg[40] + g0_reg[41] + g0_reg[42] + g0_reg[43];
	assign v0c0l0_out[11] = g0_reg[44] + g0_reg[45] + g0_reg[46] + g0_reg[47];
	assign v0c0l0_out[12] = g0_reg[48] + g0_reg[49] + g0_reg[50] + g0_reg[51];
	assign v0c0l0_out[13] = g0_reg[52] + g0_reg[53] + g0_reg[54] + g0_reg[55];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 14; i = i + 1)
            v0c0l0[i] <= v0c0l0_out[i];
    end

	reg [3:0] v0c0l1 [0:6];
	logic [3:0] v0c0l1_out [0:6];
	assign v0c0l1_out[0] = v0c0l0[0] + v0c0l0[1];
	assign v0c0l1_out[1] = v0c0l0[2] + v0c0l0[3];
	assign v0c0l1_out[2] = v0c0l0[4] + v0c0l0[5];
	assign v0c0l1_out[3] = v0c0l0[6] + v0c0l0[7];
	assign v0c0l1_out[4] = v0c0l0[8] + v0c0l0[9];
	assign v0c0l1_out[5] = v0c0l0[10] + v0c0l0[11];
	assign v0c0l1_out[6] = v0c0l0[12] + v0c0l0[13];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 7; i = i + 1)
            v0c0l1[i] <= v0c0l1_out[i];
    end

	reg [4:0] v0c0l2 [0:3];
	logic [4:0] v0c0l2_out [0:3];
	assign v0c0l2_out[0] = v0c0l1[0] + v0c0l1[1];
	assign v0c0l2_out[1] = v0c0l1[2] + v0c0l1[3];
	assign v0c0l2_out[2] = v0c0l1[4] + v0c0l1[5];
	assign v0c0l2_out[3] = v0c0l1[6];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 4; i = i + 1)
            v0c0l2[i] <= v0c0l2_out[i];
    end

	reg [5:0] v0c0l3 [0:1];
	logic [5:0] v0c0l3_out [0:1];
	assign v0c0l3_out[0] = v0c0l2[0] + v0c0l2[1];
	assign v0c0l3_out[1] = v0c0l2[2] + v0c0l2[3];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 2; i = i + 1)
            v0c0l3[i] <= v0c0l3_out[i];
    end

	reg [6:0] v0c0l4 [0:0];
	logic [6:0] v0c0l4_out [0:0];
	assign v0c0l4_out[0] = v0c0l3[0] + v0c0l3[1];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 1; i = i + 1)
            v0c0l4[i] <= v0c0l4_out[i];
    end

	reg [7:0] v0c0l5 [0:0];
	logic [7:0] v0c0l5_out [0:0];
	assign v0c0l5_out[0] = v0c0l4[0];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 1; i = i + 1)
            v0c0l5[i] <= v0c0l5_out[i];
    end

	assign val[0] = v0c0l5[0];
	
	// -0.125
	logic [0:97] g1;
	reg [0:97] g1_reg;
	assign g1[0] = l[3] || l[13] || l[14];
	assign g1[1] = l[18] || l[21] || l[22] || l[26];
	assign g1[2] = l[33] || l[41] || l[43] || l[45];
	assign g1[3] = l[48] || l[50] || l[52] || l[55] || l[57] || l[59];
	assign g1[4] = l[61] || l[64] || l[70] || l[71] || l[72] || l[75];
	assign g1[5] = l[83] || l[86] || l[88] || l[89];
	assign g1[6] = l[93] || l[98] || l[102] || l[104];
	assign g1[7] = l[110] || l[113] || l[114] || l[117] || l[119] || l[120] || l[123];
	assign g1[8] = l[124] || l[126] || l[130] || l[133] || l[137];
	assign g1[9] = l[140] || l[143] || l[145] || l[150];
	assign g1[10] = l[155] || l[160] || l[164] || l[168];
	assign g1[11] = l[171] || l[174] || l[178] || l[179] || l[180];
	assign g1[12] = l[186] || l[188] || l[190];
	assign g1[13] = l[202] || l[205] || l[206] || l[210] || l[211] || l[213] || l[215];
	assign g1[14] = l[219] || l[221] || l[223] || l[225] || l[226] || l[230];
	assign g1[15] = l[234] || l[235] || l[237] || l[239] || l[241] || l[242];
	assign g1[16] = l[249] || l[251] || l[253] || l[258] || l[263];
	assign g1[17] = l[265] || l[269] || l[273] || l[277];
	assign g1[18] = l[282] || l[283] || l[285] || l[290] || l[291] || l[293] || l[296];
	assign g1[19] = l[297] || l[300] || l[302] || l[303] || l[305] || l[309];
	assign g1[20] = l[315] || l[317] || l[321] || l[327];
	assign g1[21] = l[331] || l[335] || l[338] || l[341] || l[343];
	assign g1[22] = l[345] || l[347] || l[349] || l[359];
	assign g1[23] = l[365] || l[367] || l[369] || l[372];
	assign g1[24] = l[381] || l[383] || l[386] || l[388];
	assign g1[25] = l[395] || l[403];
	assign g1[26] = l[407] || l[409] || l[412] || l[415];
	assign g1[27] = l[423] || l[431] || l[433] || l[435];
	assign g1[28] = l[443] || l[446] || l[447] || l[450];
	assign g1[29] = l[454] || l[458] || l[461] || l[463] || l[465];
	assign g1[30] = l[471] || l[472];
	assign g1[31] = l[491] || l[492] || l[497];
	assign g1[32] = l[502] || l[504];
	assign g1[33] = l[517] || l[520] || l[522] || l[524];
	assign g1[34] = l[529] || l[532] || l[533];
	assign g1[35] = l[549] || l[552] || l[553] || l[558];
	assign g1[36] = l[563] || l[568];
	assign g1[37] = l[572] || l[573] || l[577] || l[580] || l[582];
	assign g1[38] = l[589] || l[593];
	assign g1[39] = l[606] || l[610] || l[612] || l[614];
	assign g1[40] = l[626] || l[630];
	assign g1[41] = l[634] || l[644];
	assign g1[42] = l[648] || l[652] || l[656] || l[661];
	assign g1[43] = l[663] || l[667] || l[670] || l[671] || l[673];
	assign g1[44] = l[680] || l[682] || l[692];
	assign g1[45] = l[694] || l[695] || l[698] || l[700] || l[704];
	assign g1[46] = l[707] || l[712] || l[717];
	assign g1[47] = l[723] || l[725];
	assign g1[48] = l[727] || l[729] || l[730] || l[734] || l[737];
	assign g1[49] = l[744] || l[746] || l[750];
	assign g1[50] = l[772] || l[781];
	assign g1[51] = l[786] || l[794] || l[795];
	assign g1[52] = l[799] || l[800] || l[802] || l[806];
	assign g1[53] = l[812] || l[813];
	assign g1[54] = l[822] || l[826];
	assign g1[55] = l[828] || l[835];
	assign g1[56] = l[846] || l[850];
	assign g1[57] = l[855];
	assign g1[58] = l[862] || l[865] || l[870] || l[873];
	assign g1[59] = l[878] || l[884] || l[891];
	assign g1[60] = l[894] || l[895] || l[897] || l[905];
	assign g1[61] = l[913] || l[918];
	assign g1[62] = l[921] || l[929] || l[932] || l[933];
	assign g1[63] = l[936] || l[937] || l[940] || l[944];
	assign g1[64] = l[953] || l[960] || l[964];
	assign g1[65] = l[966] || l[972] || l[977] || l[978];
	assign g1[66] = l[981];
	assign g1[67] = l[993] || l[995];
	assign g1[68] = l[1011];
	assign g1[69] = l[1027] || l[1030] || l[1033];
	assign g1[70] = l[1039] || l[1040] || l[1042] || l[1044];
	assign g1[71] = l[1046] || l[1047] || l[1055] || l[1057];
	assign g1[72] = l[1059] || l[1062] || l[1066];
	assign g1[73] = l[1068] || l[1072] || l[1077] || l[1080];
	assign g1[74] = l[1084] || l[1089] || l[1093];
	assign g1[75] = l[1098] || l[1099] || l[1101] || l[1111];
	assign g1[76] = l[1118] || l[1122] || l[1123];
	assign g1[77] = l[1130] || l[1131] || l[1136];
	assign g1[78] = l[1142] || l[1143] || l[1146];
	assign g1[79] = l[1152] || l[1154] || l[1161];
	assign g1[80] = l[1166] || l[1167] || l[1174];
	assign g1[81] = l[1179] || l[1181] || l[1187];
	assign g1[82] = l[1190] || l[1198] || l[1199];
	assign g1[83] = l[1209];
	assign g1[84] = l[1217] || l[1223] || l[1228];
	assign g1[85] = l[1233] || l[1240];
	assign g1[86] = l[1246] || l[1255] || l[1256];
	assign g1[87] = l[1258] || l[1263] || l[1270];
	assign g1[88] = l[1274] || l[1283] || l[1287];
	assign g1[89] = l[1293] || l[1300];
	assign g1[90] = l[1308] || l[1310];
	assign g1[91] = l[1316] || l[1320];
	assign g1[92] = l[1327] || l[1330] || l[1335];
	assign g1[93] = l[1337] || l[1344];
	assign g1[94] = l[1352] || l[1358];
	assign g1[95] = l[1368];
	assign g1[96] = l[1378] || l[1385];
	assign g1[97] = l[1399] || l[1408];
	
    always_ff @(posedge clk) begin
        g1_reg <= g1;
    end
    
	logic [2:0] v1c0l0_out [0:24];
	logic [2:0] v1c0l0 [0:24];
	assign v1c0l0_out[0] = g1_reg[0] + g1_reg[1] + g1_reg[2] + g1_reg[3];
	assign v1c0l0_out[1] = g1_reg[4] + g1_reg[5] + g1_reg[6] + g1_reg[7];
	assign v1c0l0_out[2] = g1_reg[8] + g1_reg[9] + g1_reg[10] + g1_reg[11];
	assign v1c0l0_out[3] = g1_reg[12] + g1_reg[13] + g1_reg[14] + g1_reg[15];
	assign v1c0l0_out[4] = g1_reg[16] + g1_reg[17] + g1_reg[18] + g1_reg[19];
	assign v1c0l0_out[5] = g1_reg[20] + g1_reg[21] + g1_reg[22] + g1_reg[23];
	assign v1c0l0_out[6] = g1_reg[24] + g1_reg[25] + g1_reg[26] + g1_reg[27];
	assign v1c0l0_out[7] = g1_reg[28] + g1_reg[29] + g1_reg[30] + g1_reg[31];
	assign v1c0l0_out[8] = g1_reg[32] + g1_reg[33] + g1_reg[34] + g1_reg[35];
	assign v1c0l0_out[9] = g1_reg[36] + g1_reg[37] + g1_reg[38] + g1_reg[39];
	assign v1c0l0_out[10] = g1_reg[40] + g1_reg[41] + g1_reg[42] + g1_reg[43];
	assign v1c0l0_out[11] = g1_reg[44] + g1_reg[45] + g1_reg[46] + g1_reg[47];
	assign v1c0l0_out[12] = g1_reg[48] + g1_reg[49] + g1_reg[50] + g1_reg[51];
	assign v1c0l0_out[13] = g1_reg[52] + g1_reg[53] + g1_reg[54] + g1_reg[55];
	assign v1c0l0_out[14] = g1_reg[56] + g1_reg[57] + g1_reg[58] + g1_reg[59];
	assign v1c0l0_out[15] = g1_reg[60] + g1_reg[61] + g1_reg[62] + g1_reg[63];
	assign v1c0l0_out[16] = g1_reg[64] + g1_reg[65] + g1_reg[66] + g1_reg[67];
	assign v1c0l0_out[17] = g1_reg[68] + g1_reg[69] + g1_reg[70] + g1_reg[71];
	assign v1c0l0_out[18] = g1_reg[72] + g1_reg[73] + g1_reg[74] + g1_reg[75];
	assign v1c0l0_out[19] = g1_reg[76] + g1_reg[77] + g1_reg[78] + g1_reg[79];
	assign v1c0l0_out[20] = g1_reg[80] + g1_reg[81] + g1_reg[82] + g1_reg[83];
	assign v1c0l0_out[21] = g1_reg[84] + g1_reg[85] + g1_reg[86] + g1_reg[87];
	assign v1c0l0_out[22] = g1_reg[88] + g1_reg[89] + g1_reg[90] + g1_reg[91];
	assign v1c0l0_out[23] = g1_reg[92] + g1_reg[93] + g1_reg[94] + g1_reg[95];
	assign v1c0l0_out[24] = g1_reg[96] + g1_reg[97];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 25; i = i + 1)
            v1c0l0[i] <= v1c0l0_out[i];
    end

	reg [3:0] v1c0l1 [0:12];
	logic [3:0] v1c0l1_out [0:12];
	assign v1c0l1_out[0] = v1c0l0[0] + v1c0l0[1];
	assign v1c0l1_out[1] = v1c0l0[2] + v1c0l0[3];
	assign v1c0l1_out[2] = v1c0l0[4] + v1c0l0[5];
	assign v1c0l1_out[3] = v1c0l0[6] + v1c0l0[7];
	assign v1c0l1_out[4] = v1c0l0[8] + v1c0l0[9];
	assign v1c0l1_out[5] = v1c0l0[10] + v1c0l0[11];
	assign v1c0l1_out[6] = v1c0l0[12] + v1c0l0[13];
	assign v1c0l1_out[7] = v1c0l0[14] + v1c0l0[15];
	assign v1c0l1_out[8] = v1c0l0[16] + v1c0l0[17];
	assign v1c0l1_out[9] = v1c0l0[18] + v1c0l0[19];
	assign v1c0l1_out[10] = v1c0l0[20] + v1c0l0[21];
	assign v1c0l1_out[11] = v1c0l0[22] + v1c0l0[23];
	assign v1c0l1_out[12] = v1c0l0[24];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 13; i = i + 1)
            v1c0l1[i] <= v1c0l1_out[i];
    end

	reg [4:0] v1c0l2 [0:6];
	logic [4:0] v1c0l2_out [0:6];
	assign v1c0l2_out[0] = v1c0l1[0] + v1c0l1[1];
	assign v1c0l2_out[1] = v1c0l1[2] + v1c0l1[3];
	assign v1c0l2_out[2] = v1c0l1[4] + v1c0l1[5];
	assign v1c0l2_out[3] = v1c0l1[6] + v1c0l1[7];
	assign v1c0l2_out[4] = v1c0l1[8] + v1c0l1[9];
	assign v1c0l2_out[5] = v1c0l1[10] + v1c0l1[11];
	assign v1c0l2_out[6] = v1c0l1[12];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 7; i = i + 1)
            v1c0l2[i] <= v1c0l2_out[i];
    end

	reg [5:0] v1c0l3 [0:3];
	logic [5:0] v1c0l3_out [0:3];
	assign v1c0l3_out[0] = v1c0l2[0] + v1c0l2[1];
	assign v1c0l3_out[1] = v1c0l2[2] + v1c0l2[3];
	assign v1c0l3_out[2] = v1c0l2[4] + v1c0l2[5];
	assign v1c0l3_out[3] = v1c0l2[6];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 4; i = i + 1)
            v1c0l3[i] <= v1c0l3_out[i];
    end

	reg [6:0] v1c0l4 [0:1];
	logic [6:0] v1c0l4_out [0:1];
	assign v1c0l4_out[0] = v1c0l3[0] + v1c0l3[1];
	assign v1c0l4_out[1] = v1c0l3[2] + v1c0l3[3];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 2; i = i + 1)
            v1c0l4[i] <= v1c0l4_out[i];
    end

	reg [7:0] v1c0l5 [0:0];
	logic [7:0] v1c0l5_out [0:0];
	assign v1c0l5_out[0] = v1c0l4[0] + v1c0l4[1];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 1; i = i + 1)
            v1c0l5[i] <= v1c0l5_out[i];
    end

	assign val[1] = v1c0l5[0];
	
	// -0.0625
	logic [0:90] g2;
	reg [0:90] g2_reg;
	assign g2[0] = l[7];
	assign g2[1] = l[29];
	assign g2[2] = l[36] || l[37];
	assign g2[3] = l[66];
	assign g2[4] = l[77] || l[80] || l[82];
	assign g2[5] = l[95] || l[107];
	assign g2[6] = l[135];
	assign g2[7] = l[148];
	assign g2[8] = l[157] || l[162] || l[167];
	assign g2[9] = l[176] || l[183] || l[185];
	assign g2[10] = l[196];
	assign g2[11] = l[214];
	assign g2[12] = l[231];
	assign g2[13] = l[247];
	assign g2[14] = l[276] || l[279];
	assign g2[15] = l[287];
	assign g2[16] = l[326];
	assign g2[17] = l[329];
	assign g2[18] = l[354];
	assign g2[19] = l[361] || l[374];
	assign g2[20] = l[384] || l[390];
	assign g2[21] = l[399] || l[404] || l[406];
	assign g2[22] = l[414] || l[418] || l[419];
	assign g2[23] = l[457];
	assign g2[24] = l[470] || l[475] || l[476] || l[480];
	assign g2[25] = l[487] || l[488];
	assign g2[26] = l[499] || l[511];
	assign g2[27] = l[513] || l[518] || l[525];
	assign g2[28] = l[536] || l[538] || l[539] || l[541];
	assign g2[29] = l[546];
	assign g2[30] = l[569];
	assign g2[31] = l[576];
	assign g2[32] = l[585] || l[591] || l[595];
	assign g2[33] = l[607] || l[615];
	assign g2[34] = l[617] || l[625];
	assign g2[35] = l[632] || l[639];
	assign g2[36] = l[647] || l[650] || l[654] || l[659];
	assign g2[37] = l[669] || l[675];
	assign g2[38] = l[684] || l[686] || l[690];
	assign g2[39] = l[710] || l[713] || l[715] || l[718];
	assign g2[40] = l[719];
	assign g2[41] = l[740];
	assign g2[42] = l[742];
	assign g2[43] = l[762] || l[767];
	assign g2[44] = l[775];
	assign g2[45] = l[784] || l[788] || l[791];
	assign g2[46] = l[805];
	assign g2[47] = l[809];
	assign g2[48] = l[816] || l[820];
	assign g2[49] = l[833] || l[836];
	assign g2[50] = l[842];
	assign g2[51] = l[860];
	assign g2[52] = l[866] || l[871];
	assign g2[53] = l[885];
	assign g2[54] = l[900] || l[901];
	assign g2[55] = l[906] || l[908] || l[914];
	assign g2[56] = l[924];
	assign g2[57] = l[945] || l[948] || l[949];
	assign g2[58] = l[955] || l[958];
	assign g2[59] = l[969];
	assign g2[60] = l[998] || l[1000];
	assign g2[61] = l[1005] || l[1007] || l[1010];
	assign g2[62] = l[1019] || l[1028];
	assign g2[63] = l[1050] || l[1054];
	assign g2[64] = l[1060];
	assign g2[65] = l[1075];
	assign g2[66] = l[1083] || l[1096];
	assign g2[67] = l[1106];
	assign g2[68] = l[1113];
	assign g2[69] = l[1133] || l[1139];
	assign g2[70] = l[1141];
	assign g2[71] = l[1155] || l[1156];
	assign g2[72] = l[1163] || l[1172];
	assign g2[73] = l[1188];
	assign g2[74] = l[1191];
	assign g2[75] = l[1203] || l[1206] || l[1211] || l[1212] || l[1214];
	assign g2[76] = l[1227] || l[1229];
	assign g2[77] = l[1232] || l[1238];
	assign g2[78] = l[1251] || l[1254];
	assign g2[79] = l[1260] || l[1267];
	assign g2[80] = l[1277] || l[1282];
	assign g2[81] = l[1289] || l[1298];
	assign g2[82] = l[1305];
	assign g2[83] = l[1318];
	assign g2[84] = l[1333];
	assign g2[85] = l[1340] || l[1346];
	assign g2[86] = l[1353] || l[1359];
	assign g2[87] = l[1362] || l[1366] || l[1369] || l[1375];
	assign g2[88] = l[1379] || l[1382];
	assign g2[89] = l[1387] || l[1392] || l[1393] || l[1396];
	assign g2[90] = l[1404];
	
    always_ff @(posedge clk) begin
        g2_reg <= g2;
    end
    
	logic [2:0] v2c0l0_out [0:22];
	logic [2:0] v2c0l0 [0:22];
	assign v2c0l0_out[0] = g2_reg[0] + g2_reg[1] + g2_reg[2] + g2_reg[3];
	assign v2c0l0_out[1] = g2_reg[4] + g2_reg[5] + g2_reg[6] + g2_reg[7];
	assign v2c0l0_out[2] = g2_reg[8] + g2_reg[9] + g2_reg[10] + g2_reg[11];
	assign v2c0l0_out[3] = g2_reg[12] + g2_reg[13] + g2_reg[14] + g2_reg[15];
	assign v2c0l0_out[4] = g2_reg[16] + g2_reg[17] + g2_reg[18] + g2_reg[19];
	assign v2c0l0_out[5] = g2_reg[20] + g2_reg[21] + g2_reg[22] + g2_reg[23];
	assign v2c0l0_out[6] = g2_reg[24] + g2_reg[25] + g2_reg[26] + g2_reg[27];
	assign v2c0l0_out[7] = g2_reg[28] + g2_reg[29] + g2_reg[30] + g2_reg[31];
	assign v2c0l0_out[8] = g2_reg[32] + g2_reg[33] + g2_reg[34] + g2_reg[35];
	assign v2c0l0_out[9] = g2_reg[36] + g2_reg[37] + g2_reg[38] + g2_reg[39];
	assign v2c0l0_out[10] = g2_reg[40] + g2_reg[41] + g2_reg[42] + g2_reg[43];
	assign v2c0l0_out[11] = g2_reg[44] + g2_reg[45] + g2_reg[46] + g2_reg[47];
	assign v2c0l0_out[12] = g2_reg[48] + g2_reg[49] + g2_reg[50] + g2_reg[51];
	assign v2c0l0_out[13] = g2_reg[52] + g2_reg[53] + g2_reg[54] + g2_reg[55];
	assign v2c0l0_out[14] = g2_reg[56] + g2_reg[57] + g2_reg[58] + g2_reg[59];
	assign v2c0l0_out[15] = g2_reg[60] + g2_reg[61] + g2_reg[62] + g2_reg[63];
	assign v2c0l0_out[16] = g2_reg[64] + g2_reg[65] + g2_reg[66] + g2_reg[67];
	assign v2c0l0_out[17] = g2_reg[68] + g2_reg[69] + g2_reg[70] + g2_reg[71];
	assign v2c0l0_out[18] = g2_reg[72] + g2_reg[73] + g2_reg[74] + g2_reg[75];
	assign v2c0l0_out[19] = g2_reg[76] + g2_reg[77] + g2_reg[78] + g2_reg[79];
	assign v2c0l0_out[20] = g2_reg[80] + g2_reg[81] + g2_reg[82] + g2_reg[83];
	assign v2c0l0_out[21] = g2_reg[84] + g2_reg[85] + g2_reg[86] + g2_reg[87];
	assign v2c0l0_out[22] = g2_reg[88] + g2_reg[89] + g2_reg[90];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 23; i = i + 1)
            v2c0l0[i] <= v2c0l0_out[i];
    end

	reg [3:0] v2c0l1 [0:11];
	logic [3:0] v2c0l1_out [0:11];
	assign v2c0l1_out[0] = v2c0l0[0] + v2c0l0[1];
	assign v2c0l1_out[1] = v2c0l0[2] + v2c0l0[3];
	assign v2c0l1_out[2] = v2c0l0[4] + v2c0l0[5];
	assign v2c0l1_out[3] = v2c0l0[6] + v2c0l0[7];
	assign v2c0l1_out[4] = v2c0l0[8] + v2c0l0[9];
	assign v2c0l1_out[5] = v2c0l0[10] + v2c0l0[11];
	assign v2c0l1_out[6] = v2c0l0[12] + v2c0l0[13];
	assign v2c0l1_out[7] = v2c0l0[14] + v2c0l0[15];
	assign v2c0l1_out[8] = v2c0l0[16] + v2c0l0[17];
	assign v2c0l1_out[9] = v2c0l0[18] + v2c0l0[19];
	assign v2c0l1_out[10] = v2c0l0[20] + v2c0l0[21];
	assign v2c0l1_out[11] = v2c0l0[22];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 12; i = i + 1)
            v2c0l1[i] <= v2c0l1_out[i];
    end

	reg [4:0] v2c0l2 [0:5];
	logic [4:0] v2c0l2_out [0:5];
	assign v2c0l2_out[0] = v2c0l1[0] + v2c0l1[1];
	assign v2c0l2_out[1] = v2c0l1[2] + v2c0l1[3];
	assign v2c0l2_out[2] = v2c0l1[4] + v2c0l1[5];
	assign v2c0l2_out[3] = v2c0l1[6] + v2c0l1[7];
	assign v2c0l2_out[4] = v2c0l1[8] + v2c0l1[9];
	assign v2c0l2_out[5] = v2c0l1[10] + v2c0l1[11];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 6; i = i + 1)
            v2c0l2[i] <= v2c0l2_out[i];
    end

	reg [5:0] v2c0l3 [0:2];
	logic [5:0] v2c0l3_out [0:2];
	assign v2c0l3_out[0] = v2c0l2[0] + v2c0l2[1];
	assign v2c0l3_out[1] = v2c0l2[2] + v2c0l2[3];
	assign v2c0l3_out[2] = v2c0l2[4] + v2c0l2[5];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 3; i = i + 1)
            v2c0l3[i] <= v2c0l3_out[i];
    end

	reg [6:0] v2c0l4 [0:1];
	logic [6:0] v2c0l4_out [0:1];
	assign v2c0l4_out[0] = v2c0l3[0] + v2c0l3[1];
	assign v2c0l4_out[1] = v2c0l3[2];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 2; i = i + 1)
            v2c0l4[i] <= v2c0l4_out[i];
    end

	reg [7:0] v2c0l5 [0:0];
	logic [7:0] v2c0l5_out [0:0];
	assign v2c0l5_out[0] = v2c0l4[0] + v2c0l4[1];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 1; i = i + 1)
            v2c0l5[i] <= v2c0l5_out[i];
    end

	assign val[2] = v2c0l5[0];
	
	// -0.03125
	logic [0:62] g3;
	reg [0:62] g3_reg;
	assign g3[0] = l[28];
	assign g3[1] = l[90];
	assign g3[2] = l[121];
	assign g3[3] = l[134] || l[138];
	assign g3[4] = l[152] || l[153];
	assign g3[5] = l[227];
	assign g3[6] = l[245];
	assign g3[7] = l[255];
	assign g3[8] = l[272];
	assign g3[9] = l[292];
	assign g3[10] = l[312];
	assign g3[11] = l[334];
	assign g3[12] = l[351] || l[358];
	assign g3[13] = l[366];
	assign g3[14] = l[397];
	assign g3[15] = l[484];
	assign g3[16] = l[501];
	assign g3[17] = l[548] || l[555];
	assign g3[18] = l[566];
	assign g3[19] = l[588] || l[600];
	assign g3[20] = l[636];
	assign g3[21] = l[674];
	assign g3[22] = l[677] || l[687];
	assign g3[23] = l[696];
	assign g3[24] = l[722];
	assign g3[25] = l[728];
	assign g3[26] = l[749];
	assign g3[27] = l[774] || l[779];
	assign g3[28] = l[807];
	assign g3[29] = l[810] || l[814];
	assign g3[30] = l[817];
	assign g3[31] = l[830];
	assign g3[32] = l[841] || l[847];
	assign g3[33] = l[854] || l[858];
	assign g3[34] = l[876];
	assign g3[35] = l[882] || l[888];
	assign g3[36] = l[898];
	assign g3[37] = l[930];
	assign g3[38] = l[951];
	assign g3[39] = l[967] || l[979];
	assign g3[40] = l[985] || l[986] || l[990];
	assign g3[41] = l[1023] || l[1024] || l[1032];
	assign g3[42] = l[1036] || l[1041];
	assign g3[43] = l[1064];
	assign g3[44] = l[1067];
	assign g3[45] = l[1091];
	assign g3[46] = l[1108];
	assign g3[47] = l[1121];
	assign g3[48] = l[1149];
	assign g3[49] = l[1151] || l[1153];
	assign g3[50] = l[1178];
	assign g3[51] = l[1194];
	assign g3[52] = l[1220];
	assign g3[53] = l[1235];
	assign g3[54] = l[1243] || l[1248];
	assign g3[55] = l[1264];
	assign g3[56] = l[1284];
	assign g3[57] = l[1311] || l[1314] || l[1315] || l[1321] || l[1322];
	assign g3[58] = l[1326] || l[1332];
	assign g3[59] = l[1355] || l[1361];
	assign g3[60] = l[1365];
	assign g3[61] = l[1390] || l[1394];
	assign g3[62] = l[1406];
	
    always_ff @(posedge clk) begin
        g3_reg <= g3;
    end
    
	logic [2:0] v3c0l0_out [0:15];
	logic [2:0] v3c0l0 [0:15];
	assign v3c0l0_out[0] = g3_reg[0] + g3_reg[1] + g3_reg[2] + g3_reg[3];
	assign v3c0l0_out[1] = g3_reg[4] + g3_reg[5] + g3_reg[6] + g3_reg[7];
	assign v3c0l0_out[2] = g3_reg[8] + g3_reg[9] + g3_reg[10] + g3_reg[11];
	assign v3c0l0_out[3] = g3_reg[12] + g3_reg[13] + g3_reg[14] + g3_reg[15];
	assign v3c0l0_out[4] = g3_reg[16] + g3_reg[17] + g3_reg[18] + g3_reg[19];
	assign v3c0l0_out[5] = g3_reg[20] + g3_reg[21] + g3_reg[22] + g3_reg[23];
	assign v3c0l0_out[6] = g3_reg[24] + g3_reg[25] + g3_reg[26] + g3_reg[27];
	assign v3c0l0_out[7] = g3_reg[28] + g3_reg[29] + g3_reg[30] + g3_reg[31];
	assign v3c0l0_out[8] = g3_reg[32] + g3_reg[33] + g3_reg[34] + g3_reg[35];
	assign v3c0l0_out[9] = g3_reg[36] + g3_reg[37] + g3_reg[38] + g3_reg[39];
	assign v3c0l0_out[10] = g3_reg[40] + g3_reg[41] + g3_reg[42] + g3_reg[43];
	assign v3c0l0_out[11] = g3_reg[44] + g3_reg[45] + g3_reg[46] + g3_reg[47];
	assign v3c0l0_out[12] = g3_reg[48] + g3_reg[49] + g3_reg[50] + g3_reg[51];
	assign v3c0l0_out[13] = g3_reg[52] + g3_reg[53] + g3_reg[54] + g3_reg[55];
	assign v3c0l0_out[14] = g3_reg[56] + g3_reg[57] + g3_reg[58] + g3_reg[59];
	assign v3c0l0_out[15] = g3_reg[60] + g3_reg[61] + g3_reg[62];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 16; i = i + 1)
            v3c0l0[i] <= v3c0l0_out[i];
    end

	reg [3:0] v3c0l1 [0:7];
	logic [3:0] v3c0l1_out [0:7];
	assign v3c0l1_out[0] = v3c0l0[0] + v3c0l0[1];
	assign v3c0l1_out[1] = v3c0l0[2] + v3c0l0[3];
	assign v3c0l1_out[2] = v3c0l0[4] + v3c0l0[5];
	assign v3c0l1_out[3] = v3c0l0[6] + v3c0l0[7];
	assign v3c0l1_out[4] = v3c0l0[8] + v3c0l0[9];
	assign v3c0l1_out[5] = v3c0l0[10] + v3c0l0[11];
	assign v3c0l1_out[6] = v3c0l0[12] + v3c0l0[13];
	assign v3c0l1_out[7] = v3c0l0[14] + v3c0l0[15];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 8; i = i + 1)
            v3c0l1[i] <= v3c0l1_out[i];
    end

	reg [4:0] v3c0l2 [0:3];
	logic [4:0] v3c0l2_out [0:3];
	assign v3c0l2_out[0] = v3c0l1[0] + v3c0l1[1];
	assign v3c0l2_out[1] = v3c0l1[2] + v3c0l1[3];
	assign v3c0l2_out[2] = v3c0l1[4] + v3c0l1[5];
	assign v3c0l2_out[3] = v3c0l1[6] + v3c0l1[7];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 4; i = i + 1)
            v3c0l2[i] <= v3c0l2_out[i];
    end

	reg [5:0] v3c0l3 [0:1];
	logic [5:0] v3c0l3_out [0:1];
	assign v3c0l3_out[0] = v3c0l2[0] + v3c0l2[1];
	assign v3c0l3_out[1] = v3c0l2[2] + v3c0l2[3];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 2; i = i + 1)
            v3c0l3[i] <= v3c0l3_out[i];
    end

	reg [6:0] v3c0l4 [0:0];
	logic [6:0] v3c0l4_out [0:0];
	assign v3c0l4_out[0] = v3c0l3[0] + v3c0l3[1];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 1; i = i + 1)
            v3c0l4[i] <= v3c0l4_out[i];
    end

	reg [7:0] v3c0l5 [0:0];
	logic [7:0] v3c0l5_out [0:0];
	assign v3c0l5_out[0] = v3c0l4[0];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 1; i = i + 1)
            v3c0l5[i] <= v3c0l5_out[i];
    end

	assign val[3] = v3c0l5[0];
	
	// -0.015625
	logic [0:36] g4;
	reg [0:36] g4_reg;
	assign g4[0] = l[74];
	assign g4[1] = l[87];
	assign g4[2] = l[118];
	assign g4[3] = l[192];
	assign g4[4] = l[217];
	assign g4[5] = l[243];
	assign g4[6] = l[267];
	assign g4[7] = l[314] || l[323];
	assign g4[8] = l[394];
	assign g4[9] = l[428];
	assign g4[10] = l[452];
	assign g4[11] = l[469];
	assign g4[12] = l[495];
	assign g4[13] = l[528];
	assign g4[14] = l[609];
	assign g4[15] = l[619] || l[624] || l[629];
	assign g4[16] = l[635];
	assign g4[17] = l[837];
	assign g4[18] = l[874];
	assign g4[19] = l[879];
	assign g4[20] = l[910];
	assign g4[21] = l[927];
	assign g4[22] = l[963];
	assign g4[23] = l[974];
	assign g4[24] = l[1021];
	assign g4[25] = l[1034];
	assign g4[26] = l[1094];
	assign g4[27] = l[1110];
	assign g4[28] = l[1115];
	assign g4[29] = l[1127];
	assign g4[30] = l[1175];
	assign g4[31] = l[1202];
	assign g4[32] = l[1215];
	assign g4[33] = l[1231] || l[1242];
	assign g4[34] = l[1329];
	assign g4[35] = l[1338] || l[1345];
	assign g4[36] = l[1400];
	
    always_ff @(posedge clk) begin
        g4_reg <= g4;
    end
    
	logic [2:0] v4c0l0_out [0:9];
	logic [2:0] v4c0l0 [0:9];
	assign v4c0l0_out[0] = g4_reg[0] + g4_reg[1] + g4_reg[2] + g4_reg[3];
	assign v4c0l0_out[1] = g4_reg[4] + g4_reg[5] + g4_reg[6] + g4_reg[7];
	assign v4c0l0_out[2] = g4_reg[8] + g4_reg[9] + g4_reg[10] + g4_reg[11];
	assign v4c0l0_out[3] = g4_reg[12] + g4_reg[13] + g4_reg[14] + g4_reg[15];
	assign v4c0l0_out[4] = g4_reg[16] + g4_reg[17] + g4_reg[18] + g4_reg[19];
	assign v4c0l0_out[5] = g4_reg[20] + g4_reg[21] + g4_reg[22] + g4_reg[23];
	assign v4c0l0_out[6] = g4_reg[24] + g4_reg[25] + g4_reg[26] + g4_reg[27];
	assign v4c0l0_out[7] = g4_reg[28] + g4_reg[29] + g4_reg[30] + g4_reg[31];
	assign v4c0l0_out[8] = g4_reg[32] + g4_reg[33] + g4_reg[34] + g4_reg[35];
	assign v4c0l0_out[9] = g4_reg[36];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 10; i = i + 1)
            v4c0l0[i] <= v4c0l0_out[i];
    end

	reg [3:0] v4c0l1 [0:4];
	logic [3:0] v4c0l1_out [0:4];
	assign v4c0l1_out[0] = v4c0l0[0] + v4c0l0[1];
	assign v4c0l1_out[1] = v4c0l0[2] + v4c0l0[3];
	assign v4c0l1_out[2] = v4c0l0[4] + v4c0l0[5];
	assign v4c0l1_out[3] = v4c0l0[6] + v4c0l0[7];
	assign v4c0l1_out[4] = v4c0l0[8] + v4c0l0[9];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 5; i = i + 1)
            v4c0l1[i] <= v4c0l1_out[i];
    end

	reg [4:0] v4c0l2 [0:2];
	logic [4:0] v4c0l2_out [0:2];
	assign v4c0l2_out[0] = v4c0l1[0] + v4c0l1[1];
	assign v4c0l2_out[1] = v4c0l1[2] + v4c0l1[3];
	assign v4c0l2_out[2] = v4c0l1[4];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 3; i = i + 1)
            v4c0l2[i] <= v4c0l2_out[i];
    end

	reg [5:0] v4c0l3 [0:1];
	logic [5:0] v4c0l3_out [0:1];
	assign v4c0l3_out[0] = v4c0l2[0] + v4c0l2[1];
	assign v4c0l3_out[1] = v4c0l2[2];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 2; i = i + 1)
            v4c0l3[i] <= v4c0l3_out[i];
    end

	reg [6:0] v4c0l4 [0:0];
	logic [6:0] v4c0l4_out [0:0];
	assign v4c0l4_out[0] = v4c0l3[0] + v4c0l3[1];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 1; i = i + 1)
            v4c0l4[i] <= v4c0l4_out[i];
    end

	reg [7:0] v4c0l5 [0:0];
	logic [7:0] v4c0l5_out [0:0];
	assign v4c0l5_out[0] = v4c0l4[0];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 1; i = i + 1)
            v4c0l5[i] <= v4c0l5_out[i];
    end

	assign val[4] = v4c0l5[0];
	
	// 0.015625
	logic [0:40] g5;
	reg [0:40] g5_reg;
	assign g5[0] = l[56] || l[58];
	assign g5[1] = l[199];
	assign g5[2] = l[266] || l[274];
	assign g5[3] = l[356];
	assign g5[4] = l[377];
	assign g5[5] = l[411];
	assign g5[6] = l[455] || l[464];
	assign g5[7] = l[485];
	assign g5[8] = l[571] || l[581];
	assign g5[9] = l[657];
	assign g5[10] = l[662];
	assign g5[11] = l[697];
	assign g5[12] = l[783] || l[793];
	assign g5[13] = l[808];
	assign g5[14] = l[815] || l[823];
	assign g5[15] = l[863];
	assign g5[16] = l[883];
	assign g5[17] = l[904];
	assign g5[18] = l[912];
	assign g5[19] = l[976];
	assign g5[20] = l[980];
	assign g5[21] = l[996];
	assign g5[22] = l[1013];
	assign g5[23] = l[1052] || l[1056];
	assign g5[24] = l[1097];
	assign g5[25] = l[1119];
	assign g5[26] = l[1129];
	assign g5[27] = l[1150];
	assign g5[28] = l[1200];
	assign g5[29] = l[1207];
	assign g5[30] = l[1224];
	assign g5[31] = l[1245] || l[1257];
	assign g5[32] = l[1276] || l[1281];
	assign g5[33] = l[1291] || l[1294];
	assign g5[34] = l[1317];
	assign g5[35] = l[1328];
	assign g5[36] = l[1342];
	assign g5[37] = l[1349];
	assign g5[38] = l[1367] || l[1370];
	assign g5[39] = l[1381];
	assign g5[40] = l[1409];
	
    always_ff @(posedge clk) begin
        g5_reg <= g5;
    end
    
	logic [2:0] v5c0l0_out [0:10];
	logic [2:0] v5c0l0 [0:10];
	assign v5c0l0_out[0] = g5_reg[0] + g5_reg[1] + g5_reg[2] + g5_reg[3];
	assign v5c0l0_out[1] = g5_reg[4] + g5_reg[5] + g5_reg[6] + g5_reg[7];
	assign v5c0l0_out[2] = g5_reg[8] + g5_reg[9] + g5_reg[10] + g5_reg[11];
	assign v5c0l0_out[3] = g5_reg[12] + g5_reg[13] + g5_reg[14] + g5_reg[15];
	assign v5c0l0_out[4] = g5_reg[16] + g5_reg[17] + g5_reg[18] + g5_reg[19];
	assign v5c0l0_out[5] = g5_reg[20] + g5_reg[21] + g5_reg[22] + g5_reg[23];
	assign v5c0l0_out[6] = g5_reg[24] + g5_reg[25] + g5_reg[26] + g5_reg[27];
	assign v5c0l0_out[7] = g5_reg[28] + g5_reg[29] + g5_reg[30] + g5_reg[31];
	assign v5c0l0_out[8] = g5_reg[32] + g5_reg[33] + g5_reg[34] + g5_reg[35];
	assign v5c0l0_out[9] = g5_reg[36] + g5_reg[37] + g5_reg[38] + g5_reg[39];
	assign v5c0l0_out[10] = g5_reg[40];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 11; i = i + 1)
            v5c0l0[i] <= v5c0l0_out[i];
    end

	reg [3:0] v5c0l1 [0:5];
	logic [3:0] v5c0l1_out [0:5];
	assign v5c0l1_out[0] = v5c0l0[0] + v5c0l0[1];
	assign v5c0l1_out[1] = v5c0l0[2] + v5c0l0[3];
	assign v5c0l1_out[2] = v5c0l0[4] + v5c0l0[5];
	assign v5c0l1_out[3] = v5c0l0[6] + v5c0l0[7];
	assign v5c0l1_out[4] = v5c0l0[8] + v5c0l0[9];
	assign v5c0l1_out[5] = v5c0l0[10];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 6; i = i + 1)
            v5c0l1[i] <= v5c0l1_out[i];
    end

	reg [4:0] v5c0l2 [0:2];
	logic [4:0] v5c0l2_out [0:2];
	assign v5c0l2_out[0] = v5c0l1[0] + v5c0l1[1];
	assign v5c0l2_out[1] = v5c0l1[2] + v5c0l1[3];
	assign v5c0l2_out[2] = v5c0l1[4] + v5c0l1[5];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 3; i = i + 1)
            v5c0l2[i] <= v5c0l2_out[i];
    end

	reg [5:0] v5c0l3 [0:1];
	logic [5:0] v5c0l3_out [0:1];
	assign v5c0l3_out[0] = v5c0l2[0] + v5c0l2[1];
	assign v5c0l3_out[1] = v5c0l2[2];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 2; i = i + 1)
            v5c0l3[i] <= v5c0l3_out[i];
    end

	reg [6:0] v5c0l4 [0:0];
	logic [6:0] v5c0l4_out [0:0];
	assign v5c0l4_out[0] = v5c0l3[0] + v5c0l3[1];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 1; i = i + 1)
            v5c0l4[i] <= v5c0l4_out[i];
    end

	reg [7:0] v5c0l5 [0:0];
	logic [7:0] v5c0l5_out [0:0];
	assign v5c0l5_out[0] = v5c0l4[0];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 1; i = i + 1)
            v5c0l5[i] <= v5c0l5_out[i];
    end

	assign val[5] = v5c0l5[0];
	
	// 0.03125
	logic [0:57] g6;
	reg [0:57] g6_reg;
	assign g6[0] = l[131];
	assign g6[1] = l[220];
	assign g6[2] = l[260];
	assign g6[3] = l[284] || l[295];
	assign g6[4] = l[318];
	assign g6[5] = l[332];
	assign g6[6] = l[350];
	assign g6[7] = l[362] || l[368];
	assign g6[8] = l[416] || l[421];
	assign g6[9] = l[424];
	assign g6[10] = l[445];
	assign g6[11] = l[477];
	assign g6[12] = l[493];
	assign g6[13] = l[498] || l[507] || l[509];
	assign g6[14] = l[514] || l[521];
	assign g6[15] = l[534] || l[537];
	assign g6[16] = l[557];
	assign g6[17] = l[590];
	assign g6[18] = l[618];
	assign g6[19] = l[640];
	assign g6[20] = l[664];
	assign g6[21] = l[679] || l[691];
	assign g6[22] = l[720];
	assign g6[23] = l[726] || l[738] || l[741];
	assign g6[24] = l[743] || l[747];
	assign g6[25] = l[770];
	assign g6[26] = l[796];
	assign g6[27] = l[818] || l[821];
	assign g6[28] = l[840];
	assign g6[29] = l[872];
	assign g6[30] = l[892];
	assign g6[31] = l[902];
	assign g6[32] = l[939] || l[942];
	assign g6[33] = l[959];
	assign g6[34] = l[973];
	assign g6[35] = l[983] || l[988];
	assign g6[36] = l[997];
	assign g6[37] = l[1049] || l[1053];
	assign g6[38] = l[1058] || l[1061];
	assign g6[39] = l[1079];
	assign g6[40] = l[1085] || l[1090];
	assign g6[41] = l[1105];
	assign g6[42] = l[1117];
	assign g6[43] = l[1137];
	assign g6[44] = l[1140];
	assign g6[45] = l[1164] || l[1168];
	assign g6[46] = l[1193] || l[1196];
	assign g6[47] = l[1204] || l[1210];
	assign g6[48] = l[1230];
	assign g6[49] = l[1259] || l[1262] || l[1266] || l[1271] || l[1272];
	assign g6[50] = l[1295] || l[1301];
	assign g6[51] = l[1304];
	assign g6[52] = l[1324];
	assign g6[53] = l[1334];
	assign g6[54] = l[1341];
	assign g6[55] = l[1377];
	assign g6[56] = l[1391] || l[1397];
	assign g6[57] = l[1405] || l[1410];
	
    always_ff @(posedge clk) begin
        g6_reg <= g6;
    end
    
	logic [2:0] v6c0l0_out [0:14];
	logic [2:0] v6c0l0 [0:14];
	assign v6c0l0_out[0] = g6_reg[0] + g6_reg[1] + g6_reg[2] + g6_reg[3];
	assign v6c0l0_out[1] = g6_reg[4] + g6_reg[5] + g6_reg[6] + g6_reg[7];
	assign v6c0l0_out[2] = g6_reg[8] + g6_reg[9] + g6_reg[10] + g6_reg[11];
	assign v6c0l0_out[3] = g6_reg[12] + g6_reg[13] + g6_reg[14] + g6_reg[15];
	assign v6c0l0_out[4] = g6_reg[16] + g6_reg[17] + g6_reg[18] + g6_reg[19];
	assign v6c0l0_out[5] = g6_reg[20] + g6_reg[21] + g6_reg[22] + g6_reg[23];
	assign v6c0l0_out[6] = g6_reg[24] + g6_reg[25] + g6_reg[26] + g6_reg[27];
	assign v6c0l0_out[7] = g6_reg[28] + g6_reg[29] + g6_reg[30] + g6_reg[31];
	assign v6c0l0_out[8] = g6_reg[32] + g6_reg[33] + g6_reg[34] + g6_reg[35];
	assign v6c0l0_out[9] = g6_reg[36] + g6_reg[37] + g6_reg[38] + g6_reg[39];
	assign v6c0l0_out[10] = g6_reg[40] + g6_reg[41] + g6_reg[42] + g6_reg[43];
	assign v6c0l0_out[11] = g6_reg[44] + g6_reg[45] + g6_reg[46] + g6_reg[47];
	assign v6c0l0_out[12] = g6_reg[48] + g6_reg[49] + g6_reg[50] + g6_reg[51];
	assign v6c0l0_out[13] = g6_reg[52] + g6_reg[53] + g6_reg[54] + g6_reg[55];
	assign v6c0l0_out[14] = g6_reg[56] + g6_reg[57];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 15; i = i + 1)
            v6c0l0[i] <= v6c0l0_out[i];
    end

	reg [3:0] v6c0l1 [0:7];
	logic [3:0] v6c0l1_out [0:7];
	assign v6c0l1_out[0] = v6c0l0[0] + v6c0l0[1];
	assign v6c0l1_out[1] = v6c0l0[2] + v6c0l0[3];
	assign v6c0l1_out[2] = v6c0l0[4] + v6c0l0[5];
	assign v6c0l1_out[3] = v6c0l0[6] + v6c0l0[7];
	assign v6c0l1_out[4] = v6c0l0[8] + v6c0l0[9];
	assign v6c0l1_out[5] = v6c0l0[10] + v6c0l0[11];
	assign v6c0l1_out[6] = v6c0l0[12] + v6c0l0[13];
	assign v6c0l1_out[7] = v6c0l0[14];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 8; i = i + 1)
            v6c0l1[i] <= v6c0l1_out[i];
    end

	reg [4:0] v6c0l2 [0:3];
	logic [4:0] v6c0l2_out [0:3];
	assign v6c0l2_out[0] = v6c0l1[0] + v6c0l1[1];
	assign v6c0l2_out[1] = v6c0l1[2] + v6c0l1[3];
	assign v6c0l2_out[2] = v6c0l1[4] + v6c0l1[5];
	assign v6c0l2_out[3] = v6c0l1[6] + v6c0l1[7];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 4; i = i + 1)
            v6c0l2[i] <= v6c0l2_out[i];
    end

	reg [5:0] v6c0l3 [0:1];
	logic [5:0] v6c0l3_out [0:1];
	assign v6c0l3_out[0] = v6c0l2[0] + v6c0l2[1];
	assign v6c0l3_out[1] = v6c0l2[2] + v6c0l2[3];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 2; i = i + 1)
            v6c0l3[i] <= v6c0l3_out[i];
    end

	reg [6:0] v6c0l4 [0:0];
	logic [6:0] v6c0l4_out [0:0];
	assign v6c0l4_out[0] = v6c0l3[0] + v6c0l3[1];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 1; i = i + 1)
            v6c0l4[i] <= v6c0l4_out[i];
    end

	reg [7:0] v6c0l5 [0:0];
	logic [7:0] v6c0l5_out [0:0];
	assign v6c0l5_out[0] = v6c0l4[0];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 1; i = i + 1)
            v6c0l5[i] <= v6c0l5_out[i];
    end

	assign val[6] = v6c0l5[0];
	
	// 0.0625
	logic [0:79] g7;
	reg [0:79] g7_reg;
	assign g7[0] = l[108] || l[111];
	assign g7[1] = l[141];
	assign g7[2] = l[159];
	assign g7[3] = l[173];
	assign g7[4] = l[208] || l[212];
	assign g7[5] = l[224];
	assign g7[6] = l[250] || l[257];
	assign g7[7] = l[270];
	assign g7[8] = l[286];
	assign g7[9] = l[316] || l[322];
	assign g7[10] = l[337] || l[340] || l[342];
	assign g7[11] = l[363];
	assign g7[12] = l[380];
	assign g7[13] = l[396];
	assign g7[14] = l[410];
	assign g7[15] = l[430];
	assign g7[16] = l[449];
	assign g7[17] = l[456] || l[459];
	assign g7[18] = l[474] || l[483];
	assign g7[19] = l[503];
	assign g7[20] = l[526];
	assign g7[21] = l[530] || l[531] || l[542];
	assign g7[22] = l[545] || l[554];
	assign g7[23] = l[567];
	assign g7[24] = l[578] || l[579];
	assign g7[25] = l[604] || l[611];
	assign g7[26] = l[620];
	assign g7[27] = l[637];
	assign g7[28] = l[660];
	assign g7[29] = l[672];
	assign g7[30] = l[685];
	assign g7[31] = l[693] || l[699];
	assign g7[32] = l[711];
	assign g7[33] = l[721];
	assign g7[34] = l[731] || l[732] || l[735] || l[736];
	assign g7[35] = l[745] || l[751];
	assign g7[36] = l[764] || l[768];
	assign g7[37] = l[773] || l[776] || l[782];
	assign g7[38] = l[798] || l[803] || l[804];
	assign g7[39] = l[811];
	assign g7[40] = l[824] || l[827];
	assign g7[41] = l[831] || l[832] || l[834] || l[839];
	assign g7[42] = l[853];
	assign g7[43] = l[864];
	assign g7[44] = l[886];
	assign g7[45] = l[893];
	assign g7[46] = l[907] || l[915] || l[916];
	assign g7[47] = l[925] || l[934];
	assign g7[48] = l[935] || l[950];
	assign g7[49] = l[954] || l[962];
	assign g7[50] = l[968];
	assign g7[51] = l[987];
	assign g7[52] = l[992] || l[999] || l[1002];
	assign g7[53] = l[1004] || l[1006];
	assign g7[54] = l[1022] || l[1031];
	assign g7[55] = l[1035] || l[1038] || l[1043];
	assign g7[56] = l[1045] || l[1048];
	assign g7[57] = l[1071] || l[1076] || l[1081];
	assign g7[58] = l[1092] || l[1095];
	assign g7[59] = l[1102] || l[1109] || l[1112];
	assign g7[60] = l[1128] || l[1134];
	assign g7[61] = l[1157] || l[1159] || l[1162];
	assign g7[62] = l[1165] || l[1169] || l[1173] || l[1176];
	assign g7[63] = l[1177] || l[1180] || l[1182] || l[1185];
	assign g7[64] = l[1192];
	assign g7[65] = l[1205] || l[1208];
	assign g7[66] = l[1218] || l[1219];
	assign g7[67] = l[1234] || l[1241];
	assign g7[68] = l[1244] || l[1247] || l[1252];
	assign g7[69] = l[1265];
	assign g7[70] = l[1278] || l[1288];
	assign g7[71] = l[1290] || l[1299];
	assign g7[72] = l[1306];
	assign g7[73] = l[1312] || l[1313] || l[1319];
	assign g7[74] = l[1331];
	assign g7[75] = l[1339] || l[1347];
	assign g7[76] = l[1351] || l[1354] || l[1356] || l[1360];
	assign g7[77] = l[1376];
	assign g7[78] = l[1389] || l[1395];
	assign g7[79] = l[1407];
	
    always_ff @(posedge clk) begin
        g7_reg <= g7;
    end
    
	logic [2:0] v7c0l0_out [0:19];
	logic [2:0] v7c0l0 [0:19];
	assign v7c0l0_out[0] = g7_reg[0] + g7_reg[1] + g7_reg[2] + g7_reg[3];
	assign v7c0l0_out[1] = g7_reg[4] + g7_reg[5] + g7_reg[6] + g7_reg[7];
	assign v7c0l0_out[2] = g7_reg[8] + g7_reg[9] + g7_reg[10] + g7_reg[11];
	assign v7c0l0_out[3] = g7_reg[12] + g7_reg[13] + g7_reg[14] + g7_reg[15];
	assign v7c0l0_out[4] = g7_reg[16] + g7_reg[17] + g7_reg[18] + g7_reg[19];
	assign v7c0l0_out[5] = g7_reg[20] + g7_reg[21] + g7_reg[22] + g7_reg[23];
	assign v7c0l0_out[6] = g7_reg[24] + g7_reg[25] + g7_reg[26] + g7_reg[27];
	assign v7c0l0_out[7] = g7_reg[28] + g7_reg[29] + g7_reg[30] + g7_reg[31];
	assign v7c0l0_out[8] = g7_reg[32] + g7_reg[33] + g7_reg[34] + g7_reg[35];
	assign v7c0l0_out[9] = g7_reg[36] + g7_reg[37] + g7_reg[38] + g7_reg[39];
	assign v7c0l0_out[10] = g7_reg[40] + g7_reg[41] + g7_reg[42] + g7_reg[43];
	assign v7c0l0_out[11] = g7_reg[44] + g7_reg[45] + g7_reg[46] + g7_reg[47];
	assign v7c0l0_out[12] = g7_reg[48] + g7_reg[49] + g7_reg[50] + g7_reg[51];
	assign v7c0l0_out[13] = g7_reg[52] + g7_reg[53] + g7_reg[54] + g7_reg[55];
	assign v7c0l0_out[14] = g7_reg[56] + g7_reg[57] + g7_reg[58] + g7_reg[59];
	assign v7c0l0_out[15] = g7_reg[60] + g7_reg[61] + g7_reg[62] + g7_reg[63];
	assign v7c0l0_out[16] = g7_reg[64] + g7_reg[65] + g7_reg[66] + g7_reg[67];
	assign v7c0l0_out[17] = g7_reg[68] + g7_reg[69] + g7_reg[70] + g7_reg[71];
	assign v7c0l0_out[18] = g7_reg[72] + g7_reg[73] + g7_reg[74] + g7_reg[75];
	assign v7c0l0_out[19] = g7_reg[76] + g7_reg[77] + g7_reg[78] + g7_reg[79];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 20; i = i + 1)
            v7c0l0[i] <= v7c0l0_out[i];
    end

	reg [3:0] v7c0l1 [0:9];
	logic [3:0] v7c0l1_out [0:9];
	assign v7c0l1_out[0] = v7c0l0[0] + v7c0l0[1];
	assign v7c0l1_out[1] = v7c0l0[2] + v7c0l0[3];
	assign v7c0l1_out[2] = v7c0l0[4] + v7c0l0[5];
	assign v7c0l1_out[3] = v7c0l0[6] + v7c0l0[7];
	assign v7c0l1_out[4] = v7c0l0[8] + v7c0l0[9];
	assign v7c0l1_out[5] = v7c0l0[10] + v7c0l0[11];
	assign v7c0l1_out[6] = v7c0l0[12] + v7c0l0[13];
	assign v7c0l1_out[7] = v7c0l0[14] + v7c0l0[15];
	assign v7c0l1_out[8] = v7c0l0[16] + v7c0l0[17];
	assign v7c0l1_out[9] = v7c0l0[18] + v7c0l0[19];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 10; i = i + 1)
            v7c0l1[i] <= v7c0l1_out[i];
    end

	reg [4:0] v7c0l2 [0:4];
	logic [4:0] v7c0l2_out [0:4];
	assign v7c0l2_out[0] = v7c0l1[0] + v7c0l1[1];
	assign v7c0l2_out[1] = v7c0l1[2] + v7c0l1[3];
	assign v7c0l2_out[2] = v7c0l1[4] + v7c0l1[5];
	assign v7c0l2_out[3] = v7c0l1[6] + v7c0l1[7];
	assign v7c0l2_out[4] = v7c0l1[8] + v7c0l1[9];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 5; i = i + 1)
            v7c0l2[i] <= v7c0l2_out[i];
    end

	reg [5:0] v7c0l3 [0:2];
	logic [5:0] v7c0l3_out [0:2];
	assign v7c0l3_out[0] = v7c0l2[0] + v7c0l2[1];
	assign v7c0l3_out[1] = v7c0l2[2] + v7c0l2[3];
	assign v7c0l3_out[2] = v7c0l2[4];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 3; i = i + 1)
            v7c0l3[i] <= v7c0l3_out[i];
    end

	reg [6:0] v7c0l4 [0:1];
	logic [6:0] v7c0l4_out [0:1];
	assign v7c0l4_out[0] = v7c0l3[0] + v7c0l3[1];
	assign v7c0l4_out[1] = v7c0l3[2];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 2; i = i + 1)
            v7c0l4[i] <= v7c0l4_out[i];
    end

	reg [7:0] v7c0l5 [0:0];
	logic [7:0] v7c0l5_out [0:0];
	assign v7c0l5_out[0] = v7c0l4[0] + v7c0l4[1];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 1; i = i + 1)
            v7c0l5[i] <= v7c0l5_out[i];
    end

	assign val[7] = v7c0l5[0];
	
	// 0.125
	logic [0:87] g8;
	reg [0:87] g8_reg;
	assign g8[0] = l[4];
	assign g8[1] = l[16];
	assign g8[2] = l[31] || l[34];
	assign g8[3] = l[46] || l[49] || l[51] || l[53];
	assign g8[4] = l[62] || l[68];
	assign g8[5] = l[94] || l[97] || l[100] || l[103];
	assign g8[6] = l[122];
	assign g8[7] = l[125] || l[127];
	assign g8[8] = l[139] || l[144] || l[146];
	assign g8[9] = l[156] || l[161] || l[169];
	assign g8[10] = l[170] || l[177];
	assign g8[11] = l[189] || l[191] || l[193] || l[195] || l[197] || l[201];
	assign g8[12] = l[204] || l[207] || l[209];
	assign g8[13] = l[218];
	assign g8[14] = l[233] || l[236] || l[240] || l[248];
	assign g8[15] = l[256] || l[261] || l[264];
	assign g8[16] = l[268] || l[280];
	assign g8[17] = l[281] || l[288];
	assign g8[18] = l[298] || l[299] || l[301] || l[304] || l[308] || l[310] || l[311];
	assign g8[19] = l[320] || l[328];
	assign g8[20] = l[330] || l[344];
	assign g8[21] = l[348] || l[352] || l[353] || l[360];
	assign g8[22] = l[373];
	assign g8[23] = l[378] || l[382] || l[387] || l[389];
	assign g8[24] = l[393] || l[400] || l[405];
	assign g8[25] = l[413] || l[417] || l[420] || l[422];
	assign g8[26] = l[426] || l[427] || l[432];
	assign g8[27] = l[439] || l[453];
	assign g8[28] = l[460] || l[466];
	assign g8[29] = l[473] || l[479];
	assign g8[30] = l[486] || l[496];
	assign g8[31] = l[519] || l[523];
	assign g8[32] = l[535];
	assign g8[33] = l[551] || l[556] || l[560];
	assign g8[34] = l[562];
	assign g8[35] = l[574];
	assign g8[36] = l[586] || l[587] || l[592] || l[594] || l[599];
	assign g8[37] = l[602] || l[613] || l[616];
	assign g8[38] = l[621];
	assign g8[39] = l[633] || l[638] || l[642] || l[645];
	assign g8[40] = l[646] || l[649] || l[653] || l[655] || l[658];
	assign g8[41] = l[665] || l[666] || l[676];
	assign g8[42] = l[678];
	assign g8[43] = l[706] || l[708] || l[716];
	assign g8[44] = l[739];
	assign g8[45] = l[748] || l[753] || l[756];
	assign g8[46] = l[758] || l[766];
	assign g8[47] = l[785] || l[787] || l[792];
	assign g8[48] = l[843] || l[849];
	assign g8[49] = l[859];
	assign g8[50] = l[867] || l[868] || l[875];
	assign g8[51] = l[880] || l[881] || l[890];
	assign g8[52] = l[896] || l[899] || l[903];
	assign g8[53] = l[911];
	assign g8[54] = l[922] || l[926] || l[931];
	assign g8[55] = l[946] || l[947];
	assign g8[56] = l[952];
	assign g8[57] = l[970] || l[975];
	assign g8[58] = l[989];
	assign g8[59] = l[1008] || l[1016];
	assign g8[60] = l[1020] || l[1025] || l[1029];
	assign g8[61] = l[1037];
	assign g8[62] = l[1051];
	assign g8[63] = l[1065];
	assign g8[64] = l[1070] || l[1078];
	assign g8[65] = l[1082] || l[1088];
	assign g8[66] = l[1104] || l[1107];
	assign g8[67] = l[1114] || l[1116] || l[1125];
	assign g8[68] = l[1138];
	assign g8[69] = l[1148];
	assign g8[70] = l[1158];
	assign g8[71] = l[1170];
	assign g8[72] = l[1184];
	assign g8[73] = l[1195] || l[1201];
	assign g8[74] = l[1216];
	assign g8[75] = l[1222] || l[1226];
	assign g8[76] = l[1249] || l[1253];
	assign g8[77] = l[1261] || l[1269];
	assign g8[78] = l[1275] || l[1279] || l[1285];
	assign g8[79] = l[1292] || l[1296] || l[1302];
	assign g8[80] = l[1323];
	assign g8[81] = l[1325];
	assign g8[82] = l[1343];
	assign g8[83] = l[1350];
	assign g8[84] = l[1364] || l[1372] || l[1373];
	assign g8[85] = l[1383];
	assign g8[86] = l[1398];
	assign g8[87] = l[1401] || l[1403] || l[1411];
	
    always_ff @(posedge clk) begin
        g8_reg <= g8;
    end
    
	logic [2:0] v8c0l0_out [0:21];
	logic [2:0] v8c0l0 [0:21];
	assign v8c0l0_out[0] = g8_reg[0] + g8_reg[1] + g8_reg[2] + g8_reg[3];
	assign v8c0l0_out[1] = g8_reg[4] + g8_reg[5] + g8_reg[6] + g8_reg[7];
	assign v8c0l0_out[2] = g8_reg[8] + g8_reg[9] + g8_reg[10] + g8_reg[11];
	assign v8c0l0_out[3] = g8_reg[12] + g8_reg[13] + g8_reg[14] + g8_reg[15];
	assign v8c0l0_out[4] = g8_reg[16] + g8_reg[17] + g8_reg[18] + g8_reg[19];
	assign v8c0l0_out[5] = g8_reg[20] + g8_reg[21] + g8_reg[22] + g8_reg[23];
	assign v8c0l0_out[6] = g8_reg[24] + g8_reg[25] + g8_reg[26] + g8_reg[27];
	assign v8c0l0_out[7] = g8_reg[28] + g8_reg[29] + g8_reg[30] + g8_reg[31];
	assign v8c0l0_out[8] = g8_reg[32] + g8_reg[33] + g8_reg[34] + g8_reg[35];
	assign v8c0l0_out[9] = g8_reg[36] + g8_reg[37] + g8_reg[38] + g8_reg[39];
	assign v8c0l0_out[10] = g8_reg[40] + g8_reg[41] + g8_reg[42] + g8_reg[43];
	assign v8c0l0_out[11] = g8_reg[44] + g8_reg[45] + g8_reg[46] + g8_reg[47];
	assign v8c0l0_out[12] = g8_reg[48] + g8_reg[49] + g8_reg[50] + g8_reg[51];
	assign v8c0l0_out[13] = g8_reg[52] + g8_reg[53] + g8_reg[54] + g8_reg[55];
	assign v8c0l0_out[14] = g8_reg[56] + g8_reg[57] + g8_reg[58] + g8_reg[59];
	assign v8c0l0_out[15] = g8_reg[60] + g8_reg[61] + g8_reg[62] + g8_reg[63];
	assign v8c0l0_out[16] = g8_reg[64] + g8_reg[65] + g8_reg[66] + g8_reg[67];
	assign v8c0l0_out[17] = g8_reg[68] + g8_reg[69] + g8_reg[70] + g8_reg[71];
	assign v8c0l0_out[18] = g8_reg[72] + g8_reg[73] + g8_reg[74] + g8_reg[75];
	assign v8c0l0_out[19] = g8_reg[76] + g8_reg[77] + g8_reg[78] + g8_reg[79];
	assign v8c0l0_out[20] = g8_reg[80] + g8_reg[81] + g8_reg[82] + g8_reg[83];
	assign v8c0l0_out[21] = g8_reg[84] + g8_reg[85] + g8_reg[86] + g8_reg[87];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 22; i = i + 1)
            v8c0l0[i] <= v8c0l0_out[i];
    end

	reg [3:0] v8c0l1 [0:10];
	logic [3:0] v8c0l1_out [0:10];
	assign v8c0l1_out[0] = v8c0l0[0] + v8c0l0[1];
	assign v8c0l1_out[1] = v8c0l0[2] + v8c0l0[3];
	assign v8c0l1_out[2] = v8c0l0[4] + v8c0l0[5];
	assign v8c0l1_out[3] = v8c0l0[6] + v8c0l0[7];
	assign v8c0l1_out[4] = v8c0l0[8] + v8c0l0[9];
	assign v8c0l1_out[5] = v8c0l0[10] + v8c0l0[11];
	assign v8c0l1_out[6] = v8c0l0[12] + v8c0l0[13];
	assign v8c0l1_out[7] = v8c0l0[14] + v8c0l0[15];
	assign v8c0l1_out[8] = v8c0l0[16] + v8c0l0[17];
	assign v8c0l1_out[9] = v8c0l0[18] + v8c0l0[19];
	assign v8c0l1_out[10] = v8c0l0[20] + v8c0l0[21];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 11; i = i + 1)
            v8c0l1[i] <= v8c0l1_out[i];
    end

	reg [4:0] v8c0l2 [0:5];
	logic [4:0] v8c0l2_out [0:5];
	assign v8c0l2_out[0] = v8c0l1[0] + v8c0l1[1];
	assign v8c0l2_out[1] = v8c0l1[2] + v8c0l1[3];
	assign v8c0l2_out[2] = v8c0l1[4] + v8c0l1[5];
	assign v8c0l2_out[3] = v8c0l1[6] + v8c0l1[7];
	assign v8c0l2_out[4] = v8c0l1[8] + v8c0l1[9];
	assign v8c0l2_out[5] = v8c0l1[10];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 6; i = i + 1)
            v8c0l2[i] <= v8c0l2_out[i];
    end

	reg [5:0] v8c0l3 [0:2];
	logic [5:0] v8c0l3_out [0:2];
	assign v8c0l3_out[0] = v8c0l2[0] + v8c0l2[1];
	assign v8c0l3_out[1] = v8c0l2[2] + v8c0l2[3];
	assign v8c0l3_out[2] = v8c0l2[4] + v8c0l2[5];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 3; i = i + 1)
            v8c0l3[i] <= v8c0l3_out[i];
    end

	reg [6:0] v8c0l4 [0:1];
	logic [6:0] v8c0l4_out [0:1];
	assign v8c0l4_out[0] = v8c0l3[0] + v8c0l3[1];
	assign v8c0l4_out[1] = v8c0l3[2];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 2; i = i + 1)
            v8c0l4[i] <= v8c0l4_out[i];
    end

	reg [7:0] v8c0l5 [0:0];
	logic [7:0] v8c0l5_out [0:0];
	assign v8c0l5_out[0] = v8c0l4[0] + v8c0l4[1];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 1; i = i + 1)
            v8c0l5[i] <= v8c0l5_out[i];
    end

	assign val[8] = v8c0l5[0];
	
	// 0.25
	logic [0:43] g9;
	reg [0:43] g9_reg;
	assign g9[0] = l[8] || l[11];
	assign g9[1] = l[19] || l[23];
	assign g9[2] = l[38] || l[44];
	assign g9[3] = l[47] || l[60];
	assign g9[4] = l[63] || l[65] || l[76];
	assign g9[5] = l[78] || l[79] || l[84];
	assign g9[6] = l[96] || l[99];
	assign g9[7] = l[109] || l[115];
	assign g9[8] = l[128] || l[136];
	assign g9[9] = l[142];
	assign g9[10] = l[158];
	assign g9[11] = l[181] || l[184];
	assign g9[12] = l[198];
	assign g9[13] = l[216];
	assign g9[14] = l[228] || l[232];
	assign g9[15] = l[244];
	assign g9[16] = l[252];
	assign g9[17] = l[271];
	assign g9[18] = l[294];
	assign g9[19] = l[324] || l[325];
	assign g9[20] = l[355];
	assign g9[21] = l[437];
	assign g9[22] = l[451];
	assign g9[23] = l[478];
	assign g9[24] = l[512];
	assign g9[25] = l[516];
	assign g9[26] = l[540] || l[543];
	assign g9[27] = l[608];
	assign g9[28] = l[628];
	assign g9[29] = l[641];
	assign g9[30] = l[689];
	assign g9[31] = l[702];
	assign g9[32] = l[714];
	assign g9[33] = l[733];
	assign g9[34] = l[755];
	assign g9[35] = l[777];
	assign g9[36] = l[790] || l[797];
	assign g9[37] = l[825];
	assign g9[38] = l[838];
	assign g9[39] = l[917];
	assign g9[40] = l[941];
	assign g9[41] = l[956];
	assign g9[42] = l[1001];
	assign g9[43] = l[1120];
	
    always_ff @(posedge clk) begin
        g9_reg <= g9;
    end
    
	logic [2:0] v9c0l0_out [0:10];
	logic [2:0] v9c0l0 [0:10];
	assign v9c0l0_out[0] = g9_reg[0] + g9_reg[1] + g9_reg[2] + g9_reg[3];
	assign v9c0l0_out[1] = g9_reg[4] + g9_reg[5] + g9_reg[6] + g9_reg[7];
	assign v9c0l0_out[2] = g9_reg[8] + g9_reg[9] + g9_reg[10] + g9_reg[11];
	assign v9c0l0_out[3] = g9_reg[12] + g9_reg[13] + g9_reg[14] + g9_reg[15];
	assign v9c0l0_out[4] = g9_reg[16] + g9_reg[17] + g9_reg[18] + g9_reg[19];
	assign v9c0l0_out[5] = g9_reg[20] + g9_reg[21] + g9_reg[22] + g9_reg[23];
	assign v9c0l0_out[6] = g9_reg[24] + g9_reg[25] + g9_reg[26] + g9_reg[27];
	assign v9c0l0_out[7] = g9_reg[28] + g9_reg[29] + g9_reg[30] + g9_reg[31];
	assign v9c0l0_out[8] = g9_reg[32] + g9_reg[33] + g9_reg[34] + g9_reg[35];
	assign v9c0l0_out[9] = g9_reg[36] + g9_reg[37] + g9_reg[38] + g9_reg[39];
	assign v9c0l0_out[10] = g9_reg[40] + g9_reg[41] + g9_reg[42] + g9_reg[43];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 11; i = i + 1)
            v9c0l0[i] <= v9c0l0_out[i];
    end

	reg [3:0] v9c0l1 [0:5];
	logic [3:0] v9c0l1_out [0:5];
	assign v9c0l1_out[0] = v9c0l0[0] + v9c0l0[1];
	assign v9c0l1_out[1] = v9c0l0[2] + v9c0l0[3];
	assign v9c0l1_out[2] = v9c0l0[4] + v9c0l0[5];
	assign v9c0l1_out[3] = v9c0l0[6] + v9c0l0[7];
	assign v9c0l1_out[4] = v9c0l0[8] + v9c0l0[9];
	assign v9c0l1_out[5] = v9c0l0[10];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 6; i = i + 1)
            v9c0l1[i] <= v9c0l1_out[i];
    end

	reg [4:0] v9c0l2 [0:2];
	logic [4:0] v9c0l2_out [0:2];
	assign v9c0l2_out[0] = v9c0l1[0] + v9c0l1[1];
	assign v9c0l2_out[1] = v9c0l1[2] + v9c0l1[3];
	assign v9c0l2_out[2] = v9c0l1[4] + v9c0l1[5];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 3; i = i + 1)
            v9c0l2[i] <= v9c0l2_out[i];
    end

	reg [5:0] v9c0l3 [0:1];
	logic [5:0] v9c0l3_out [0:1];
	assign v9c0l3_out[0] = v9c0l2[0] + v9c0l2[1];
	assign v9c0l3_out[1] = v9c0l2[2];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 2; i = i + 1)
            v9c0l3[i] <= v9c0l3_out[i];
    end

	reg [6:0] v9c0l4 [0:0];
	logic [6:0] v9c0l4_out [0:0];
	assign v9c0l4_out[0] = v9c0l3[0] + v9c0l3[1];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 1; i = i + 1)
            v9c0l4[i] <= v9c0l4_out[i];
    end

	reg [7:0] v9c0l5 [0:0];
	logic [7:0] v9c0l5_out [0:0];
	assign v9c0l5_out[0] = v9c0l4[0];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 1; i = i + 1)
            v9c0l5[i] <= v9c0l5_out[i];
    end

	assign val[9] = v9c0l5[0];
	
	// 0.5
	logic [0:5] g10;
	reg [0:5] g10_reg;
	assign g10[0] = l[15];
	assign g10[1] = l[17] || l[30];
	assign g10[2] = l[32];
	assign g10[3] = l[91];
	assign g10[4] = l[105];
	assign g10[5] = l[154];
	
    always_ff @(posedge clk) begin
        g10_reg <= g10;
    end
    
	logic [2:0] v10c0l0_out [0:1];
	logic [2:0] v10c0l0 [0:1];
	assign v10c0l0_out[0] = g10_reg[0] + g10_reg[1] + g10_reg[2] + g10_reg[3];
	assign v10c0l0_out[1] = g10_reg[4] + g10_reg[5];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 2; i = i + 1)
            v10c0l0[i] <= v10c0l0_out[i];
    end

	reg [3:0] v10c0l1 [0:0];
	logic [3:0] v10c0l1_out [0:0];
	assign v10c0l1_out[0] = v10c0l0[0] + v10c0l0[1];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 1; i = i + 1)
            v10c0l1[i] <= v10c0l1_out[i];
    end

	reg [4:0] v10c0l2 [0:0];
	logic [4:0] v10c0l2_out [0:0];
	assign v10c0l2_out[0] = v10c0l1[0];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 1; i = i + 1)
            v10c0l2[i] <= v10c0l2_out[i];
    end

	reg [5:0] v10c0l3 [0:0];
	logic [5:0] v10c0l3_out [0:0];
	assign v10c0l3_out[0] = v10c0l2[0];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 1; i = i + 1)
            v10c0l3[i] <= v10c0l3_out[i];
    end

	reg [6:0] v10c0l4 [0:0];
	logic [6:0] v10c0l4_out [0:0];
	assign v10c0l4_out[0] = v10c0l3[0];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 1; i = i + 1)
            v10c0l4[i] <= v10c0l4_out[i];
    end

	reg [7:0] v10c0l5 [0:0];
	logic [7:0] v10c0l5_out [0:0];
	assign v10c0l5_out[0] = v10c0l4[0];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 1; i = i + 1)
            v10c0l5[i] <= v10c0l5_out[i];
    end

	assign val[10] = v10c0l5[0];
	
	// 1.0
	logic [0:0] g11;
	reg [0:0] g11_reg;
	assign g11[0] = l[2] || l[5] || l[9];
	
    always_ff @(posedge clk) begin
        g11_reg <= g11;
    end
    
	logic [2:0] v11c0l0_out [0:0];
	logic [2:0] v11c0l0 [0:0];
	assign v11c0l0_out[0] = g11_reg[0];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 1; i = i + 1)
            v11c0l0[i] <= v11c0l0_out[i];
    end

	reg [3:0] v11c0l1 [0:0];
	logic [3:0] v11c0l1_out [0:0];
	assign v11c0l1_out[0] = v11c0l0[0];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 1; i = i + 1)
            v11c0l1[i] <= v11c0l1_out[i];
    end

	reg [4:0] v11c0l2 [0:0];
	logic [4:0] v11c0l2_out [0:0];
	assign v11c0l2_out[0] = v11c0l1[0];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 1; i = i + 1)
            v11c0l2[i] <= v11c0l2_out[i];
    end

	reg [5:0] v11c0l3 [0:0];
	logic [5:0] v11c0l3_out [0:0];
	assign v11c0l3_out[0] = v11c0l2[0];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 1; i = i + 1)
            v11c0l3[i] <= v11c0l3_out[i];
    end

	reg [6:0] v11c0l4 [0:0];
	logic [6:0] v11c0l4_out [0:0];
	assign v11c0l4_out[0] = v11c0l3[0];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 1; i = i + 1)
            v11c0l4[i] <= v11c0l4_out[i];
    end

	reg [7:0] v11c0l5 [0:0];
	logic [7:0] v11c0l5_out [0:0];
	assign v11c0l5_out[0] = v11c0l4[0];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 1; i = i + 1)
            v11c0l5[i] <= v11c0l5_out[i];
    end

	assign val[11] = v11c0l5[0];
	
	// 2.0
	logic [0:0] g12;
	reg [0:0] g12_reg;
	assign g12[0] = l[10];
	
    always_ff @(posedge clk) begin
        g12_reg <= g12;
    end
    
	logic [2:0] v12c0l0_out [0:0];
	logic [2:0] v12c0l0 [0:0];
	assign v12c0l0_out[0] = g12_reg[0];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 1; i = i + 1)
            v12c0l0[i] <= v12c0l0_out[i];
    end

	reg [3:0] v12c0l1 [0:0];
	logic [3:0] v12c0l1_out [0:0];
	assign v12c0l1_out[0] = v12c0l0[0];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 1; i = i + 1)
            v12c0l1[i] <= v12c0l1_out[i];
    end

	reg [4:0] v12c0l2 [0:0];
	logic [4:0] v12c0l2_out [0:0];
	assign v12c0l2_out[0] = v12c0l1[0];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 1; i = i + 1)
            v12c0l2[i] <= v12c0l2_out[i];
    end

	reg [5:0] v12c0l3 [0:0];
	logic [5:0] v12c0l3_out [0:0];
	assign v12c0l3_out[0] = v12c0l2[0];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 1; i = i + 1)
            v12c0l3[i] <= v12c0l3_out[i];
    end

	reg [6:0] v12c0l4 [0:0];
	logic [6:0] v12c0l4_out [0:0];
	assign v12c0l4_out[0] = v12c0l3[0];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 1; i = i + 1)
            v12c0l4[i] <= v12c0l4_out[i];
    end

	reg [7:0] v12c0l5 [0:0];
	logic [7:0] v12c0l5_out [0:0];
	assign v12c0l5_out[0] = v12c0l4[0];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 1; i = i + 1)
            v12c0l5[i] <= v12c0l5_out[i];
    end

	assign val[12] = v12c0l5[0];
	
endmodule


module leaf_counter_1(input logic clk, input logic [0:1154] l, output logic [7:0] val [0:12]);
    integer i;
	// -0.25
	logic [0:85] g0;
	reg [0:85] g0_reg;
	assign g0[0] = l[0] || l[2] || l[4] || l[5] || l[7];
	assign g0[1] = l[15] || l[21] || l[23] || l[27];
	assign g0[2] = l[34] || l[36] || l[37] || l[41];
	assign g0[3] = l[45] || l[46] || l[50] || l[54] || l[57];
	assign g0[4] = l[61] || l[63] || l[65] || l[71];
	assign g0[5] = l[80] || l[82] || l[84] || l[85];
	assign g0[6] = l[92] || l[94] || l[95] || l[101];
	assign g0[7] = l[107] || l[110] || l[111] || l[118];
	assign g0[8] = l[127] || l[128] || l[131];
	assign g0[9] = l[134] || l[136] || l[142];
	assign g0[10] = l[148] || l[152] || l[153];
	assign g0[11] = l[162] || l[164] || l[168];
	assign g0[12] = l[172] || l[173] || l[182];
	assign g0[13] = l[187] || l[188] || l[192];
	assign g0[14] = l[198] || l[199] || l[201] || l[203] || l[205] || l[210];
	assign g0[15] = l[219] || l[220] || l[224];
	assign g0[16] = l[228] || l[230] || l[232] || l[233];
	assign g0[17] = l[243] || l[244];
	assign g0[18] = l[254] || l[257] || l[258];
	assign g0[19] = l[266] || l[270] || l[272];
	assign g0[20] = l[278] || l[279] || l[282] || l[284] || l[285];
	assign g0[21] = l[288] || l[290] || l[296];
	assign g0[22] = l[300] || l[304] || l[307];
	assign g0[23] = l[314] || l[316] || l[317] || l[319] || l[322];
	assign g0[24] = l[327] || l[328] || l[333];
	assign g0[25] = l[337] || l[341] || l[342];
	assign g0[26] = l[352] || l[357] || l[359] || l[360];
	assign g0[27] = l[368] || l[369];
	assign g0[28] = l[376] || l[377] || l[382];
	assign g0[29] = l[389] || l[392];
	assign g0[30] = l[397] || l[398] || l[400] || l[402];
	assign g0[31] = l[405] || l[407] || l[408] || l[412];
	assign g0[32] = l[418] || l[420] || l[421];
	assign g0[33] = l[433];
	assign g0[34] = l[437] || l[442];
	assign g0[35] = l[447] || l[449] || l[450];
	assign g0[36] = l[459] || l[460];
	assign g0[37] = l[463] || l[464] || l[468];
	assign g0[38] = l[476] || l[478] || l[484];
	assign g0[39] = l[488] || l[491] || l[493] || l[496];
	assign g0[40] = l[501] || l[502];
	assign g0[41] = l[507] || l[513];
	assign g0[42] = l[519] || l[523] || l[526] || l[528];
	assign g0[43] = l[534] || l[536] || l[539];
	assign g0[44] = l[546] || l[553];
	assign g0[45] = l[556] || l[557] || l[559] || l[560];
	assign g0[46] = l[572] || l[578];
	assign g0[47] = l[584] || l[590];
	assign g0[48] = l[596] || l[599] || l[602] || l[603];
	assign g0[49] = l[612];
	assign g0[50] = l[621] || l[623];
	assign g0[51] = l[632] || l[636] || l[639];
	assign g0[52] = l[643] || l[645];
	assign g0[53] = l[653];
	assign g0[54] = l[665];
	assign g0[55] = l[673] || l[676];
	assign g0[56] = l[679] || l[683];
	assign g0[57] = l[692] || l[694] || l[697] || l[700];
	assign g0[58] = l[705] || l[707];
	assign g0[59] = l[713] || l[716];
	assign g0[60] = l[730] || l[737] || l[739];
	assign g0[61] = l[747] || l[749] || l[754];
	assign g0[62] = l[766];
	assign g0[63] = l[779];
	assign g0[64] = l[797] || l[800];
	assign g0[65] = l[811];
	assign g0[66] = l[823] || l[825];
	assign g0[67] = l[839] || l[844];
	assign g0[68] = l[853] || l[859];
	assign g0[69] = l[866] || l[872];
	assign g0[70] = l[888] || l[890] || l[891] || l[894];
	assign g0[71] = l[907];
	assign g0[72] = l[932];
	assign g0[73] = l[947];
	assign g0[74] = l[964] || l[965];
	assign g0[75] = l[974];
	assign g0[76] = l[984];
	assign g0[77] = l[989] || l[991] || l[995];
	assign g0[78] = l[1013] || l[1021];
	assign g0[79] = l[1038] || l[1040];
	assign g0[80] = l[1057];
	assign g0[81] = l[1085];
	assign g0[82] = l[1100];
	assign g0[83] = l[1110] || l[1118];
	assign g0[84] = l[1130];
	assign g0[85] = l[1140] || l[1141];
	
    always_ff @(posedge clk) begin
        g0_reg <= g0;
    end
    
	logic [2:0] v0c1l0_out [0:21];
	logic [2:0] v0c1l0 [0:21];
	assign v0c1l0_out[0] = g0_reg[0] + g0_reg[1] + g0_reg[2] + g0_reg[3];
	assign v0c1l0_out[1] = g0_reg[4] + g0_reg[5] + g0_reg[6] + g0_reg[7];
	assign v0c1l0_out[2] = g0_reg[8] + g0_reg[9] + g0_reg[10] + g0_reg[11];
	assign v0c1l0_out[3] = g0_reg[12] + g0_reg[13] + g0_reg[14] + g0_reg[15];
	assign v0c1l0_out[4] = g0_reg[16] + g0_reg[17] + g0_reg[18] + g0_reg[19];
	assign v0c1l0_out[5] = g0_reg[20] + g0_reg[21] + g0_reg[22] + g0_reg[23];
	assign v0c1l0_out[6] = g0_reg[24] + g0_reg[25] + g0_reg[26] + g0_reg[27];
	assign v0c1l0_out[7] = g0_reg[28] + g0_reg[29] + g0_reg[30] + g0_reg[31];
	assign v0c1l0_out[8] = g0_reg[32] + g0_reg[33] + g0_reg[34] + g0_reg[35];
	assign v0c1l0_out[9] = g0_reg[36] + g0_reg[37] + g0_reg[38] + g0_reg[39];
	assign v0c1l0_out[10] = g0_reg[40] + g0_reg[41] + g0_reg[42] + g0_reg[43];
	assign v0c1l0_out[11] = g0_reg[44] + g0_reg[45] + g0_reg[46] + g0_reg[47];
	assign v0c1l0_out[12] = g0_reg[48] + g0_reg[49] + g0_reg[50] + g0_reg[51];
	assign v0c1l0_out[13] = g0_reg[52] + g0_reg[53] + g0_reg[54] + g0_reg[55];
	assign v0c1l0_out[14] = g0_reg[56] + g0_reg[57] + g0_reg[58] + g0_reg[59];
	assign v0c1l0_out[15] = g0_reg[60] + g0_reg[61] + g0_reg[62] + g0_reg[63];
	assign v0c1l0_out[16] = g0_reg[64] + g0_reg[65] + g0_reg[66] + g0_reg[67];
	assign v0c1l0_out[17] = g0_reg[68] + g0_reg[69] + g0_reg[70] + g0_reg[71];
	assign v0c1l0_out[18] = g0_reg[72] + g0_reg[73] + g0_reg[74] + g0_reg[75];
	assign v0c1l0_out[19] = g0_reg[76] + g0_reg[77] + g0_reg[78] + g0_reg[79];
	assign v0c1l0_out[20] = g0_reg[80] + g0_reg[81] + g0_reg[82] + g0_reg[83];
	assign v0c1l0_out[21] = g0_reg[84] + g0_reg[85];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 22; i = i + 1)
            v0c1l0[i] <= v0c1l0_out[i];
    end

	reg [3:0] v0c1l1 [0:10];
	logic [3:0] v0c1l1_out [0:10];
	assign v0c1l1_out[0] = v0c1l0[0] + v0c1l0[1];
	assign v0c1l1_out[1] = v0c1l0[2] + v0c1l0[3];
	assign v0c1l1_out[2] = v0c1l0[4] + v0c1l0[5];
	assign v0c1l1_out[3] = v0c1l0[6] + v0c1l0[7];
	assign v0c1l1_out[4] = v0c1l0[8] + v0c1l0[9];
	assign v0c1l1_out[5] = v0c1l0[10] + v0c1l0[11];
	assign v0c1l1_out[6] = v0c1l0[12] + v0c1l0[13];
	assign v0c1l1_out[7] = v0c1l0[14] + v0c1l0[15];
	assign v0c1l1_out[8] = v0c1l0[16] + v0c1l0[17];
	assign v0c1l1_out[9] = v0c1l0[18] + v0c1l0[19];
	assign v0c1l1_out[10] = v0c1l0[20] + v0c1l0[21];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 11; i = i + 1)
            v0c1l1[i] <= v0c1l1_out[i];
    end

	reg [4:0] v0c1l2 [0:5];
	logic [4:0] v0c1l2_out [0:5];
	assign v0c1l2_out[0] = v0c1l1[0] + v0c1l1[1];
	assign v0c1l2_out[1] = v0c1l1[2] + v0c1l1[3];
	assign v0c1l2_out[2] = v0c1l1[4] + v0c1l1[5];
	assign v0c1l2_out[3] = v0c1l1[6] + v0c1l1[7];
	assign v0c1l2_out[4] = v0c1l1[8] + v0c1l1[9];
	assign v0c1l2_out[5] = v0c1l1[10];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 6; i = i + 1)
            v0c1l2[i] <= v0c1l2_out[i];
    end

	reg [5:0] v0c1l3 [0:2];
	logic [5:0] v0c1l3_out [0:2];
	assign v0c1l3_out[0] = v0c1l2[0] + v0c1l2[1];
	assign v0c1l3_out[1] = v0c1l2[2] + v0c1l2[3];
	assign v0c1l3_out[2] = v0c1l2[4] + v0c1l2[5];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 3; i = i + 1)
            v0c1l3[i] <= v0c1l3_out[i];
    end

	reg [6:0] v0c1l4 [0:1];
	logic [6:0] v0c1l4_out [0:1];
	assign v0c1l4_out[0] = v0c1l3[0] + v0c1l3[1];
	assign v0c1l4_out[1] = v0c1l3[2];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 2; i = i + 1)
            v0c1l4[i] <= v0c1l4_out[i];
    end

	reg [7:0] v0c1l5 [0:0];
	logic [7:0] v0c1l5_out [0:0];
	assign v0c1l5_out[0] = v0c1l4[0] + v0c1l4[1];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 1; i = i + 1)
            v0c1l5[i] <= v0c1l5_out[i];
    end

	assign val[0] = v0c1l5[0];
	
	// -0.125
	logic [0:96] g1;
	reg [0:96] g1_reg;
	assign g1[0] = l[1] || l[6] || l[10] || l[14];
	assign g1[1] = l[16] || l[18] || l[24] || l[25];
	assign g1[2] = l[30] || l[31] || l[33] || l[38] || l[39] || l[42];
	assign g1[3] = l[44] || l[48] || l[49] || l[52] || l[55] || l[58];
	assign g1[4] = l[60] || l[68] || l[69] || l[73];
	assign g1[5] = l[74] || l[77] || l[78] || l[83] || l[88];
	assign g1[6] = l[89] || l[91] || l[96] || l[98] || l[100];
	assign g1[7] = l[104] || l[108] || l[113] || l[115] || l[116] || l[119];
	assign g1[8] = l[120] || l[122] || l[126] || l[130];
	assign g1[9] = l[133] || l[138] || l[140] || l[141] || l[143];
	assign g1[10] = l[145] || l[154] || l[156] || l[157] || l[159];
	assign g1[11] = l[166] || l[167];
	assign g1[12] = l[174] || l[175] || l[177] || l[179];
	assign g1[13] = l[191] || l[193] || l[196];
	assign g1[14] = l[204] || l[208];
	assign g1[15] = l[212] || l[215] || l[217] || l[221] || l[223] || l[226];
	assign g1[16] = l[229] || l[235];
	assign g1[17] = l[246] || l[247] || l[248] || l[250];
	assign g1[18] = l[253] || l[259];
	assign g1[19] = l[267] || l[268] || l[271] || l[273] || l[275];
	assign g1[20] = l[281];
	assign g1[21] = l[292] || l[293];
	assign g1[22] = l[302] || l[305] || l[309] || l[311];
	assign g1[23] = l[325] || l[331] || l[334];
	assign g1[24] = l[339] || l[344];
	assign g1[25] = l[347] || l[348] || l[350] || l[354] || l[356];
	assign g1[26] = l[363] || l[367] || l[371];
	assign g1[27] = l[378] || l[381] || l[383];
	assign g1[28] = l[386] || l[391];
	assign g1[29] = l[395];
	assign g1[30] = l[415];
	assign g1[31] = l[424];
	assign g1[32] = l[428] || l[431];
	assign g1[33] = l[435] || l[439] || l[440];
	assign g1[34] = l[448] || l[451];
	assign g1[35] = l[455];
	assign g1[36] = l[462] || l[467] || l[469] || l[471];
	assign g1[37] = l[481];
	assign g1[38] = l[492] || l[495];
	assign g1[39] = l[503];
	assign g1[40] = l[505] || l[509] || l[515];
	assign g1[41] = l[517] || l[520] || l[524] || l[527] || l[529];
	assign g1[42] = l[537];
	assign g1[43] = l[544];
	assign g1[44] = l[570] || l[573] || l[580];
	assign g1[45] = l[587] || l[593];
	assign g1[46] = l[604];
	assign g1[47] = l[609];
	assign g1[48] = l[617] || l[618];
	assign g1[49] = l[627] || l[629] || l[631] || l[634];
	assign g1[50] = l[647];
	assign g1[51] = l[651] || l[654] || l[656] || l[658];
	assign g1[52] = l[661] || l[662] || l[666];
	assign g1[53] = l[671] || l[674];
	assign g1[54] = l[684];
	assign g1[55] = l[688] || l[690] || l[693] || l[695];
	assign g1[56] = l[703] || l[710];
	assign g1[57] = l[718];
	assign g1[58] = l[723] || l[724] || l[726] || l[727];
	assign g1[59] = l[732] || l[740];
	assign g1[60] = l[744] || l[746] || l[748] || l[750];
	assign g1[61] = l[758] || l[762] || l[763];
	assign g1[62] = l[765] || l[769] || l[772];
	assign g1[63] = l[777];
	assign g1[64] = l[785] || l[787];
	assign g1[65] = l[793] || l[794] || l[799] || l[803];
	assign g1[66] = l[817];
	assign g1[67] = l[820] || l[822];
	assign g1[68] = l[830] || l[834] || l[836];
	assign g1[69] = l[838] || l[841];
	assign g1[70] = l[851] || l[856];
	assign g1[71] = l[863] || l[865] || l[868] || l[870] || l[873] || l[874];
	assign g1[72] = l[882];
	assign g1[73] = l[904] || l[905];
	assign g1[74] = l[909] || l[910] || l[913] || l[916];
	assign g1[75] = l[924] || l[925];
	assign g1[76] = l[928] || l[929] || l[931] || l[934] || l[936] || l[937] || l[940];
	assign g1[77] = l[950];
	assign g1[78] = l[956] || l[957] || l[959];
	assign g1[79] = l[969];
	assign g1[80] = l[972];
	assign g1[81] = l[980] || l[983];
	assign g1[82] = l[993] || l[996];
	assign g1[83] = l[1001] || l[1004] || l[1007];
	assign g1[84] = l[1009] || l[1011] || l[1014] || l[1016];
	assign g1[85] = l[1025] || l[1032] || l[1034];
	assign g1[86] = l[1044];
	assign g1[87] = l[1046] || l[1049];
	assign g1[88] = l[1055] || l[1060] || l[1062];
	assign g1[89] = l[1066] || l[1070];
	assign g1[90] = l[1073] || l[1077];
	assign g1[91] = l[1086] || l[1089] || l[1091];
	assign g1[92] = l[1094] || l[1102] || l[1104];
	assign g1[93] = l[1106] || l[1114];
	assign g1[94] = l[1122] || l[1125] || l[1132];
	assign g1[95] = l[1137] || l[1143];
	assign g1[96] = l[1151];
	
    always_ff @(posedge clk) begin
        g1_reg <= g1;
    end
    
	logic [2:0] v1c1l0_out [0:24];
	logic [2:0] v1c1l0 [0:24];
	assign v1c1l0_out[0] = g1_reg[0] + g1_reg[1] + g1_reg[2] + g1_reg[3];
	assign v1c1l0_out[1] = g1_reg[4] + g1_reg[5] + g1_reg[6] + g1_reg[7];
	assign v1c1l0_out[2] = g1_reg[8] + g1_reg[9] + g1_reg[10] + g1_reg[11];
	assign v1c1l0_out[3] = g1_reg[12] + g1_reg[13] + g1_reg[14] + g1_reg[15];
	assign v1c1l0_out[4] = g1_reg[16] + g1_reg[17] + g1_reg[18] + g1_reg[19];
	assign v1c1l0_out[5] = g1_reg[20] + g1_reg[21] + g1_reg[22] + g1_reg[23];
	assign v1c1l0_out[6] = g1_reg[24] + g1_reg[25] + g1_reg[26] + g1_reg[27];
	assign v1c1l0_out[7] = g1_reg[28] + g1_reg[29] + g1_reg[30] + g1_reg[31];
	assign v1c1l0_out[8] = g1_reg[32] + g1_reg[33] + g1_reg[34] + g1_reg[35];
	assign v1c1l0_out[9] = g1_reg[36] + g1_reg[37] + g1_reg[38] + g1_reg[39];
	assign v1c1l0_out[10] = g1_reg[40] + g1_reg[41] + g1_reg[42] + g1_reg[43];
	assign v1c1l0_out[11] = g1_reg[44] + g1_reg[45] + g1_reg[46] + g1_reg[47];
	assign v1c1l0_out[12] = g1_reg[48] + g1_reg[49] + g1_reg[50] + g1_reg[51];
	assign v1c1l0_out[13] = g1_reg[52] + g1_reg[53] + g1_reg[54] + g1_reg[55];
	assign v1c1l0_out[14] = g1_reg[56] + g1_reg[57] + g1_reg[58] + g1_reg[59];
	assign v1c1l0_out[15] = g1_reg[60] + g1_reg[61] + g1_reg[62] + g1_reg[63];
	assign v1c1l0_out[16] = g1_reg[64] + g1_reg[65] + g1_reg[66] + g1_reg[67];
	assign v1c1l0_out[17] = g1_reg[68] + g1_reg[69] + g1_reg[70] + g1_reg[71];
	assign v1c1l0_out[18] = g1_reg[72] + g1_reg[73] + g1_reg[74] + g1_reg[75];
	assign v1c1l0_out[19] = g1_reg[76] + g1_reg[77] + g1_reg[78] + g1_reg[79];
	assign v1c1l0_out[20] = g1_reg[80] + g1_reg[81] + g1_reg[82] + g1_reg[83];
	assign v1c1l0_out[21] = g1_reg[84] + g1_reg[85] + g1_reg[86] + g1_reg[87];
	assign v1c1l0_out[22] = g1_reg[88] + g1_reg[89] + g1_reg[90] + g1_reg[91];
	assign v1c1l0_out[23] = g1_reg[92] + g1_reg[93] + g1_reg[94] + g1_reg[95];
	assign v1c1l0_out[24] = g1_reg[96];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 25; i = i + 1)
            v1c1l0[i] <= v1c1l0_out[i];
    end

	reg [3:0] v1c1l1 [0:12];
	logic [3:0] v1c1l1_out [0:12];
	assign v1c1l1_out[0] = v1c1l0[0] + v1c1l0[1];
	assign v1c1l1_out[1] = v1c1l0[2] + v1c1l0[3];
	assign v1c1l1_out[2] = v1c1l0[4] + v1c1l0[5];
	assign v1c1l1_out[3] = v1c1l0[6] + v1c1l0[7];
	assign v1c1l1_out[4] = v1c1l0[8] + v1c1l0[9];
	assign v1c1l1_out[5] = v1c1l0[10] + v1c1l0[11];
	assign v1c1l1_out[6] = v1c1l0[12] + v1c1l0[13];
	assign v1c1l1_out[7] = v1c1l0[14] + v1c1l0[15];
	assign v1c1l1_out[8] = v1c1l0[16] + v1c1l0[17];
	assign v1c1l1_out[9] = v1c1l0[18] + v1c1l0[19];
	assign v1c1l1_out[10] = v1c1l0[20] + v1c1l0[21];
	assign v1c1l1_out[11] = v1c1l0[22] + v1c1l0[23];
	assign v1c1l1_out[12] = v1c1l0[24];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 13; i = i + 1)
            v1c1l1[i] <= v1c1l1_out[i];
    end

	reg [4:0] v1c1l2 [0:6];
	logic [4:0] v1c1l2_out [0:6];
	assign v1c1l2_out[0] = v1c1l1[0] + v1c1l1[1];
	assign v1c1l2_out[1] = v1c1l1[2] + v1c1l1[3];
	assign v1c1l2_out[2] = v1c1l1[4] + v1c1l1[5];
	assign v1c1l2_out[3] = v1c1l1[6] + v1c1l1[7];
	assign v1c1l2_out[4] = v1c1l1[8] + v1c1l1[9];
	assign v1c1l2_out[5] = v1c1l1[10] + v1c1l1[11];
	assign v1c1l2_out[6] = v1c1l1[12];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 7; i = i + 1)
            v1c1l2[i] <= v1c1l2_out[i];
    end

	reg [5:0] v1c1l3 [0:3];
	logic [5:0] v1c1l3_out [0:3];
	assign v1c1l3_out[0] = v1c1l2[0] + v1c1l2[1];
	assign v1c1l3_out[1] = v1c1l2[2] + v1c1l2[3];
	assign v1c1l3_out[2] = v1c1l2[4] + v1c1l2[5];
	assign v1c1l3_out[3] = v1c1l2[6];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 4; i = i + 1)
            v1c1l3[i] <= v1c1l3_out[i];
    end

	reg [6:0] v1c1l4 [0:1];
	logic [6:0] v1c1l4_out [0:1];
	assign v1c1l4_out[0] = v1c1l3[0] + v1c1l3[1];
	assign v1c1l4_out[1] = v1c1l3[2] + v1c1l3[3];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 2; i = i + 1)
            v1c1l4[i] <= v1c1l4_out[i];
    end

	reg [7:0] v1c1l5 [0:0];
	logic [7:0] v1c1l5_out [0:0];
	assign v1c1l5_out[0] = v1c1l4[0] + v1c1l4[1];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 1; i = i + 1)
            v1c1l5[i] <= v1c1l5_out[i];
    end

	assign val[1] = v1c1l5[0];
	
	// -0.0625
	logic [0:69] g2;
	reg [0:69] g2_reg;
	assign g2[0] = l[8];
	assign g2[1] = l[20] || l[28] || l[29];
	assign g2[2] = l[35] || l[43];
	assign g2[3] = l[53];
	assign g2[4] = l[64] || l[66];
	assign g2[5] = l[75] || l[81] || l[86];
	assign g2[6] = l[102];
	assign g2[7] = l[112];
	assign g2[8] = l[121];
	assign g2[9] = l[161];
	assign g2[10] = l[183];
	assign g2[11] = l[184] || l[189];
	assign g2[12] = l[206] || l[211];
	assign g2[13] = l[231] || l[238];
	assign g2[14] = l[274];
	assign g2[15] = l[287] || l[298];
	assign g2[16] = l[303] || l[308];
	assign g2[17] = l[330] || l[332];
	assign g2[18] = l[345];
	assign g2[19] = l[353];
	assign g2[20] = l[364] || l[370];
	assign g2[21] = l[374] || l[375];
	assign g2[22] = l[387] || l[393];
	assign g2[23] = l[401] || l[403];
	assign g2[24] = l[411];
	assign g2[25] = l[422];
	assign g2[26] = l[436];
	assign g2[27] = l[473];
	assign g2[28] = l[489];
	assign g2[29] = l[499];
	assign g2[30] = l[512];
	assign g2[31] = l[543] || l[548];
	assign g2[32] = l[561] || l[563] || l[566];
	assign g2[33] = l[569] || l[577];
	assign g2[34] = l[585] || l[589] || l[591];
	assign g2[35] = l[598] || l[607];
	assign g2[36] = l[611] || l[613];
	assign g2[37] = l[625];
	assign g2[38] = l[642] || l[644] || l[646];
	assign g2[39] = l[664];
	assign g2[40] = l[672];
	assign g2[41] = l[678] || l[681];
	assign g2[42] = l[687];
	assign g2[43] = l[712] || l[715] || l[720];
	assign g2[44] = l[729] || l[735];
	assign g2[45] = l[742] || l[751];
	assign g2[46] = l[759];
	assign g2[47] = l[782];
	assign g2[48] = l[784];
	assign g2[49] = l[796];
	assign g2[50] = l[807] || l[810] || l[816];
	assign g2[51] = l[826];
	assign g2[52] = l[845];
	assign g2[53] = l[850];
	assign g2[54] = l[880];
	assign g2[55] = l[892] || l[893];
	assign g2[56] = l[901];
	assign g2[57] = l[914];
	assign g2[58] = l[918] || l[920];
	assign g2[59] = l[941];
	assign g2[60] = l[951] || l[953];
	assign g2[61] = l[1018];
	assign g2[62] = l[1024] || l[1028] || l[1029];
	assign g2[63] = l[1039];
	assign g2[64] = l[1051];
	assign g2[65] = l[1058];
	assign g2[66] = l[1072];
	assign g2[67] = l[1081] || l[1082] || l[1084] || l[1093];
	assign g2[68] = l[1107] || l[1112] || l[1119];
	assign g2[69] = l[1139];
	
    always_ff @(posedge clk) begin
        g2_reg <= g2;
    end
    
	logic [2:0] v2c1l0_out [0:17];
	logic [2:0] v2c1l0 [0:17];
	assign v2c1l0_out[0] = g2_reg[0] + g2_reg[1] + g2_reg[2] + g2_reg[3];
	assign v2c1l0_out[1] = g2_reg[4] + g2_reg[5] + g2_reg[6] + g2_reg[7];
	assign v2c1l0_out[2] = g2_reg[8] + g2_reg[9] + g2_reg[10] + g2_reg[11];
	assign v2c1l0_out[3] = g2_reg[12] + g2_reg[13] + g2_reg[14] + g2_reg[15];
	assign v2c1l0_out[4] = g2_reg[16] + g2_reg[17] + g2_reg[18] + g2_reg[19];
	assign v2c1l0_out[5] = g2_reg[20] + g2_reg[21] + g2_reg[22] + g2_reg[23];
	assign v2c1l0_out[6] = g2_reg[24] + g2_reg[25] + g2_reg[26] + g2_reg[27];
	assign v2c1l0_out[7] = g2_reg[28] + g2_reg[29] + g2_reg[30] + g2_reg[31];
	assign v2c1l0_out[8] = g2_reg[32] + g2_reg[33] + g2_reg[34] + g2_reg[35];
	assign v2c1l0_out[9] = g2_reg[36] + g2_reg[37] + g2_reg[38] + g2_reg[39];
	assign v2c1l0_out[10] = g2_reg[40] + g2_reg[41] + g2_reg[42] + g2_reg[43];
	assign v2c1l0_out[11] = g2_reg[44] + g2_reg[45] + g2_reg[46] + g2_reg[47];
	assign v2c1l0_out[12] = g2_reg[48] + g2_reg[49] + g2_reg[50] + g2_reg[51];
	assign v2c1l0_out[13] = g2_reg[52] + g2_reg[53] + g2_reg[54] + g2_reg[55];
	assign v2c1l0_out[14] = g2_reg[56] + g2_reg[57] + g2_reg[58] + g2_reg[59];
	assign v2c1l0_out[15] = g2_reg[60] + g2_reg[61] + g2_reg[62] + g2_reg[63];
	assign v2c1l0_out[16] = g2_reg[64] + g2_reg[65] + g2_reg[66] + g2_reg[67];
	assign v2c1l0_out[17] = g2_reg[68] + g2_reg[69];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 18; i = i + 1)
            v2c1l0[i] <= v2c1l0_out[i];
    end

	reg [3:0] v2c1l1 [0:8];
	logic [3:0] v2c1l1_out [0:8];
	assign v2c1l1_out[0] = v2c1l0[0] + v2c1l0[1];
	assign v2c1l1_out[1] = v2c1l0[2] + v2c1l0[3];
	assign v2c1l1_out[2] = v2c1l0[4] + v2c1l0[5];
	assign v2c1l1_out[3] = v2c1l0[6] + v2c1l0[7];
	assign v2c1l1_out[4] = v2c1l0[8] + v2c1l0[9];
	assign v2c1l1_out[5] = v2c1l0[10] + v2c1l0[11];
	assign v2c1l1_out[6] = v2c1l0[12] + v2c1l0[13];
	assign v2c1l1_out[7] = v2c1l0[14] + v2c1l0[15];
	assign v2c1l1_out[8] = v2c1l0[16] + v2c1l0[17];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 9; i = i + 1)
            v2c1l1[i] <= v2c1l1_out[i];
    end

	reg [4:0] v2c1l2 [0:4];
	logic [4:0] v2c1l2_out [0:4];
	assign v2c1l2_out[0] = v2c1l1[0] + v2c1l1[1];
	assign v2c1l2_out[1] = v2c1l1[2] + v2c1l1[3];
	assign v2c1l2_out[2] = v2c1l1[4] + v2c1l1[5];
	assign v2c1l2_out[3] = v2c1l1[6] + v2c1l1[7];
	assign v2c1l2_out[4] = v2c1l1[8];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 5; i = i + 1)
            v2c1l2[i] <= v2c1l2_out[i];
    end

	reg [5:0] v2c1l3 [0:2];
	logic [5:0] v2c1l3_out [0:2];
	assign v2c1l3_out[0] = v2c1l2[0] + v2c1l2[1];
	assign v2c1l3_out[1] = v2c1l2[2] + v2c1l2[3];
	assign v2c1l3_out[2] = v2c1l2[4];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 3; i = i + 1)
            v2c1l3[i] <= v2c1l3_out[i];
    end

	reg [6:0] v2c1l4 [0:1];
	logic [6:0] v2c1l4_out [0:1];
	assign v2c1l4_out[0] = v2c1l3[0] + v2c1l3[1];
	assign v2c1l4_out[1] = v2c1l3[2];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 2; i = i + 1)
            v2c1l4[i] <= v2c1l4_out[i];
    end

	reg [7:0] v2c1l5 [0:0];
	logic [7:0] v2c1l5_out [0:0];
	assign v2c1l5_out[0] = v2c1l4[0] + v2c1l4[1];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 1; i = i + 1)
            v2c1l5[i] <= v2c1l5_out[i];
    end

	assign val[2] = v2c1l5[0];
	
	// -0.03125
	logic [0:47] g3;
	reg [0:47] g3_reg;
	assign g3[0] = l[109];
	assign g3[1] = l[129];
	assign g3[2] = l[186];
	assign g3[3] = l[207];
	assign g3[4] = l[213];
	assign g3[5] = l[236];
	assign g3[6] = l[313] || l[318] || l[321];
	assign g3[7] = l[329];
	assign g3[8] = l[336];
	assign g3[9] = l[361];
	assign g3[10] = l[458];
	assign g3[11] = l[465];
	assign g3[12] = l[475];
	assign g3[13] = l[506] || l[510];
	assign g3[14] = l[531] || l[535];
	assign g3[15] = l[558];
	assign g3[16] = l[581];
	assign g3[17] = l[624];
	assign g3[18] = l[704];
	assign g3[19] = l[731];
	assign g3[20] = l[756];
	assign g3[21] = l[774] || l[778];
	assign g3[22] = l[788];
	assign g3[23] = l[808] || l[814];
	assign g3[24] = l[842] || l[848];
	assign g3[25] = l[854] || l[855];
	assign g3[26] = l[877];
	assign g3[27] = l[879] || l[883];
	assign g3[28] = l[887];
	assign g3[29] = l[900];
	assign g3[30] = l[912];
	assign g3[31] = l[935];
	assign g3[32] = l[944] || l[945];
	assign g3[33] = l[960];
	assign g3[34] = l[962] || l[963] || l[966];
	assign g3[35] = l[975];
	assign g3[36] = l[985];
	assign g3[37] = l[988] || l[990];
	assign g3[38] = l[1010] || l[1022];
	assign g3[39] = l[1037] || l[1042] || l[1043];
	assign g3[40] = l[1048];
	assign g3[41] = l[1052] || l[1056] || l[1064];
	assign g3[42] = l[1080];
	assign g3[43] = l[1099];
	assign g3[44] = l[1113];
	assign g3[45] = l[1121] || l[1127] || l[1129];
	assign g3[46] = l[1142];
	assign g3[47] = l[1148] || l[1152];
	
    always_ff @(posedge clk) begin
        g3_reg <= g3;
    end
    
	logic [2:0] v3c1l0_out [0:11];
	logic [2:0] v3c1l0 [0:11];
	assign v3c1l0_out[0] = g3_reg[0] + g3_reg[1] + g3_reg[2] + g3_reg[3];
	assign v3c1l0_out[1] = g3_reg[4] + g3_reg[5] + g3_reg[6] + g3_reg[7];
	assign v3c1l0_out[2] = g3_reg[8] + g3_reg[9] + g3_reg[10] + g3_reg[11];
	assign v3c1l0_out[3] = g3_reg[12] + g3_reg[13] + g3_reg[14] + g3_reg[15];
	assign v3c1l0_out[4] = g3_reg[16] + g3_reg[17] + g3_reg[18] + g3_reg[19];
	assign v3c1l0_out[5] = g3_reg[20] + g3_reg[21] + g3_reg[22] + g3_reg[23];
	assign v3c1l0_out[6] = g3_reg[24] + g3_reg[25] + g3_reg[26] + g3_reg[27];
	assign v3c1l0_out[7] = g3_reg[28] + g3_reg[29] + g3_reg[30] + g3_reg[31];
	assign v3c1l0_out[8] = g3_reg[32] + g3_reg[33] + g3_reg[34] + g3_reg[35];
	assign v3c1l0_out[9] = g3_reg[36] + g3_reg[37] + g3_reg[38] + g3_reg[39];
	assign v3c1l0_out[10] = g3_reg[40] + g3_reg[41] + g3_reg[42] + g3_reg[43];
	assign v3c1l0_out[11] = g3_reg[44] + g3_reg[45] + g3_reg[46] + g3_reg[47];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 12; i = i + 1)
            v3c1l0[i] <= v3c1l0_out[i];
    end

	reg [3:0] v3c1l1 [0:5];
	logic [3:0] v3c1l1_out [0:5];
	assign v3c1l1_out[0] = v3c1l0[0] + v3c1l0[1];
	assign v3c1l1_out[1] = v3c1l0[2] + v3c1l0[3];
	assign v3c1l1_out[2] = v3c1l0[4] + v3c1l0[5];
	assign v3c1l1_out[3] = v3c1l0[6] + v3c1l0[7];
	assign v3c1l1_out[4] = v3c1l0[8] + v3c1l0[9];
	assign v3c1l1_out[5] = v3c1l0[10] + v3c1l0[11];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 6; i = i + 1)
            v3c1l1[i] <= v3c1l1_out[i];
    end

	reg [4:0] v3c1l2 [0:2];
	logic [4:0] v3c1l2_out [0:2];
	assign v3c1l2_out[0] = v3c1l1[0] + v3c1l1[1];
	assign v3c1l2_out[1] = v3c1l1[2] + v3c1l1[3];
	assign v3c1l2_out[2] = v3c1l1[4] + v3c1l1[5];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 3; i = i + 1)
            v3c1l2[i] <= v3c1l2_out[i];
    end

	reg [5:0] v3c1l3 [0:1];
	logic [5:0] v3c1l3_out [0:1];
	assign v3c1l3_out[0] = v3c1l2[0] + v3c1l2[1];
	assign v3c1l3_out[1] = v3c1l2[2];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 2; i = i + 1)
            v3c1l3[i] <= v3c1l3_out[i];
    end

	reg [6:0] v3c1l4 [0:0];
	logic [6:0] v3c1l4_out [0:0];
	assign v3c1l4_out[0] = v3c1l3[0] + v3c1l3[1];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 1; i = i + 1)
            v3c1l4[i] <= v3c1l4_out[i];
    end

	reg [7:0] v3c1l5 [0:0];
	logic [7:0] v3c1l5_out [0:0];
	assign v3c1l5_out[0] = v3c1l4[0];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 1; i = i + 1)
            v3c1l5[i] <= v3c1l5_out[i];
    end

	assign val[3] = v3c1l5[0];
	
	// -0.015625
	logic [0:24] g4;
	reg [0:24] g4_reg;
	assign g4[0] = l[22];
	assign g4[1] = l[67];
	assign g4[2] = l[149];
	assign g4[3] = l[200];
	assign g4[4] = l[245];
	assign g4[5] = l[264];
	assign g4[6] = l[324];
	assign g4[7] = l[340];
	assign g4[8] = l[417];
	assign g4[9] = l[427];
	assign g4[10] = l[444];
	assign g4[11] = l[470];
	assign g4[12] = l[533];
	assign g4[13] = l[635];
	assign g4[14] = l[659];
	assign g4[15] = l[706];
	assign g4[16] = l[767] || l[773];
	assign g4[17] = l[818];
	assign g4[18] = l[829];
	assign g4[19] = l[933];
	assign g4[20] = l[948];
	assign g4[21] = l[978];
	assign g4[22] = l[1036];
	assign g4[23] = l[1074];
	assign g4[24] = l[1115];
	
    always_ff @(posedge clk) begin
        g4_reg <= g4;
    end
    
	logic [2:0] v4c1l0_out [0:6];
	logic [2:0] v4c1l0 [0:6];
	assign v4c1l0_out[0] = g4_reg[0] + g4_reg[1] + g4_reg[2] + g4_reg[3];
	assign v4c1l0_out[1] = g4_reg[4] + g4_reg[5] + g4_reg[6] + g4_reg[7];
	assign v4c1l0_out[2] = g4_reg[8] + g4_reg[9] + g4_reg[10] + g4_reg[11];
	assign v4c1l0_out[3] = g4_reg[12] + g4_reg[13] + g4_reg[14] + g4_reg[15];
	assign v4c1l0_out[4] = g4_reg[16] + g4_reg[17] + g4_reg[18] + g4_reg[19];
	assign v4c1l0_out[5] = g4_reg[20] + g4_reg[21] + g4_reg[22] + g4_reg[23];
	assign v4c1l0_out[6] = g4_reg[24];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 7; i = i + 1)
            v4c1l0[i] <= v4c1l0_out[i];
    end

	reg [3:0] v4c1l1 [0:3];
	logic [3:0] v4c1l1_out [0:3];
	assign v4c1l1_out[0] = v4c1l0[0] + v4c1l0[1];
	assign v4c1l1_out[1] = v4c1l0[2] + v4c1l0[3];
	assign v4c1l1_out[2] = v4c1l0[4] + v4c1l0[5];
	assign v4c1l1_out[3] = v4c1l0[6];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 4; i = i + 1)
            v4c1l1[i] <= v4c1l1_out[i];
    end

	reg [4:0] v4c1l2 [0:1];
	logic [4:0] v4c1l2_out [0:1];
	assign v4c1l2_out[0] = v4c1l1[0] + v4c1l1[1];
	assign v4c1l2_out[1] = v4c1l1[2] + v4c1l1[3];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 2; i = i + 1)
            v4c1l2[i] <= v4c1l2_out[i];
    end

	reg [5:0] v4c1l3 [0:0];
	logic [5:0] v4c1l3_out [0:0];
	assign v4c1l3_out[0] = v4c1l2[0] + v4c1l2[1];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 1; i = i + 1)
            v4c1l3[i] <= v4c1l3_out[i];
    end

	reg [6:0] v4c1l4 [0:0];
	logic [6:0] v4c1l4_out [0:0];
	assign v4c1l4_out[0] = v4c1l3[0];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 1; i = i + 1)
            v4c1l4[i] <= v4c1l4_out[i];
    end

	reg [7:0] v4c1l5 [0:0];
	logic [7:0] v4c1l5_out [0:0];
	assign v4c1l5_out[0] = v4c1l4[0];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 1; i = i + 1)
            v4c1l5[i] <= v4c1l5_out[i];
    end

	assign val[4] = v4c1l5[0];
	
	// 0.015625
	logic [0:24] g5;
	reg [0:24] g5_reg;
	assign g5[0] = l[79];
	assign g5[1] = l[137];
	assign g5[2] = l[222];
	assign g5[3] = l[242];
	assign g5[4] = l[294];
	assign g5[5] = l[301];
	assign g5[6] = l[438];
	assign g5[7] = l[454];
	assign g5[8] = l[461];
	assign g5[9] = l[474];
	assign g5[10] = l[582];
	assign g5[11] = l[594];
	assign g5[12] = l[622];
	assign g5[13] = l[691];
	assign g5[14] = l[728];
	assign g5[15] = l[753];
	assign g5[16] = l[757];
	assign g5[17] = l[864] || l[871];
	assign g5[18] = l[895];
	assign g5[19] = l[952];
	assign g5[20] = l[992] || l[994];
	assign g5[21] = l[1071];
	assign g5[22] = l[1103];
	assign g5[23] = l[1117];
	assign g5[24] = l[1144];
	
    always_ff @(posedge clk) begin
        g5_reg <= g5;
    end
    
	logic [2:0] v5c1l0_out [0:6];
	logic [2:0] v5c1l0 [0:6];
	assign v5c1l0_out[0] = g5_reg[0] + g5_reg[1] + g5_reg[2] + g5_reg[3];
	assign v5c1l0_out[1] = g5_reg[4] + g5_reg[5] + g5_reg[6] + g5_reg[7];
	assign v5c1l0_out[2] = g5_reg[8] + g5_reg[9] + g5_reg[10] + g5_reg[11];
	assign v5c1l0_out[3] = g5_reg[12] + g5_reg[13] + g5_reg[14] + g5_reg[15];
	assign v5c1l0_out[4] = g5_reg[16] + g5_reg[17] + g5_reg[18] + g5_reg[19];
	assign v5c1l0_out[5] = g5_reg[20] + g5_reg[21] + g5_reg[22] + g5_reg[23];
	assign v5c1l0_out[6] = g5_reg[24];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 7; i = i + 1)
            v5c1l0[i] <= v5c1l0_out[i];
    end

	reg [3:0] v5c1l1 [0:3];
	logic [3:0] v5c1l1_out [0:3];
	assign v5c1l1_out[0] = v5c1l0[0] + v5c1l0[1];
	assign v5c1l1_out[1] = v5c1l0[2] + v5c1l0[3];
	assign v5c1l1_out[2] = v5c1l0[4] + v5c1l0[5];
	assign v5c1l1_out[3] = v5c1l0[6];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 4; i = i + 1)
            v5c1l1[i] <= v5c1l1_out[i];
    end

	reg [4:0] v5c1l2 [0:1];
	logic [4:0] v5c1l2_out [0:1];
	assign v5c1l2_out[0] = v5c1l1[0] + v5c1l1[1];
	assign v5c1l2_out[1] = v5c1l1[2] + v5c1l1[3];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 2; i = i + 1)
            v5c1l2[i] <= v5c1l2_out[i];
    end

	reg [5:0] v5c1l3 [0:0];
	logic [5:0] v5c1l3_out [0:0];
	assign v5c1l3_out[0] = v5c1l2[0] + v5c1l2[1];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 1; i = i + 1)
            v5c1l3[i] <= v5c1l3_out[i];
    end

	reg [6:0] v5c1l4 [0:0];
	logic [6:0] v5c1l4_out [0:0];
	assign v5c1l4_out[0] = v5c1l3[0];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 1; i = i + 1)
            v5c1l4[i] <= v5c1l4_out[i];
    end

	reg [7:0] v5c1l5 [0:0];
	logic [7:0] v5c1l5_out [0:0];
	assign v5c1l5_out[0] = v5c1l4[0];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 1; i = i + 1)
            v5c1l5[i] <= v5c1l5_out[i];
    end

	assign val[5] = v5c1l5[0];
	
	// 0.03125
	logic [0:43] g6;
	reg [0:43] g6_reg;
	assign g6[0] = l[62] || l[70] || l[72];
	assign g6[1] = l[117];
	assign g6[2] = l[146];
	assign g6[3] = l[180];
	assign g6[4] = l[225];
	assign g6[5] = l[277];
	assign g6[6] = l[286];
	assign g6[7] = l[315];
	assign g6[8] = l[373];
	assign g6[9] = l[423];
	assign g6[10] = l[429] || l[432];
	assign g6[11] = l[445] || l[452] || l[453];
	assign g6[12] = l[479];
	assign g6[13] = l[498];
	assign g6[14] = l[522];
	assign g6[15] = l[547] || l[554];
	assign g6[16] = l[568];
	assign g6[17] = l[605];
	assign g6[18] = l[641];
	assign g6[19] = l[667];
	assign g6[20] = l[677];
	assign g6[21] = l[711];
	assign g6[22] = l[722];
	assign g6[23] = l[760];
	assign g6[24] = l[764] || l[768];
	assign g6[25] = l[775];
	assign g6[26] = l[791];
	assign g6[27] = l[812];
	assign g6[28] = l[824];
	assign g6[29] = l[828] || l[835];
	assign g6[30] = l[840];
	assign g6[31] = l[849];
	assign g6[32] = l[889];
	assign g6[33] = l[967];
	assign g6[34] = l[976];
	assign g6[35] = l[979];
	assign g6[36] = l[1003];
	assign g6[37] = l[1012];
	assign g6[38] = l[1023];
	assign g6[39] = l[1054];
	assign g6[40] = l[1088];
	assign g6[41] = l[1095];
	assign g6[42] = l[1128] || l[1133];
	assign g6[43] = l[1147] || l[1149];
	
    always_ff @(posedge clk) begin
        g6_reg <= g6;
    end
    
	logic [2:0] v6c1l0_out [0:10];
	logic [2:0] v6c1l0 [0:10];
	assign v6c1l0_out[0] = g6_reg[0] + g6_reg[1] + g6_reg[2] + g6_reg[3];
	assign v6c1l0_out[1] = g6_reg[4] + g6_reg[5] + g6_reg[6] + g6_reg[7];
	assign v6c1l0_out[2] = g6_reg[8] + g6_reg[9] + g6_reg[10] + g6_reg[11];
	assign v6c1l0_out[3] = g6_reg[12] + g6_reg[13] + g6_reg[14] + g6_reg[15];
	assign v6c1l0_out[4] = g6_reg[16] + g6_reg[17] + g6_reg[18] + g6_reg[19];
	assign v6c1l0_out[5] = g6_reg[20] + g6_reg[21] + g6_reg[22] + g6_reg[23];
	assign v6c1l0_out[6] = g6_reg[24] + g6_reg[25] + g6_reg[26] + g6_reg[27];
	assign v6c1l0_out[7] = g6_reg[28] + g6_reg[29] + g6_reg[30] + g6_reg[31];
	assign v6c1l0_out[8] = g6_reg[32] + g6_reg[33] + g6_reg[34] + g6_reg[35];
	assign v6c1l0_out[9] = g6_reg[36] + g6_reg[37] + g6_reg[38] + g6_reg[39];
	assign v6c1l0_out[10] = g6_reg[40] + g6_reg[41] + g6_reg[42] + g6_reg[43];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 11; i = i + 1)
            v6c1l0[i] <= v6c1l0_out[i];
    end

	reg [3:0] v6c1l1 [0:5];
	logic [3:0] v6c1l1_out [0:5];
	assign v6c1l1_out[0] = v6c1l0[0] + v6c1l0[1];
	assign v6c1l1_out[1] = v6c1l0[2] + v6c1l0[3];
	assign v6c1l1_out[2] = v6c1l0[4] + v6c1l0[5];
	assign v6c1l1_out[3] = v6c1l0[6] + v6c1l0[7];
	assign v6c1l1_out[4] = v6c1l0[8] + v6c1l0[9];
	assign v6c1l1_out[5] = v6c1l0[10];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 6; i = i + 1)
            v6c1l1[i] <= v6c1l1_out[i];
    end

	reg [4:0] v6c1l2 [0:2];
	logic [4:0] v6c1l2_out [0:2];
	assign v6c1l2_out[0] = v6c1l1[0] + v6c1l1[1];
	assign v6c1l2_out[1] = v6c1l1[2] + v6c1l1[3];
	assign v6c1l2_out[2] = v6c1l1[4] + v6c1l1[5];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 3; i = i + 1)
            v6c1l2[i] <= v6c1l2_out[i];
    end

	reg [5:0] v6c1l3 [0:1];
	logic [5:0] v6c1l3_out [0:1];
	assign v6c1l3_out[0] = v6c1l2[0] + v6c1l2[1];
	assign v6c1l3_out[1] = v6c1l2[2];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 2; i = i + 1)
            v6c1l3[i] <= v6c1l3_out[i];
    end

	reg [6:0] v6c1l4 [0:0];
	logic [6:0] v6c1l4_out [0:0];
	assign v6c1l4_out[0] = v6c1l3[0] + v6c1l3[1];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 1; i = i + 1)
            v6c1l4[i] <= v6c1l4_out[i];
    end

	reg [7:0] v6c1l5 [0:0];
	logic [7:0] v6c1l5_out [0:0];
	assign v6c1l5_out[0] = v6c1l4[0];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 1; i = i + 1)
            v6c1l5[i] <= v6c1l5_out[i];
    end

	assign val[6] = v6c1l5[0];
	
	// 0.0625
	logic [0:64] g7;
	reg [0:64] g7_reg;
	assign g7[0] = l[40];
	assign g7[1] = l[90];
	assign g7[2] = l[147] || l[151];
	assign g7[3] = l[163];
	assign g7[4] = l[185] || l[195];
	assign g7[5] = l[197] || l[202];
	assign g7[6] = l[218];
	assign g7[7] = l[234];
	assign g7[8] = l[252] || l[255] || l[256];
	assign g7[9] = l[283];
	assign g7[10] = l[295];
	assign g7[11] = l[312];
	assign g7[12] = l[323];
	assign g7[13] = l[335];
	assign g7[14] = l[355];
	assign g7[15] = l[362];
	assign g7[16] = l[379] || l[384];
	assign g7[17] = l[385];
	assign g7[18] = l[394] || l[396] || l[399];
	assign g7[19] = l[404] || l[410] || l[414];
	assign g7[20] = l[416];
	assign g7[21] = l[426];
	assign g7[22] = l[434] || l[441];
	assign g7[23] = l[446];
	assign g7[24] = l[482];
	assign g7[25] = l[494];
	assign g7[26] = l[500];
	assign g7[27] = l[504];
	assign g7[28] = l[516] || l[521] || l[530];
	assign g7[29] = l[532] || l[540];
	assign g7[30] = l[574];
	assign g7[31] = l[586];
	assign g7[32] = l[620];
	assign g7[33] = l[626] || l[633] || l[640];
	assign g7[34] = l[648];
	assign g7[35] = l[650] || l[657];
	assign g7[36] = l[669] || l[675];
	assign g7[37] = l[686] || l[696] || l[699] || l[701];
	assign g7[38] = l[702];
	assign g7[39] = l[717];
	assign g7[40] = l[725];
	assign g7[41] = l[736];
	assign g7[42] = l[741] || l[745];
	assign g7[43] = l[770];
	assign g7[44] = l[792] || l[798];
	assign g7[45] = l[819] || l[821];
	assign g7[46] = l[832];
	assign g7[47] = l[852] || l[861];
	assign g7[48] = l[867] || l[869];
	assign g7[49] = l[899] || l[902];
	assign g7[50] = l[927];
	assign g7[51] = l[943];
	assign g7[52] = l[961];
	assign g7[53] = l[981] || l[982];
	assign g7[54] = l[1002];
	assign g7[55] = l[1008] || l[1017];
	assign g7[56] = l[1033];
	assign g7[57] = l[1035] || l[1041];
	assign g7[58] = l[1047];
	assign g7[59] = l[1053] || l[1061];
	assign g7[60] = l[1083] || l[1090];
	assign g7[61] = l[1105] || l[1111];
	assign g7[62] = l[1126];
	assign g7[63] = l[1136];
	assign g7[64] = l[1153];
	
    always_ff @(posedge clk) begin
        g7_reg <= g7;
    end
    
	logic [2:0] v7c1l0_out [0:16];
	logic [2:0] v7c1l0 [0:16];
	assign v7c1l0_out[0] = g7_reg[0] + g7_reg[1] + g7_reg[2] + g7_reg[3];
	assign v7c1l0_out[1] = g7_reg[4] + g7_reg[5] + g7_reg[6] + g7_reg[7];
	assign v7c1l0_out[2] = g7_reg[8] + g7_reg[9] + g7_reg[10] + g7_reg[11];
	assign v7c1l0_out[3] = g7_reg[12] + g7_reg[13] + g7_reg[14] + g7_reg[15];
	assign v7c1l0_out[4] = g7_reg[16] + g7_reg[17] + g7_reg[18] + g7_reg[19];
	assign v7c1l0_out[5] = g7_reg[20] + g7_reg[21] + g7_reg[22] + g7_reg[23];
	assign v7c1l0_out[6] = g7_reg[24] + g7_reg[25] + g7_reg[26] + g7_reg[27];
	assign v7c1l0_out[7] = g7_reg[28] + g7_reg[29] + g7_reg[30] + g7_reg[31];
	assign v7c1l0_out[8] = g7_reg[32] + g7_reg[33] + g7_reg[34] + g7_reg[35];
	assign v7c1l0_out[9] = g7_reg[36] + g7_reg[37] + g7_reg[38] + g7_reg[39];
	assign v7c1l0_out[10] = g7_reg[40] + g7_reg[41] + g7_reg[42] + g7_reg[43];
	assign v7c1l0_out[11] = g7_reg[44] + g7_reg[45] + g7_reg[46] + g7_reg[47];
	assign v7c1l0_out[12] = g7_reg[48] + g7_reg[49] + g7_reg[50] + g7_reg[51];
	assign v7c1l0_out[13] = g7_reg[52] + g7_reg[53] + g7_reg[54] + g7_reg[55];
	assign v7c1l0_out[14] = g7_reg[56] + g7_reg[57] + g7_reg[58] + g7_reg[59];
	assign v7c1l0_out[15] = g7_reg[60] + g7_reg[61] + g7_reg[62] + g7_reg[63];
	assign v7c1l0_out[16] = g7_reg[64];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 17; i = i + 1)
            v7c1l0[i] <= v7c1l0_out[i];
    end

	reg [3:0] v7c1l1 [0:8];
	logic [3:0] v7c1l1_out [0:8];
	assign v7c1l1_out[0] = v7c1l0[0] + v7c1l0[1];
	assign v7c1l1_out[1] = v7c1l0[2] + v7c1l0[3];
	assign v7c1l1_out[2] = v7c1l0[4] + v7c1l0[5];
	assign v7c1l1_out[3] = v7c1l0[6] + v7c1l0[7];
	assign v7c1l1_out[4] = v7c1l0[8] + v7c1l0[9];
	assign v7c1l1_out[5] = v7c1l0[10] + v7c1l0[11];
	assign v7c1l1_out[6] = v7c1l0[12] + v7c1l0[13];
	assign v7c1l1_out[7] = v7c1l0[14] + v7c1l0[15];
	assign v7c1l1_out[8] = v7c1l0[16];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 9; i = i + 1)
            v7c1l1[i] <= v7c1l1_out[i];
    end

	reg [4:0] v7c1l2 [0:4];
	logic [4:0] v7c1l2_out [0:4];
	assign v7c1l2_out[0] = v7c1l1[0] + v7c1l1[1];
	assign v7c1l2_out[1] = v7c1l1[2] + v7c1l1[3];
	assign v7c1l2_out[2] = v7c1l1[4] + v7c1l1[5];
	assign v7c1l2_out[3] = v7c1l1[6] + v7c1l1[7];
	assign v7c1l2_out[4] = v7c1l1[8];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 5; i = i + 1)
            v7c1l2[i] <= v7c1l2_out[i];
    end

	reg [5:0] v7c1l3 [0:2];
	logic [5:0] v7c1l3_out [0:2];
	assign v7c1l3_out[0] = v7c1l2[0] + v7c1l2[1];
	assign v7c1l3_out[1] = v7c1l2[2] + v7c1l2[3];
	assign v7c1l3_out[2] = v7c1l2[4];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 3; i = i + 1)
            v7c1l3[i] <= v7c1l3_out[i];
    end

	reg [6:0] v7c1l4 [0:1];
	logic [6:0] v7c1l4_out [0:1];
	assign v7c1l4_out[0] = v7c1l3[0] + v7c1l3[1];
	assign v7c1l4_out[1] = v7c1l3[2];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 2; i = i + 1)
            v7c1l4[i] <= v7c1l4_out[i];
    end

	reg [7:0] v7c1l5 [0:0];
	logic [7:0] v7c1l5_out [0:0];
	assign v7c1l5_out[0] = v7c1l4[0] + v7c1l4[1];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 1; i = i + 1)
            v7c1l5[i] <= v7c1l5_out[i];
    end

	assign val[7] = v7c1l5[0];
	
	// 0.125
	logic [0:69] g8;
	reg [0:69] g8_reg;
	assign g8[0] = l[26];
	assign g8[1] = l[47] || l[56];
	assign g8[2] = l[97] || l[99] || l[103];
	assign g8[3] = l[105] || l[114];
	assign g8[4] = l[123] || l[125];
	assign g8[5] = l[132] || l[135] || l[139] || l[144];
	assign g8[6] = l[150];
	assign g8[7] = l[160];
	assign g8[8] = l[171] || l[181];
	assign g8[9] = l[216];
	assign g8[10] = l[227];
	assign g8[11] = l[240];
	assign g8[12] = l[262];
	assign g8[13] = l[265] || l[269];
	assign g8[14] = l[280];
	assign g8[15] = l[291];
	assign g8[16] = l[299] || l[306];
	assign g8[17] = l[346] || l[349] || l[358];
	assign g8[18] = l[372];
	assign g8[19] = l[380];
	assign g8[20] = l[388] || l[390];
	assign g8[21] = l[406];
	assign g8[22] = l[457];
	assign g8[23] = l[466];
	assign g8[24] = l[487];
	assign g8[25] = l[511] || l[514];
	assign g8[26] = l[525];
	assign g8[27] = l[538];
	assign g8[28] = l[545];
	assign g8[29] = l[562] || l[567];
	assign g8[30] = l[579];
	assign g8[31] = l[592];
	assign g8[32] = l[595];
	assign g8[33] = l[614];
	assign g8[34] = l[630] || l[637];
	assign g8[35] = l[655];
	assign g8[36] = l[680] || l[682];
	assign g8[37] = l[689];
	assign g8[38] = l[709];
	assign g8[39] = l[733] || l[734] || l[738];
	assign g8[40] = l[743] || l[752] || l[755];
	assign g8[41] = l[776] || l[781];
	assign g8[42] = l[783];
	assign g8[43] = l[795] || l[805];
	assign g8[44] = l[809] || l[815];
	assign g8[45] = l[843] || l[847];
	assign g8[46] = l[857];
	assign g8[47] = l[862] || l[875] || l[876];
	assign g8[48] = l[878];
	assign g8[49] = l[885] || l[896] || l[898];
	assign g8[50] = l[903];
	assign g8[51] = l[915];
	assign g8[52] = l[930] || l[938] || l[939] || l[942];
	assign g8[53] = l[946] || l[949];
	assign g8[54] = l[954] || l[955];
	assign g8[55] = l[968];
	assign g8[56] = l[973] || l[977];
	assign g8[57] = l[986];
	assign g8[58] = l[987] || l[998];
	assign g8[59] = l[1006];
	assign g8[60] = l[1015] || l[1019];
	assign g8[61] = l[1031];
	assign g8[62] = l[1059] || l[1063];
	assign g8[63] = l[1067] || l[1068];
	assign g8[64] = l[1079] || l[1087] || l[1092];
	assign g8[65] = l[1097] || l[1101];
	assign g8[66] = l[1108] || l[1116];
	assign g8[67] = l[1120] || l[1123] || l[1131] || l[1134];
	assign g8[68] = l[1145];
	assign g8[69] = l[1154];
	
    always_ff @(posedge clk) begin
        g8_reg <= g8;
    end
    
	logic [2:0] v8c1l0_out [0:17];
	logic [2:0] v8c1l0 [0:17];
	assign v8c1l0_out[0] = g8_reg[0] + g8_reg[1] + g8_reg[2] + g8_reg[3];
	assign v8c1l0_out[1] = g8_reg[4] + g8_reg[5] + g8_reg[6] + g8_reg[7];
	assign v8c1l0_out[2] = g8_reg[8] + g8_reg[9] + g8_reg[10] + g8_reg[11];
	assign v8c1l0_out[3] = g8_reg[12] + g8_reg[13] + g8_reg[14] + g8_reg[15];
	assign v8c1l0_out[4] = g8_reg[16] + g8_reg[17] + g8_reg[18] + g8_reg[19];
	assign v8c1l0_out[5] = g8_reg[20] + g8_reg[21] + g8_reg[22] + g8_reg[23];
	assign v8c1l0_out[6] = g8_reg[24] + g8_reg[25] + g8_reg[26] + g8_reg[27];
	assign v8c1l0_out[7] = g8_reg[28] + g8_reg[29] + g8_reg[30] + g8_reg[31];
	assign v8c1l0_out[8] = g8_reg[32] + g8_reg[33] + g8_reg[34] + g8_reg[35];
	assign v8c1l0_out[9] = g8_reg[36] + g8_reg[37] + g8_reg[38] + g8_reg[39];
	assign v8c1l0_out[10] = g8_reg[40] + g8_reg[41] + g8_reg[42] + g8_reg[43];
	assign v8c1l0_out[11] = g8_reg[44] + g8_reg[45] + g8_reg[46] + g8_reg[47];
	assign v8c1l0_out[12] = g8_reg[48] + g8_reg[49] + g8_reg[50] + g8_reg[51];
	assign v8c1l0_out[13] = g8_reg[52] + g8_reg[53] + g8_reg[54] + g8_reg[55];
	assign v8c1l0_out[14] = g8_reg[56] + g8_reg[57] + g8_reg[58] + g8_reg[59];
	assign v8c1l0_out[15] = g8_reg[60] + g8_reg[61] + g8_reg[62] + g8_reg[63];
	assign v8c1l0_out[16] = g8_reg[64] + g8_reg[65] + g8_reg[66] + g8_reg[67];
	assign v8c1l0_out[17] = g8_reg[68] + g8_reg[69];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 18; i = i + 1)
            v8c1l0[i] <= v8c1l0_out[i];
    end

	reg [3:0] v8c1l1 [0:8];
	logic [3:0] v8c1l1_out [0:8];
	assign v8c1l1_out[0] = v8c1l0[0] + v8c1l0[1];
	assign v8c1l1_out[1] = v8c1l0[2] + v8c1l0[3];
	assign v8c1l1_out[2] = v8c1l0[4] + v8c1l0[5];
	assign v8c1l1_out[3] = v8c1l0[6] + v8c1l0[7];
	assign v8c1l1_out[4] = v8c1l0[8] + v8c1l0[9];
	assign v8c1l1_out[5] = v8c1l0[10] + v8c1l0[11];
	assign v8c1l1_out[6] = v8c1l0[12] + v8c1l0[13];
	assign v8c1l1_out[7] = v8c1l0[14] + v8c1l0[15];
	assign v8c1l1_out[8] = v8c1l0[16] + v8c1l0[17];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 9; i = i + 1)
            v8c1l1[i] <= v8c1l1_out[i];
    end

	reg [4:0] v8c1l2 [0:4];
	logic [4:0] v8c1l2_out [0:4];
	assign v8c1l2_out[0] = v8c1l1[0] + v8c1l1[1];
	assign v8c1l2_out[1] = v8c1l1[2] + v8c1l1[3];
	assign v8c1l2_out[2] = v8c1l1[4] + v8c1l1[5];
	assign v8c1l2_out[3] = v8c1l1[6] + v8c1l1[7];
	assign v8c1l2_out[4] = v8c1l1[8];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 5; i = i + 1)
            v8c1l2[i] <= v8c1l2_out[i];
    end

	reg [5:0] v8c1l3 [0:2];
	logic [5:0] v8c1l3_out [0:2];
	assign v8c1l3_out[0] = v8c1l2[0] + v8c1l2[1];
	assign v8c1l3_out[1] = v8c1l2[2] + v8c1l2[3];
	assign v8c1l3_out[2] = v8c1l2[4];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 3; i = i + 1)
            v8c1l3[i] <= v8c1l3_out[i];
    end

	reg [6:0] v8c1l4 [0:1];
	logic [6:0] v8c1l4_out [0:1];
	assign v8c1l4_out[0] = v8c1l3[0] + v8c1l3[1];
	assign v8c1l4_out[1] = v8c1l3[2];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 2; i = i + 1)
            v8c1l4[i] <= v8c1l4_out[i];
    end

	reg [7:0] v8c1l5 [0:0];
	logic [7:0] v8c1l5_out [0:0];
	assign v8c1l5_out[0] = v8c1l4[0] + v8c1l4[1];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 1; i = i + 1)
            v8c1l5[i] <= v8c1l5_out[i];
    end

	assign val[8] = v8c1l5[0];
	
	// 0.25
	logic [0:52] g9;
	reg [0:52] g9_reg;
	assign g9[0] = l[3] || l[13];
	assign g9[1] = l[51];
	assign g9[2] = l[59];
	assign g9[3] = l[76];
	assign g9[4] = l[93];
	assign g9[5] = l[106];
	assign g9[6] = l[155];
	assign g9[7] = l[176] || l[178];
	assign g9[8] = l[190];
	assign g9[9] = l[209];
	assign g9[10] = l[237];
	assign g9[11] = l[251];
	assign g9[12] = l[263];
	assign g9[13] = l[276];
	assign g9[14] = l[310];
	assign g9[15] = l[320];
	assign g9[16] = l[351];
	assign g9[17] = l[365];
	assign g9[18] = l[409];
	assign g9[19] = l[425];
	assign g9[20] = l[472];
	assign g9[21] = l[483];
	assign g9[22] = l[541];
	assign g9[23] = l[549] || l[551];
	assign g9[24] = l[565];
	assign g9[25] = l[575];
	assign g9[26] = l[583] || l[588];
	assign g9[27] = l[606];
	assign g9[28] = l[610] || l[615];
	assign g9[29] = l[619];
	assign g9[30] = l[628] || l[638];
	assign g9[31] = l[649];
	assign g9[32] = l[663];
	assign g9[33] = l[670];
	assign g9[34] = l[685];
	assign g9[35] = l[698];
	assign g9[36] = l[719] || l[721];
	assign g9[37] = l[761];
	assign g9[38] = l[771];
	assign g9[39] = l[780];
	assign g9[40] = l[789];
	assign g9[41] = l[813];
	assign g9[42] = l[827];
	assign g9[43] = l[833];
	assign g9[44] = l[884];
	assign g9[45] = l[919] || l[921];
	assign g9[46] = l[971];
	assign g9[47] = l[1000];
	assign g9[48] = l[1027];
	assign g9[49] = l[1050];
	assign g9[50] = l[1075];
	assign g9[51] = l[1098];
	assign g9[52] = l[1150];
	
    always_ff @(posedge clk) begin
        g9_reg <= g9;
    end
    
	logic [2:0] v9c1l0_out [0:13];
	logic [2:0] v9c1l0 [0:13];
	assign v9c1l0_out[0] = g9_reg[0] + g9_reg[1] + g9_reg[2] + g9_reg[3];
	assign v9c1l0_out[1] = g9_reg[4] + g9_reg[5] + g9_reg[6] + g9_reg[7];
	assign v9c1l0_out[2] = g9_reg[8] + g9_reg[9] + g9_reg[10] + g9_reg[11];
	assign v9c1l0_out[3] = g9_reg[12] + g9_reg[13] + g9_reg[14] + g9_reg[15];
	assign v9c1l0_out[4] = g9_reg[16] + g9_reg[17] + g9_reg[18] + g9_reg[19];
	assign v9c1l0_out[5] = g9_reg[20] + g9_reg[21] + g9_reg[22] + g9_reg[23];
	assign v9c1l0_out[6] = g9_reg[24] + g9_reg[25] + g9_reg[26] + g9_reg[27];
	assign v9c1l0_out[7] = g9_reg[28] + g9_reg[29] + g9_reg[30] + g9_reg[31];
	assign v9c1l0_out[8] = g9_reg[32] + g9_reg[33] + g9_reg[34] + g9_reg[35];
	assign v9c1l0_out[9] = g9_reg[36] + g9_reg[37] + g9_reg[38] + g9_reg[39];
	assign v9c1l0_out[10] = g9_reg[40] + g9_reg[41] + g9_reg[42] + g9_reg[43];
	assign v9c1l0_out[11] = g9_reg[44] + g9_reg[45] + g9_reg[46] + g9_reg[47];
	assign v9c1l0_out[12] = g9_reg[48] + g9_reg[49] + g9_reg[50] + g9_reg[51];
	assign v9c1l0_out[13] = g9_reg[52];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 14; i = i + 1)
            v9c1l0[i] <= v9c1l0_out[i];
    end

	reg [3:0] v9c1l1 [0:6];
	logic [3:0] v9c1l1_out [0:6];
	assign v9c1l1_out[0] = v9c1l0[0] + v9c1l0[1];
	assign v9c1l1_out[1] = v9c1l0[2] + v9c1l0[3];
	assign v9c1l1_out[2] = v9c1l0[4] + v9c1l0[5];
	assign v9c1l1_out[3] = v9c1l0[6] + v9c1l0[7];
	assign v9c1l1_out[4] = v9c1l0[8] + v9c1l0[9];
	assign v9c1l1_out[5] = v9c1l0[10] + v9c1l0[11];
	assign v9c1l1_out[6] = v9c1l0[12] + v9c1l0[13];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 7; i = i + 1)
            v9c1l1[i] <= v9c1l1_out[i];
    end

	reg [4:0] v9c1l2 [0:3];
	logic [4:0] v9c1l2_out [0:3];
	assign v9c1l2_out[0] = v9c1l1[0] + v9c1l1[1];
	assign v9c1l2_out[1] = v9c1l1[2] + v9c1l1[3];
	assign v9c1l2_out[2] = v9c1l1[4] + v9c1l1[5];
	assign v9c1l2_out[3] = v9c1l1[6];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 4; i = i + 1)
            v9c1l2[i] <= v9c1l2_out[i];
    end

	reg [5:0] v9c1l3 [0:1];
	logic [5:0] v9c1l3_out [0:1];
	assign v9c1l3_out[0] = v9c1l2[0] + v9c1l2[1];
	assign v9c1l3_out[1] = v9c1l2[2] + v9c1l2[3];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 2; i = i + 1)
            v9c1l3[i] <= v9c1l3_out[i];
    end

	reg [6:0] v9c1l4 [0:0];
	logic [6:0] v9c1l4_out [0:0];
	assign v9c1l4_out[0] = v9c1l3[0] + v9c1l3[1];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 1; i = i + 1)
            v9c1l4[i] <= v9c1l4_out[i];
    end

	reg [7:0] v9c1l5 [0:0];
	logic [7:0] v9c1l5_out [0:0];
	assign v9c1l5_out[0] = v9c1l4[0];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 1; i = i + 1)
            v9c1l5[i] <= v9c1l5_out[i];
    end

	assign val[9] = v9c1l5[0];
	
	// 0.5
	logic [0:11] g10;
	reg [0:11] g10_reg;
	assign g10[0] = l[19];
	assign g10[1] = l[32];
	assign g10[2] = l[87];
	assign g10[3] = l[214];
	assign g10[4] = l[239];
	assign g10[5] = l[297];
	assign g10[6] = l[480] || l[485];
	assign g10[7] = l[550];
	assign g10[8] = l[564];
	assign g10[9] = l[576];
	assign g10[10] = l[790];
	assign g10[11] = l[897];
	
    always_ff @(posedge clk) begin
        g10_reg <= g10;
    end
    
	logic [2:0] v10c1l0_out [0:2];
	logic [2:0] v10c1l0 [0:2];
	assign v10c1l0_out[0] = g10_reg[0] + g10_reg[1] + g10_reg[2] + g10_reg[3];
	assign v10c1l0_out[1] = g10_reg[4] + g10_reg[5] + g10_reg[6] + g10_reg[7];
	assign v10c1l0_out[2] = g10_reg[8] + g10_reg[9] + g10_reg[10] + g10_reg[11];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 3; i = i + 1)
            v10c1l0[i] <= v10c1l0_out[i];
    end

	reg [3:0] v10c1l1 [0:1];
	logic [3:0] v10c1l1_out [0:1];
	assign v10c1l1_out[0] = v10c1l0[0] + v10c1l0[1];
	assign v10c1l1_out[1] = v10c1l0[2];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 2; i = i + 1)
            v10c1l1[i] <= v10c1l1_out[i];
    end

	reg [4:0] v10c1l2 [0:0];
	logic [4:0] v10c1l2_out [0:0];
	assign v10c1l2_out[0] = v10c1l1[0] + v10c1l1[1];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 1; i = i + 1)
            v10c1l2[i] <= v10c1l2_out[i];
    end

	reg [5:0] v10c1l3 [0:0];
	logic [5:0] v10c1l3_out [0:0];
	assign v10c1l3_out[0] = v10c1l2[0];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 1; i = i + 1)
            v10c1l3[i] <= v10c1l3_out[i];
    end

	reg [6:0] v10c1l4 [0:0];
	logic [6:0] v10c1l4_out [0:0];
	assign v10c1l4_out[0] = v10c1l3[0];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 1; i = i + 1)
            v10c1l4[i] <= v10c1l4_out[i];
    end

	reg [7:0] v10c1l5 [0:0];
	logic [7:0] v10c1l5_out [0:0];
	assign v10c1l5_out[0] = v10c1l4[0];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 1; i = i + 1)
            v10c1l5[i] <= v10c1l5_out[i];
    end

	assign val[10] = v10c1l5[0];
	
	// 1.0
	logic [0:0] g11;
	reg [0:0] g11_reg;
	assign g11[0] = l[9] || l[11];
	
    always_ff @(posedge clk) begin
        g11_reg <= g11;
    end
    
	logic [2:0] v11c1l0_out [0:0];
	logic [2:0] v11c1l0 [0:0];
	assign v11c1l0_out[0] = g11_reg[0];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 1; i = i + 1)
            v11c1l0[i] <= v11c1l0_out[i];
    end

	reg [3:0] v11c1l1 [0:0];
	logic [3:0] v11c1l1_out [0:0];
	assign v11c1l1_out[0] = v11c1l0[0];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 1; i = i + 1)
            v11c1l1[i] <= v11c1l1_out[i];
    end

	reg [4:0] v11c1l2 [0:0];
	logic [4:0] v11c1l2_out [0:0];
	assign v11c1l2_out[0] = v11c1l1[0];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 1; i = i + 1)
            v11c1l2[i] <= v11c1l2_out[i];
    end

	reg [5:0] v11c1l3 [0:0];
	logic [5:0] v11c1l3_out [0:0];
	assign v11c1l3_out[0] = v11c1l2[0];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 1; i = i + 1)
            v11c1l3[i] <= v11c1l3_out[i];
    end

	reg [6:0] v11c1l4 [0:0];
	logic [6:0] v11c1l4_out [0:0];
	assign v11c1l4_out[0] = v11c1l3[0];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 1; i = i + 1)
            v11c1l4[i] <= v11c1l4_out[i];
    end

	reg [7:0] v11c1l5 [0:0];
	logic [7:0] v11c1l5_out [0:0];
	assign v11c1l5_out[0] = v11c1l4[0];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 1; i = i + 1)
            v11c1l5[i] <= v11c1l5_out[i];
    end

	assign val[11] = v11c1l5[0];
	
	// 2.0
	assign val[12] = 0;
	
endmodule


module leaf_counter_2(input logic clk, input logic [0:1374] l, output logic [7:0] val [0:12]);
    integer i;
	// -0.25
	logic [0:62] g0;
	reg [0:62] g0_reg;
	assign g0[0] = l[12];
	assign g0[1] = l[38];
	assign g0[2] = l[51] || l[61];
	assign g0[3] = l[71];
	assign g0[4] = l[98] || l[109];
	assign g0[5] = l[139];
	assign g0[6] = l[145];
	assign g0[7] = l[184] || l[185];
	assign g0[8] = l[232];
	assign g0[9] = l[238];
	assign g0[10] = l[257] || l[262] || l[263];
	assign g0[11] = l[281];
	assign g0[12] = l[298];
	assign g0[13] = l[305];
	assign g0[14] = l[323] || l[329];
	assign g0[15] = l[342];
	assign g0[16] = l[350];
	assign g0[17] = l[371];
	assign g0[18] = l[394];
	assign g0[19] = l[409] || l[411];
	assign g0[20] = l[423];
	assign g0[21] = l[450];
	assign g0[22] = l[467] || l[469] || l[473];
	assign g0[23] = l[484] || l[490];
	assign g0[24] = l[501] || l[505];
	assign g0[25] = l[509] || l[510] || l[511];
	assign g0[26] = l[517] || l[522];
	assign g0[27] = l[535];
	assign g0[28] = l[551];
	assign g0[29] = l[575];
	assign g0[30] = l[591] || l[596];
	assign g0[31] = l[606] || l[610];
	assign g0[32] = l[618] || l[621];
	assign g0[33] = l[654] || l[656];
	assign g0[34] = l[667];
	assign g0[35] = l[678];
	assign g0[36] = l[702] || l[706] || l[708];
	assign g0[37] = l[725];
	assign g0[38] = l[740] || l[742];
	assign g0[39] = l[757];
	assign g0[40] = l[804];
	assign g0[41] = l[808];
	assign g0[42] = l[839];
	assign g0[43] = l[844] || l[850];
	assign g0[44] = l[867];
	assign g0[45] = l[882];
	assign g0[46] = l[896];
	assign g0[47] = l[963] || l[965];
	assign g0[48] = l[978];
	assign g0[49] = l[994];
	assign g0[50] = l[1031] || l[1033];
	assign g0[51] = l[1042];
	assign g0[52] = l[1055];
	assign g0[53] = l[1071] || l[1073];
	assign g0[54] = l[1080] || l[1084] || l[1089];
	assign g0[55] = l[1103];
	assign g0[56] = l[1116];
	assign g0[57] = l[1145];
	assign g0[58] = l[1168];
	assign g0[59] = l[1189];
	assign g0[60] = l[1235];
	assign g0[61] = l[1248];
	assign g0[62] = l[1322];
	
    always_ff @(posedge clk) begin
        g0_reg <= g0;
    end
    
	logic [2:0] v0c2l0_out [0:15];
	logic [2:0] v0c2l0 [0:15];
	assign v0c2l0_out[0] = g0_reg[0] + g0_reg[1] + g0_reg[2] + g0_reg[3];
	assign v0c2l0_out[1] = g0_reg[4] + g0_reg[5] + g0_reg[6] + g0_reg[7];
	assign v0c2l0_out[2] = g0_reg[8] + g0_reg[9] + g0_reg[10] + g0_reg[11];
	assign v0c2l0_out[3] = g0_reg[12] + g0_reg[13] + g0_reg[14] + g0_reg[15];
	assign v0c2l0_out[4] = g0_reg[16] + g0_reg[17] + g0_reg[18] + g0_reg[19];
	assign v0c2l0_out[5] = g0_reg[20] + g0_reg[21] + g0_reg[22] + g0_reg[23];
	assign v0c2l0_out[6] = g0_reg[24] + g0_reg[25] + g0_reg[26] + g0_reg[27];
	assign v0c2l0_out[7] = g0_reg[28] + g0_reg[29] + g0_reg[30] + g0_reg[31];
	assign v0c2l0_out[8] = g0_reg[32] + g0_reg[33] + g0_reg[34] + g0_reg[35];
	assign v0c2l0_out[9] = g0_reg[36] + g0_reg[37] + g0_reg[38] + g0_reg[39];
	assign v0c2l0_out[10] = g0_reg[40] + g0_reg[41] + g0_reg[42] + g0_reg[43];
	assign v0c2l0_out[11] = g0_reg[44] + g0_reg[45] + g0_reg[46] + g0_reg[47];
	assign v0c2l0_out[12] = g0_reg[48] + g0_reg[49] + g0_reg[50] + g0_reg[51];
	assign v0c2l0_out[13] = g0_reg[52] + g0_reg[53] + g0_reg[54] + g0_reg[55];
	assign v0c2l0_out[14] = g0_reg[56] + g0_reg[57] + g0_reg[58] + g0_reg[59];
	assign v0c2l0_out[15] = g0_reg[60] + g0_reg[61] + g0_reg[62];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 16; i = i + 1)
            v0c2l0[i] <= v0c2l0_out[i];
    end

	reg [3:0] v0c2l1 [0:7];
	logic [3:0] v0c2l1_out [0:7];
	assign v0c2l1_out[0] = v0c2l0[0] + v0c2l0[1];
	assign v0c2l1_out[1] = v0c2l0[2] + v0c2l0[3];
	assign v0c2l1_out[2] = v0c2l0[4] + v0c2l0[5];
	assign v0c2l1_out[3] = v0c2l0[6] + v0c2l0[7];
	assign v0c2l1_out[4] = v0c2l0[8] + v0c2l0[9];
	assign v0c2l1_out[5] = v0c2l0[10] + v0c2l0[11];
	assign v0c2l1_out[6] = v0c2l0[12] + v0c2l0[13];
	assign v0c2l1_out[7] = v0c2l0[14] + v0c2l0[15];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 8; i = i + 1)
            v0c2l1[i] <= v0c2l1_out[i];
    end

	reg [4:0] v0c2l2 [0:3];
	logic [4:0] v0c2l2_out [0:3];
	assign v0c2l2_out[0] = v0c2l1[0] + v0c2l1[1];
	assign v0c2l2_out[1] = v0c2l1[2] + v0c2l1[3];
	assign v0c2l2_out[2] = v0c2l1[4] + v0c2l1[5];
	assign v0c2l2_out[3] = v0c2l1[6] + v0c2l1[7];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 4; i = i + 1)
            v0c2l2[i] <= v0c2l2_out[i];
    end

	reg [5:0] v0c2l3 [0:1];
	logic [5:0] v0c2l3_out [0:1];
	assign v0c2l3_out[0] = v0c2l2[0] + v0c2l2[1];
	assign v0c2l3_out[1] = v0c2l2[2] + v0c2l2[3];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 2; i = i + 1)
            v0c2l3[i] <= v0c2l3_out[i];
    end

	reg [6:0] v0c2l4 [0:0];
	logic [6:0] v0c2l4_out [0:0];
	assign v0c2l4_out[0] = v0c2l3[0] + v0c2l3[1];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 1; i = i + 1)
            v0c2l4[i] <= v0c2l4_out[i];
    end

	reg [7:0] v0c2l5 [0:0];
	logic [7:0] v0c2l5_out [0:0];
	assign v0c2l5_out[0] = v0c2l4[0];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 1; i = i + 1)
            v0c2l5[i] <= v0c2l5_out[i];
    end

	assign val[0] = v0c2l5[0];
	
	// -0.125
	logic [0:94] g1;
	reg [0:94] g1_reg;
	assign g1[0] = l[0] || l[6];
	assign g1[1] = l[16] || l[17] || l[21] || l[22] || l[27] || l[28] || l[31];
	assign g1[2] = l[32] || l[35] || l[40] || l[43];
	assign g1[3] = l[48] || l[53] || l[54] || l[56];
	assign g1[4] = l[67] || l[72] || l[75];
	assign g1[5] = l[79] || l[84] || l[86] || l[90] || l[94];
	assign g1[6] = l[95] || l[100] || l[103];
	assign g1[7] = l[113] || l[118] || l[119] || l[121];
	assign g1[8] = l[126] || l[129] || l[131] || l[140];
	assign g1[9] = l[146] || l[149] || l[150] || l[152] || l[154] || l[157];
	assign g1[10] = l[162] || l[164] || l[169] || l[171];
	assign g1[11] = l[174] || l[179] || l[180] || l[188];
	assign g1[12] = l[189] || l[195] || l[202];
	assign g1[13] = l[208] || l[209] || l[212] || l[213] || l[218] || l[219];
	assign g1[14] = l[225] || l[228] || l[229] || l[233];
	assign g1[15] = l[239] || l[244] || l[246] || l[247] || l[249];
	assign g1[16] = l[258] || l[265];
	assign g1[17] = l[269] || l[271] || l[280];
	assign g1[18] = l[287] || l[294] || l[295];
	assign g1[19] = l[301] || l[307] || l[310] || l[313];
	assign g1[20] = l[317] || l[325];
	assign g1[21] = l[334] || l[340];
	assign g1[22] = l[348] || l[358] || l[361];
	assign g1[23] = l[365] || l[367] || l[368] || l[375];
	assign g1[24] = l[377] || l[380] || l[383];
	assign g1[25] = l[389] || l[399] || l[400];
	assign g1[26] = l[417];
	assign g1[27] = l[421] || l[424] || l[430] || l[432] || l[434];
	assign g1[28] = l[440] || l[443] || l[444] || l[446];
	assign g1[29] = l[466];
	assign g1[30] = l[475] || l[482];
	assign g1[31] = l[498] || l[502];
	assign g1[32] = l[527] || l[529];
	assign g1[33] = l[544] || l[548] || l[550] || l[555];
	assign g1[34] = l[559];
	assign g1[35] = l[569] || l[577] || l[578] || l[580];
	assign g1[36] = l[585] || l[589];
	assign g1[37] = l[602];
	assign g1[38] = l[616];
	assign g1[39] = l[631] || l[634] || l[636] || l[638] || l[643];
	assign g1[40] = l[646] || l[649];
	assign g1[41] = l[665];
	assign g1[42] = l[669] || l[683];
	assign g1[43] = l[686] || l[695] || l[697];
	assign g1[44] = l[701];
	assign g1[45] = l[720] || l[724] || l[727];
	assign g1[46] = l[736];
	assign g1[47] = l[745];
	assign g1[48] = l[751] || l[753];
	assign g1[49] = l[760] || l[762] || l[766];
	assign g1[50] = l[779] || l[780] || l[782] || l[784] || l[788];
	assign g1[51] = l[792] || l[795] || l[797] || l[798] || l[803];
	assign g1[52] = l[811];
	assign g1[53] = l[816] || l[818] || l[820] || l[824];
	assign g1[54] = l[833] || l[837];
	assign g1[55] = l[843];
	assign g1[56] = l[857] || l[863];
	assign g1[57] = l[869] || l[870] || l[875];
	assign g1[58] = l[889] || l[891];
	assign g1[59] = l[901] || l[904] || l[905];
	assign g1[60] = l[908] || l[911] || l[920];
	assign g1[61] = l[924] || l[926] || l[928] || l[931];
	assign g1[62] = l[939] || l[941] || l[944] || l[946] || l[948];
	assign g1[63] = l[955] || l[957] || l[960];
	assign g1[64] = l[971] || l[979];
	assign g1[65] = l[986];
	assign g1[66] = l[1003] || l[1005] || l[1006];
	assign g1[67] = l[1016];
	assign g1[68] = l[1021] || l[1022];
	assign g1[69] = l[1038] || l[1044] || l[1045];
	assign g1[70] = l[1059];
	assign g1[71] = l[1067] || l[1070];
	assign g1[72] = l[1075] || l[1079] || l[1087];
	assign g1[73] = l[1091] || l[1097];
	assign g1[74] = l[1106] || l[1109];
	assign g1[75] = l[1120] || l[1122];
	assign g1[76] = l[1123] || l[1128] || l[1134];
	assign g1[77] = l[1144] || l[1150] || l[1151];
	assign g1[78] = l[1161] || l[1164] || l[1166];
	assign g1[79] = l[1172];
	assign g1[80] = l[1178] || l[1179] || l[1181] || l[1182];
	assign g1[81] = l[1191];
	assign g1[82] = l[1200] || l[1205] || l[1206] || l[1212];
	assign g1[83] = l[1218] || l[1222] || l[1227];
	assign g1[84] = l[1232] || l[1237];
	assign g1[85] = l[1242] || l[1245] || l[1251];
	assign g1[86] = l[1262];
	assign g1[87] = l[1270] || l[1278];
	assign g1[88] = l[1284] || l[1286];
	assign g1[89] = l[1300] || l[1301] || l[1307];
	assign g1[90] = l[1314] || l[1315];
	assign g1[91] = l[1330] || l[1333];
	assign g1[92] = l[1339];
	assign g1[93] = l[1349] || l[1351] || l[1353] || l[1355] || l[1357] || l[1358];
	assign g1[94] = l[1363] || l[1369];
	
    always_ff @(posedge clk) begin
        g1_reg <= g1;
    end
    
	logic [2:0] v1c2l0_out [0:23];
	logic [2:0] v1c2l0 [0:23];
	assign v1c2l0_out[0] = g1_reg[0] + g1_reg[1] + g1_reg[2] + g1_reg[3];
	assign v1c2l0_out[1] = g1_reg[4] + g1_reg[5] + g1_reg[6] + g1_reg[7];
	assign v1c2l0_out[2] = g1_reg[8] + g1_reg[9] + g1_reg[10] + g1_reg[11];
	assign v1c2l0_out[3] = g1_reg[12] + g1_reg[13] + g1_reg[14] + g1_reg[15];
	assign v1c2l0_out[4] = g1_reg[16] + g1_reg[17] + g1_reg[18] + g1_reg[19];
	assign v1c2l0_out[5] = g1_reg[20] + g1_reg[21] + g1_reg[22] + g1_reg[23];
	assign v1c2l0_out[6] = g1_reg[24] + g1_reg[25] + g1_reg[26] + g1_reg[27];
	assign v1c2l0_out[7] = g1_reg[28] + g1_reg[29] + g1_reg[30] + g1_reg[31];
	assign v1c2l0_out[8] = g1_reg[32] + g1_reg[33] + g1_reg[34] + g1_reg[35];
	assign v1c2l0_out[9] = g1_reg[36] + g1_reg[37] + g1_reg[38] + g1_reg[39];
	assign v1c2l0_out[10] = g1_reg[40] + g1_reg[41] + g1_reg[42] + g1_reg[43];
	assign v1c2l0_out[11] = g1_reg[44] + g1_reg[45] + g1_reg[46] + g1_reg[47];
	assign v1c2l0_out[12] = g1_reg[48] + g1_reg[49] + g1_reg[50] + g1_reg[51];
	assign v1c2l0_out[13] = g1_reg[52] + g1_reg[53] + g1_reg[54] + g1_reg[55];
	assign v1c2l0_out[14] = g1_reg[56] + g1_reg[57] + g1_reg[58] + g1_reg[59];
	assign v1c2l0_out[15] = g1_reg[60] + g1_reg[61] + g1_reg[62] + g1_reg[63];
	assign v1c2l0_out[16] = g1_reg[64] + g1_reg[65] + g1_reg[66] + g1_reg[67];
	assign v1c2l0_out[17] = g1_reg[68] + g1_reg[69] + g1_reg[70] + g1_reg[71];
	assign v1c2l0_out[18] = g1_reg[72] + g1_reg[73] + g1_reg[74] + g1_reg[75];
	assign v1c2l0_out[19] = g1_reg[76] + g1_reg[77] + g1_reg[78] + g1_reg[79];
	assign v1c2l0_out[20] = g1_reg[80] + g1_reg[81] + g1_reg[82] + g1_reg[83];
	assign v1c2l0_out[21] = g1_reg[84] + g1_reg[85] + g1_reg[86] + g1_reg[87];
	assign v1c2l0_out[22] = g1_reg[88] + g1_reg[89] + g1_reg[90] + g1_reg[91];
	assign v1c2l0_out[23] = g1_reg[92] + g1_reg[93] + g1_reg[94];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 24; i = i + 1)
            v1c2l0[i] <= v1c2l0_out[i];
    end

	reg [3:0] v1c2l1 [0:11];
	logic [3:0] v1c2l1_out [0:11];
	assign v1c2l1_out[0] = v1c2l0[0] + v1c2l0[1];
	assign v1c2l1_out[1] = v1c2l0[2] + v1c2l0[3];
	assign v1c2l1_out[2] = v1c2l0[4] + v1c2l0[5];
	assign v1c2l1_out[3] = v1c2l0[6] + v1c2l0[7];
	assign v1c2l1_out[4] = v1c2l0[8] + v1c2l0[9];
	assign v1c2l1_out[5] = v1c2l0[10] + v1c2l0[11];
	assign v1c2l1_out[6] = v1c2l0[12] + v1c2l0[13];
	assign v1c2l1_out[7] = v1c2l0[14] + v1c2l0[15];
	assign v1c2l1_out[8] = v1c2l0[16] + v1c2l0[17];
	assign v1c2l1_out[9] = v1c2l0[18] + v1c2l0[19];
	assign v1c2l1_out[10] = v1c2l0[20] + v1c2l0[21];
	assign v1c2l1_out[11] = v1c2l0[22] + v1c2l0[23];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 12; i = i + 1)
            v1c2l1[i] <= v1c2l1_out[i];
    end

	reg [4:0] v1c2l2 [0:5];
	logic [4:0] v1c2l2_out [0:5];
	assign v1c2l2_out[0] = v1c2l1[0] + v1c2l1[1];
	assign v1c2l2_out[1] = v1c2l1[2] + v1c2l1[3];
	assign v1c2l2_out[2] = v1c2l1[4] + v1c2l1[5];
	assign v1c2l2_out[3] = v1c2l1[6] + v1c2l1[7];
	assign v1c2l2_out[4] = v1c2l1[8] + v1c2l1[9];
	assign v1c2l2_out[5] = v1c2l1[10] + v1c2l1[11];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 6; i = i + 1)
            v1c2l2[i] <= v1c2l2_out[i];
    end

	reg [5:0] v1c2l3 [0:2];
	logic [5:0] v1c2l3_out [0:2];
	assign v1c2l3_out[0] = v1c2l2[0] + v1c2l2[1];
	assign v1c2l3_out[1] = v1c2l2[2] + v1c2l2[3];
	assign v1c2l3_out[2] = v1c2l2[4] + v1c2l2[5];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 3; i = i + 1)
            v1c2l3[i] <= v1c2l3_out[i];
    end

	reg [6:0] v1c2l4 [0:1];
	logic [6:0] v1c2l4_out [0:1];
	assign v1c2l4_out[0] = v1c2l3[0] + v1c2l3[1];
	assign v1c2l4_out[1] = v1c2l3[2];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 2; i = i + 1)
            v1c2l4[i] <= v1c2l4_out[i];
    end

	reg [7:0] v1c2l5 [0:0];
	logic [7:0] v1c2l5_out [0:0];
	assign v1c2l5_out[0] = v1c2l4[0] + v1c2l4[1];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 1; i = i + 1)
            v1c2l5[i] <= v1c2l5_out[i];
    end

	assign val[1] = v1c2l5[0];
	
	// -0.0625
	logic [0:77] g2;
	reg [0:77] g2_reg;
	assign g2[0] = l[15];
	assign g2[1] = l[18];
	assign g2[2] = l[37] || l[46];
	assign g2[3] = l[63] || l[73];
	assign g2[4] = l[82];
	assign g2[5] = l[102] || l[106];
	assign g2[6] = l[115];
	assign g2[7] = l[134] || l[137];
	assign g2[8] = l[153];
	assign g2[9] = l[158] || l[161] || l[166];
	assign g2[10] = l[177];
	assign g2[11] = l[196] || l[199] || l[204];
	assign g2[12] = l[221];
	assign g2[13] = l[243];
	assign g2[14] = l[251] || l[254] || l[255];
	assign g2[15] = l[273];
	assign g2[16] = l[283] || l[289];
	assign g2[17] = l[327] || l[330];
	assign g2[18] = l[331] || l[337] || l[343] || l[344];
	assign g2[19] = l[352] || l[354] || l[357];
	assign g2[20] = l[370];
	assign g2[21] = l[378];
	assign g2[22] = l[390] || l[396];
	assign g2[23] = l[404] || l[410] || l[413] || l[414];
	assign g2[24] = l[422];
	assign g2[25] = l[454] || l[457] || l[459] || l[462];
	assign g2[26] = l[472];
	assign g2[27] = l[479] || l[489];
	assign g2[28] = l[491] || l[493] || l[504];
	assign g2[29] = l[514] || l[515] || l[523];
	assign g2[30] = l[530] || l[531] || l[536];
	assign g2[31] = l[560] || l[563] || l[567];
	assign g2[32] = l[571] || l[573] || l[583];
	assign g2[33] = l[587];
	assign g2[34] = l[620] || l[622] || l[625];
	assign g2[35] = l[628];
	assign g2[36] = l[650];
	assign g2[37] = l[661] || l[663] || l[668];
	assign g2[38] = l[676] || l[682];
	assign g2[39] = l[689];
	assign g2[40] = l[709] || l[715];
	assign g2[41] = l[723];
	assign g2[42] = l[731] || l[735];
	assign g2[43] = l[747];
	assign g2[44] = l[756];
	assign g2[45] = l[768] || l[771];
	assign g2[46] = l[815] || l[823];
	assign g2[47] = l[838];
	assign g2[48] = l[845] || l[846] || l[851];
	assign g2[49] = l[852] || l[858] || l[861];
	assign g2[50] = l[876] || l[879] || l[880];
	assign g2[51] = l[890] || l[893];
	assign g2[52] = l[897] || l[900];
	assign g2[53] = l[907] || l[913];
	assign g2[54] = l[929] || l[935];
	assign g2[55] = l[949];
	assign g2[56] = l[969] || l[976];
	assign g2[57] = l[983] || l[993] || l[997];
	assign g2[58] = l[998] || l[1001];
	assign g2[59] = l[1010] || l[1013] || l[1014];
	assign g2[60] = l[1020];
	assign g2[61] = l[1026] || l[1032] || l[1034];
	assign g2[62] = l[1040] || l[1043];
	assign g2[63] = l[1077] || l[1082] || l[1085];
	assign g2[64] = l[1095];
	assign g2[65] = l[1115];
	assign g2[66] = l[1130];
	assign g2[67] = l[1153] || l[1154] || l[1159];
	assign g2[68] = l[1184] || l[1187] || l[1193];
	assign g2[69] = l[1213] || l[1220] || l[1225];
	assign g2[70] = l[1234];
	assign g2[71] = l[1254] || l[1257] || l[1258] || l[1264];
	assign g2[72] = l[1276] || l[1281];
	assign g2[73] = l[1283] || l[1289];
	assign g2[74] = l[1309] || l[1312] || l[1319] || l[1321];
	assign g2[75] = l[1325] || l[1327];
	assign g2[76] = l[1338];
	assign g2[77] = l[1366] || l[1367] || l[1372];
	
    always_ff @(posedge clk) begin
        g2_reg <= g2;
    end
    
	logic [2:0] v2c2l0_out [0:19];
	logic [2:0] v2c2l0 [0:19];
	assign v2c2l0_out[0] = g2_reg[0] + g2_reg[1] + g2_reg[2] + g2_reg[3];
	assign v2c2l0_out[1] = g2_reg[4] + g2_reg[5] + g2_reg[6] + g2_reg[7];
	assign v2c2l0_out[2] = g2_reg[8] + g2_reg[9] + g2_reg[10] + g2_reg[11];
	assign v2c2l0_out[3] = g2_reg[12] + g2_reg[13] + g2_reg[14] + g2_reg[15];
	assign v2c2l0_out[4] = g2_reg[16] + g2_reg[17] + g2_reg[18] + g2_reg[19];
	assign v2c2l0_out[5] = g2_reg[20] + g2_reg[21] + g2_reg[22] + g2_reg[23];
	assign v2c2l0_out[6] = g2_reg[24] + g2_reg[25] + g2_reg[26] + g2_reg[27];
	assign v2c2l0_out[7] = g2_reg[28] + g2_reg[29] + g2_reg[30] + g2_reg[31];
	assign v2c2l0_out[8] = g2_reg[32] + g2_reg[33] + g2_reg[34] + g2_reg[35];
	assign v2c2l0_out[9] = g2_reg[36] + g2_reg[37] + g2_reg[38] + g2_reg[39];
	assign v2c2l0_out[10] = g2_reg[40] + g2_reg[41] + g2_reg[42] + g2_reg[43];
	assign v2c2l0_out[11] = g2_reg[44] + g2_reg[45] + g2_reg[46] + g2_reg[47];
	assign v2c2l0_out[12] = g2_reg[48] + g2_reg[49] + g2_reg[50] + g2_reg[51];
	assign v2c2l0_out[13] = g2_reg[52] + g2_reg[53] + g2_reg[54] + g2_reg[55];
	assign v2c2l0_out[14] = g2_reg[56] + g2_reg[57] + g2_reg[58] + g2_reg[59];
	assign v2c2l0_out[15] = g2_reg[60] + g2_reg[61] + g2_reg[62] + g2_reg[63];
	assign v2c2l0_out[16] = g2_reg[64] + g2_reg[65] + g2_reg[66] + g2_reg[67];
	assign v2c2l0_out[17] = g2_reg[68] + g2_reg[69] + g2_reg[70] + g2_reg[71];
	assign v2c2l0_out[18] = g2_reg[72] + g2_reg[73] + g2_reg[74] + g2_reg[75];
	assign v2c2l0_out[19] = g2_reg[76] + g2_reg[77];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 20; i = i + 1)
            v2c2l0[i] <= v2c2l0_out[i];
    end

	reg [3:0] v2c2l1 [0:9];
	logic [3:0] v2c2l1_out [0:9];
	assign v2c2l1_out[0] = v2c2l0[0] + v2c2l0[1];
	assign v2c2l1_out[1] = v2c2l0[2] + v2c2l0[3];
	assign v2c2l1_out[2] = v2c2l0[4] + v2c2l0[5];
	assign v2c2l1_out[3] = v2c2l0[6] + v2c2l0[7];
	assign v2c2l1_out[4] = v2c2l0[8] + v2c2l0[9];
	assign v2c2l1_out[5] = v2c2l0[10] + v2c2l0[11];
	assign v2c2l1_out[6] = v2c2l0[12] + v2c2l0[13];
	assign v2c2l1_out[7] = v2c2l0[14] + v2c2l0[15];
	assign v2c2l1_out[8] = v2c2l0[16] + v2c2l0[17];
	assign v2c2l1_out[9] = v2c2l0[18] + v2c2l0[19];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 10; i = i + 1)
            v2c2l1[i] <= v2c2l1_out[i];
    end

	reg [4:0] v2c2l2 [0:4];
	logic [4:0] v2c2l2_out [0:4];
	assign v2c2l2_out[0] = v2c2l1[0] + v2c2l1[1];
	assign v2c2l2_out[1] = v2c2l1[2] + v2c2l1[3];
	assign v2c2l2_out[2] = v2c2l1[4] + v2c2l1[5];
	assign v2c2l2_out[3] = v2c2l1[6] + v2c2l1[7];
	assign v2c2l2_out[4] = v2c2l1[8] + v2c2l1[9];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 5; i = i + 1)
            v2c2l2[i] <= v2c2l2_out[i];
    end

	reg [5:0] v2c2l3 [0:2];
	logic [5:0] v2c2l3_out [0:2];
	assign v2c2l3_out[0] = v2c2l2[0] + v2c2l2[1];
	assign v2c2l3_out[1] = v2c2l2[2] + v2c2l2[3];
	assign v2c2l3_out[2] = v2c2l2[4];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 3; i = i + 1)
            v2c2l3[i] <= v2c2l3_out[i];
    end

	reg [6:0] v2c2l4 [0:1];
	logic [6:0] v2c2l4_out [0:1];
	assign v2c2l4_out[0] = v2c2l3[0] + v2c2l3[1];
	assign v2c2l4_out[1] = v2c2l3[2];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 2; i = i + 1)
            v2c2l4[i] <= v2c2l4_out[i];
    end

	reg [7:0] v2c2l5 [0:0];
	logic [7:0] v2c2l5_out [0:0];
	assign v2c2l5_out[0] = v2c2l4[0] + v2c2l4[1];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 1; i = i + 1)
            v2c2l5[i] <= v2c2l5_out[i];
    end

	assign val[2] = v2c2l5[0];
	
	// -0.03125
	logic [0:64] g3;
	reg [0:64] g3_reg;
	assign g3[0] = l[39];
	assign g3[1] = l[85] || l[87] || l[91];
	assign g3[2] = l[117];
	assign g3[3] = l[170];
	assign g3[4] = l[186];
	assign g3[5] = l[191];
	assign g3[6] = l[226];
	assign g3[7] = l[242];
	assign g3[8] = l[264];
	assign g3[9] = l[278] || l[282];
	assign g3[10] = l[288] || l[297];
	assign g3[11] = l[315];
	assign g3[12] = l[381] || l[387];
	assign g3[13] = l[407];
	assign g3[14] = l[436];
	assign g3[15] = l[452];
	assign g3[16] = l[474];
	assign g3[17] = l[487];
	assign g3[18] = l[495];
	assign g3[19] = l[507];
	assign g3[20] = l[533];
	assign g3[21] = l[542];
	assign g3[22] = l[584];
	assign g3[23] = l[605] || l[609] || l[611];
	assign g3[24] = l[648];
	assign g3[25] = l[677] || l[680];
	assign g3[26] = l[694];
	assign g3[27] = l[729];
	assign g3[28] = l[741] || l[744];
	assign g3[29] = l[754];
	assign g3[30] = l[774] || l[787];
	assign g3[31] = l[791] || l[800];
	assign g3[32] = l[809] || l[812];
	assign g3[33] = l[840];
	assign g3[34] = l[854] || l[856] || l[862];
	assign g3[35] = l[883];
	assign g3[36] = l[884] || l[895];
	assign g3[37] = l[918];
	assign g3[38] = l[932];
	assign g3[39] = l[945];
	assign g3[40] = l[974] || l[981];
	assign g3[41] = l[991];
	assign g3[42] = l[1023];
	assign g3[43] = l[1049];
	assign g3[44] = l[1051];
	assign g3[45] = l[1064];
	assign g3[46] = l[1092];
	assign g3[47] = l[1101] || l[1104];
	assign g3[48] = l[1118];
	assign g3[49] = l[1131] || l[1137];
	assign g3[50] = l[1158];
	assign g3[51] = l[1174];
	assign g3[52] = l[1197];
	assign g3[53] = l[1199] || l[1207];
	assign g3[54] = l[1217];
	assign g3[55] = l[1229] || l[1230];
	assign g3[56] = l[1240];
	assign g3[57] = l[1261];
	assign g3[58] = l[1279];
	assign g3[59] = l[1291] || l[1294];
	assign g3[60] = l[1304] || l[1305];
	assign g3[61] = l[1318];
	assign g3[62] = l[1329];
	assign g3[63] = l[1336];
	assign g3[64] = l[1344] || l[1347] || l[1348];
	
    always_ff @(posedge clk) begin
        g3_reg <= g3;
    end
    
	logic [2:0] v3c2l0_out [0:16];
	logic [2:0] v3c2l0 [0:16];
	assign v3c2l0_out[0] = g3_reg[0] + g3_reg[1] + g3_reg[2] + g3_reg[3];
	assign v3c2l0_out[1] = g3_reg[4] + g3_reg[5] + g3_reg[6] + g3_reg[7];
	assign v3c2l0_out[2] = g3_reg[8] + g3_reg[9] + g3_reg[10] + g3_reg[11];
	assign v3c2l0_out[3] = g3_reg[12] + g3_reg[13] + g3_reg[14] + g3_reg[15];
	assign v3c2l0_out[4] = g3_reg[16] + g3_reg[17] + g3_reg[18] + g3_reg[19];
	assign v3c2l0_out[5] = g3_reg[20] + g3_reg[21] + g3_reg[22] + g3_reg[23];
	assign v3c2l0_out[6] = g3_reg[24] + g3_reg[25] + g3_reg[26] + g3_reg[27];
	assign v3c2l0_out[7] = g3_reg[28] + g3_reg[29] + g3_reg[30] + g3_reg[31];
	assign v3c2l0_out[8] = g3_reg[32] + g3_reg[33] + g3_reg[34] + g3_reg[35];
	assign v3c2l0_out[9] = g3_reg[36] + g3_reg[37] + g3_reg[38] + g3_reg[39];
	assign v3c2l0_out[10] = g3_reg[40] + g3_reg[41] + g3_reg[42] + g3_reg[43];
	assign v3c2l0_out[11] = g3_reg[44] + g3_reg[45] + g3_reg[46] + g3_reg[47];
	assign v3c2l0_out[12] = g3_reg[48] + g3_reg[49] + g3_reg[50] + g3_reg[51];
	assign v3c2l0_out[13] = g3_reg[52] + g3_reg[53] + g3_reg[54] + g3_reg[55];
	assign v3c2l0_out[14] = g3_reg[56] + g3_reg[57] + g3_reg[58] + g3_reg[59];
	assign v3c2l0_out[15] = g3_reg[60] + g3_reg[61] + g3_reg[62] + g3_reg[63];
	assign v3c2l0_out[16] = g3_reg[64];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 17; i = i + 1)
            v3c2l0[i] <= v3c2l0_out[i];
    end

	reg [3:0] v3c2l1 [0:8];
	logic [3:0] v3c2l1_out [0:8];
	assign v3c2l1_out[0] = v3c2l0[0] + v3c2l0[1];
	assign v3c2l1_out[1] = v3c2l0[2] + v3c2l0[3];
	assign v3c2l1_out[2] = v3c2l0[4] + v3c2l0[5];
	assign v3c2l1_out[3] = v3c2l0[6] + v3c2l0[7];
	assign v3c2l1_out[4] = v3c2l0[8] + v3c2l0[9];
	assign v3c2l1_out[5] = v3c2l0[10] + v3c2l0[11];
	assign v3c2l1_out[6] = v3c2l0[12] + v3c2l0[13];
	assign v3c2l1_out[7] = v3c2l0[14] + v3c2l0[15];
	assign v3c2l1_out[8] = v3c2l0[16];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 9; i = i + 1)
            v3c2l1[i] <= v3c2l1_out[i];
    end

	reg [4:0] v3c2l2 [0:4];
	logic [4:0] v3c2l2_out [0:4];
	assign v3c2l2_out[0] = v3c2l1[0] + v3c2l1[1];
	assign v3c2l2_out[1] = v3c2l1[2] + v3c2l1[3];
	assign v3c2l2_out[2] = v3c2l1[4] + v3c2l1[5];
	assign v3c2l2_out[3] = v3c2l1[6] + v3c2l1[7];
	assign v3c2l2_out[4] = v3c2l1[8];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 5; i = i + 1)
            v3c2l2[i] <= v3c2l2_out[i];
    end

	reg [5:0] v3c2l3 [0:2];
	logic [5:0] v3c2l3_out [0:2];
	assign v3c2l3_out[0] = v3c2l2[0] + v3c2l2[1];
	assign v3c2l3_out[1] = v3c2l2[2] + v3c2l2[3];
	assign v3c2l3_out[2] = v3c2l2[4];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 3; i = i + 1)
            v3c2l3[i] <= v3c2l3_out[i];
    end

	reg [6:0] v3c2l4 [0:1];
	logic [6:0] v3c2l4_out [0:1];
	assign v3c2l4_out[0] = v3c2l3[0] + v3c2l3[1];
	assign v3c2l4_out[1] = v3c2l3[2];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 2; i = i + 1)
            v3c2l4[i] <= v3c2l4_out[i];
    end

	reg [7:0] v3c2l5 [0:0];
	logic [7:0] v3c2l5_out [0:0];
	assign v3c2l5_out[0] = v3c2l4[0] + v3c2l4[1];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 1; i = i + 1)
            v3c2l5[i] <= v3c2l5_out[i];
    end

	assign val[3] = v3c2l5[0];
	
	// -0.015625
	logic [0:35] g4;
	reg [0:35] g4_reg;
	assign g4[0] = l[57];
	assign g4[1] = l[80];
	assign g4[2] = l[173];
	assign g4[3] = l[306];
	assign g4[4] = l[435];
	assign g4[5] = l[439];
	assign g4[6] = l[477] || l[486];
	assign g4[7] = l[526];
	assign g4[8] = l[552];
	assign g4[9] = l[592];
	assign g4[10] = l[599];
	assign g4[11] = l[619];
	assign g4[12] = l[640];
	assign g4[13] = l[660];
	assign g4[14] = l[671];
	assign g4[15] = l[739];
	assign g4[16] = l[773];
	assign g4[17] = l[777] || l[781];
	assign g4[18] = l[794];
	assign g4[19] = l[806] || l[807];
	assign g4[20] = l[830];
	assign g4[21] = l[887];
	assign g4[22] = l[910] || l[914];
	assign g4[23] = l[933];
	assign g4[24] = l[987] || l[995];
	assign g4[25] = l[1056] || l[1060];
	assign g4[26] = l[1061];
	assign g4[27] = l[1074];
	assign g4[28] = l[1090];
	assign g4[29] = l[1110];
	assign g4[30] = l[1133];
	assign g4[31] = l[1185];
	assign g4[32] = l[1216];
	assign g4[33] = l[1241];
	assign g4[34] = l[1268];
	assign g4[35] = l[1334] || l[1340];
	
    always_ff @(posedge clk) begin
        g4_reg <= g4;
    end
    
	logic [2:0] v4c2l0_out [0:8];
	logic [2:0] v4c2l0 [0:8];
	assign v4c2l0_out[0] = g4_reg[0] + g4_reg[1] + g4_reg[2] + g4_reg[3];
	assign v4c2l0_out[1] = g4_reg[4] + g4_reg[5] + g4_reg[6] + g4_reg[7];
	assign v4c2l0_out[2] = g4_reg[8] + g4_reg[9] + g4_reg[10] + g4_reg[11];
	assign v4c2l0_out[3] = g4_reg[12] + g4_reg[13] + g4_reg[14] + g4_reg[15];
	assign v4c2l0_out[4] = g4_reg[16] + g4_reg[17] + g4_reg[18] + g4_reg[19];
	assign v4c2l0_out[5] = g4_reg[20] + g4_reg[21] + g4_reg[22] + g4_reg[23];
	assign v4c2l0_out[6] = g4_reg[24] + g4_reg[25] + g4_reg[26] + g4_reg[27];
	assign v4c2l0_out[7] = g4_reg[28] + g4_reg[29] + g4_reg[30] + g4_reg[31];
	assign v4c2l0_out[8] = g4_reg[32] + g4_reg[33] + g4_reg[34] + g4_reg[35];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 9; i = i + 1)
            v4c2l0[i] <= v4c2l0_out[i];
    end

	reg [3:0] v4c2l1 [0:4];
	logic [3:0] v4c2l1_out [0:4];
	assign v4c2l1_out[0] = v4c2l0[0] + v4c2l0[1];
	assign v4c2l1_out[1] = v4c2l0[2] + v4c2l0[3];
	assign v4c2l1_out[2] = v4c2l0[4] + v4c2l0[5];
	assign v4c2l1_out[3] = v4c2l0[6] + v4c2l0[7];
	assign v4c2l1_out[4] = v4c2l0[8];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 5; i = i + 1)
            v4c2l1[i] <= v4c2l1_out[i];
    end

	reg [4:0] v4c2l2 [0:2];
	logic [4:0] v4c2l2_out [0:2];
	assign v4c2l2_out[0] = v4c2l1[0] + v4c2l1[1];
	assign v4c2l2_out[1] = v4c2l1[2] + v4c2l1[3];
	assign v4c2l2_out[2] = v4c2l1[4];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 3; i = i + 1)
            v4c2l2[i] <= v4c2l2_out[i];
    end

	reg [5:0] v4c2l3 [0:1];
	logic [5:0] v4c2l3_out [0:1];
	assign v4c2l3_out[0] = v4c2l2[0] + v4c2l2[1];
	assign v4c2l3_out[1] = v4c2l2[2];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 2; i = i + 1)
            v4c2l3[i] <= v4c2l3_out[i];
    end

	reg [6:0] v4c2l4 [0:0];
	logic [6:0] v4c2l4_out [0:0];
	assign v4c2l4_out[0] = v4c2l3[0] + v4c2l3[1];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 1; i = i + 1)
            v4c2l4[i] <= v4c2l4_out[i];
    end

	reg [7:0] v4c2l5 [0:0];
	logic [7:0] v4c2l5_out [0:0];
	assign v4c2l5_out[0] = v4c2l4[0];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 1; i = i + 1)
            v4c2l5[i] <= v4c2l5_out[i];
    end

	assign val[4] = v4c2l5[0];
	
	// 0.015625
	logic [0:41] g5;
	reg [0:41] g5_reg;
	assign g5[0] = l[78];
	assign g5[1] = l[107];
	assign g5[2] = l[151];
	assign g5[3] = l[215];
	assign g5[4] = l[237];
	assign g5[5] = l[261];
	assign g5[6] = l[272];
	assign g5[7] = l[318] || l[322];
	assign g5[8] = l[341];
	assign g5[9] = l[416] || l[418];
	assign g5[10] = l[441];
	assign g5[11] = l[516] || l[518];
	assign g5[12] = l[538];
	assign g5[13] = l[556];
	assign g5[14] = l[574];
	assign g5[15] = l[612];
	assign g5[16] = l[655];
	assign g5[17] = l[692] || l[696];
	assign g5[18] = l[728];
	assign g5[19] = l[737];
	assign g5[20] = l[750] || l[752];
	assign g5[21] = l[834];
	assign g5[22] = l[853] || l[865];
	assign g5[23] = l[868] || l[871];
	assign g5[24] = l[902];
	assign g5[25] = l[951];
	assign g5[26] = l[953] || l[958];
	assign g5[27] = l[972] || l[975] || l[980];
	assign g5[28] = l[1019];
	assign g5[29] = l[1039];
	assign g5[30] = l[1052] || l[1057];
	assign g5[31] = l[1081] || l[1088];
	assign g5[32] = l[1096];
	assign g5[33] = l[1102] || l[1108] || l[1112];
	assign g5[34] = l[1114];
	assign g5[35] = l[1124] || l[1125];
	assign g5[36] = l[1192] || l[1196];
	assign g5[37] = l[1224];
	assign g5[38] = l[1228];
	assign g5[39] = l[1296];
	assign g5[40] = l[1326];
	assign g5[41] = l[1370];
	
    always_ff @(posedge clk) begin
        g5_reg <= g5;
    end
    
	logic [2:0] v5c2l0_out [0:10];
	logic [2:0] v5c2l0 [0:10];
	assign v5c2l0_out[0] = g5_reg[0] + g5_reg[1] + g5_reg[2] + g5_reg[3];
	assign v5c2l0_out[1] = g5_reg[4] + g5_reg[5] + g5_reg[6] + g5_reg[7];
	assign v5c2l0_out[2] = g5_reg[8] + g5_reg[9] + g5_reg[10] + g5_reg[11];
	assign v5c2l0_out[3] = g5_reg[12] + g5_reg[13] + g5_reg[14] + g5_reg[15];
	assign v5c2l0_out[4] = g5_reg[16] + g5_reg[17] + g5_reg[18] + g5_reg[19];
	assign v5c2l0_out[5] = g5_reg[20] + g5_reg[21] + g5_reg[22] + g5_reg[23];
	assign v5c2l0_out[6] = g5_reg[24] + g5_reg[25] + g5_reg[26] + g5_reg[27];
	assign v5c2l0_out[7] = g5_reg[28] + g5_reg[29] + g5_reg[30] + g5_reg[31];
	assign v5c2l0_out[8] = g5_reg[32] + g5_reg[33] + g5_reg[34] + g5_reg[35];
	assign v5c2l0_out[9] = g5_reg[36] + g5_reg[37] + g5_reg[38] + g5_reg[39];
	assign v5c2l0_out[10] = g5_reg[40] + g5_reg[41];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 11; i = i + 1)
            v5c2l0[i] <= v5c2l0_out[i];
    end

	reg [3:0] v5c2l1 [0:5];
	logic [3:0] v5c2l1_out [0:5];
	assign v5c2l1_out[0] = v5c2l0[0] + v5c2l0[1];
	assign v5c2l1_out[1] = v5c2l0[2] + v5c2l0[3];
	assign v5c2l1_out[2] = v5c2l0[4] + v5c2l0[5];
	assign v5c2l1_out[3] = v5c2l0[6] + v5c2l0[7];
	assign v5c2l1_out[4] = v5c2l0[8] + v5c2l0[9];
	assign v5c2l1_out[5] = v5c2l0[10];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 6; i = i + 1)
            v5c2l1[i] <= v5c2l1_out[i];
    end

	reg [4:0] v5c2l2 [0:2];
	logic [4:0] v5c2l2_out [0:2];
	assign v5c2l2_out[0] = v5c2l1[0] + v5c2l1[1];
	assign v5c2l2_out[1] = v5c2l1[2] + v5c2l1[3];
	assign v5c2l2_out[2] = v5c2l1[4] + v5c2l1[5];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 3; i = i + 1)
            v5c2l2[i] <= v5c2l2_out[i];
    end

	reg [5:0] v5c2l3 [0:1];
	logic [5:0] v5c2l3_out [0:1];
	assign v5c2l3_out[0] = v5c2l2[0] + v5c2l2[1];
	assign v5c2l3_out[1] = v5c2l2[2];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 2; i = i + 1)
            v5c2l3[i] <= v5c2l3_out[i];
    end

	reg [6:0] v5c2l4 [0:0];
	logic [6:0] v5c2l4_out [0:0];
	assign v5c2l4_out[0] = v5c2l3[0] + v5c2l3[1];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 1; i = i + 1)
            v5c2l4[i] <= v5c2l4_out[i];
    end

	reg [7:0] v5c2l5 [0:0];
	logic [7:0] v5c2l5_out [0:0];
	assign v5c2l5_out[0] = v5c2l4[0];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 1; i = i + 1)
            v5c2l5[i] <= v5c2l5_out[i];
    end

	assign val[5] = v5c2l5[0];
	
	// 0.03125
	logic [0:51] g6;
	reg [0:51] g6_reg;
	assign g6[0] = l[5];
	assign g6[1] = l[125];
	assign g6[2] = l[143];
	assign g6[3] = l[205];
	assign g6[4] = l[224];
	assign g6[5] = l[235];
	assign g6[6] = l[285];
	assign g6[7] = l[304];
	assign g6[8] = l[319];
	assign g6[9] = l[366] || l[369];
	assign g6[10] = l[425];
	assign g6[11] = l[442] || l[449];
	assign g6[12] = l[456];
	assign g6[13] = l[465] || l[468];
	assign g6[14] = l[506];
	assign g6[15] = l[521];
	assign g6[16] = l[540];
	assign g6[17] = l[541] || l[543];
	assign g6[18] = l[566];
	assign g6[19] = l[588] || l[590];
	assign g6[20] = l[632];
	assign g6[21] = l[644];
	assign g6[22] = l[693] || l[698];
	assign g6[23] = l[730];
	assign g6[24] = l[764] || l[767] || l[770];
	assign g6[25] = l[805];
	assign g6[26] = l[826];
	assign g6[27] = l[866];
	assign g6[28] = l[898];
	assign g6[29] = l[906] || l[916];
	assign g6[30] = l[930];
	assign g6[31] = l[943];
	assign g6[32] = l[964];
	assign g6[33] = l[967];
	assign g6[34] = l[990];
	assign g6[35] = l[1002] || l[1004] || l[1007];
	assign g6[36] = l[1008] || l[1012];
	assign g6[37] = l[1078];
	assign g6[38] = l[1098];
	assign g6[39] = l[1100];
	assign g6[40] = l[1121];
	assign g6[41] = l[1155] || l[1160];
	assign g6[42] = l[1183];
	assign g6[43] = l[1198] || l[1201] || l[1208] || l[1210] || l[1211];
	assign g6[44] = l[1239] || l[1247] || l[1250];
	assign g6[45] = l[1263];
	assign g6[46] = l[1274] || l[1280];
	assign g6[47] = l[1303];
	assign g6[48] = l[1320];
	assign g6[49] = l[1337];
	assign g6[50] = l[1352];
	assign g6[51] = l[1371];
	
    always_ff @(posedge clk) begin
        g6_reg <= g6;
    end
    
	logic [2:0] v6c2l0_out [0:12];
	logic [2:0] v6c2l0 [0:12];
	assign v6c2l0_out[0] = g6_reg[0] + g6_reg[1] + g6_reg[2] + g6_reg[3];
	assign v6c2l0_out[1] = g6_reg[4] + g6_reg[5] + g6_reg[6] + g6_reg[7];
	assign v6c2l0_out[2] = g6_reg[8] + g6_reg[9] + g6_reg[10] + g6_reg[11];
	assign v6c2l0_out[3] = g6_reg[12] + g6_reg[13] + g6_reg[14] + g6_reg[15];
	assign v6c2l0_out[4] = g6_reg[16] + g6_reg[17] + g6_reg[18] + g6_reg[19];
	assign v6c2l0_out[5] = g6_reg[20] + g6_reg[21] + g6_reg[22] + g6_reg[23];
	assign v6c2l0_out[6] = g6_reg[24] + g6_reg[25] + g6_reg[26] + g6_reg[27];
	assign v6c2l0_out[7] = g6_reg[28] + g6_reg[29] + g6_reg[30] + g6_reg[31];
	assign v6c2l0_out[8] = g6_reg[32] + g6_reg[33] + g6_reg[34] + g6_reg[35];
	assign v6c2l0_out[9] = g6_reg[36] + g6_reg[37] + g6_reg[38] + g6_reg[39];
	assign v6c2l0_out[10] = g6_reg[40] + g6_reg[41] + g6_reg[42] + g6_reg[43];
	assign v6c2l0_out[11] = g6_reg[44] + g6_reg[45] + g6_reg[46] + g6_reg[47];
	assign v6c2l0_out[12] = g6_reg[48] + g6_reg[49] + g6_reg[50] + g6_reg[51];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 13; i = i + 1)
            v6c2l0[i] <= v6c2l0_out[i];
    end

	reg [3:0] v6c2l1 [0:6];
	logic [3:0] v6c2l1_out [0:6];
	assign v6c2l1_out[0] = v6c2l0[0] + v6c2l0[1];
	assign v6c2l1_out[1] = v6c2l0[2] + v6c2l0[3];
	assign v6c2l1_out[2] = v6c2l0[4] + v6c2l0[5];
	assign v6c2l1_out[3] = v6c2l0[6] + v6c2l0[7];
	assign v6c2l1_out[4] = v6c2l0[8] + v6c2l0[9];
	assign v6c2l1_out[5] = v6c2l0[10] + v6c2l0[11];
	assign v6c2l1_out[6] = v6c2l0[12];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 7; i = i + 1)
            v6c2l1[i] <= v6c2l1_out[i];
    end

	reg [4:0] v6c2l2 [0:3];
	logic [4:0] v6c2l2_out [0:3];
	assign v6c2l2_out[0] = v6c2l1[0] + v6c2l1[1];
	assign v6c2l2_out[1] = v6c2l1[2] + v6c2l1[3];
	assign v6c2l2_out[2] = v6c2l1[4] + v6c2l1[5];
	assign v6c2l2_out[3] = v6c2l1[6];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 4; i = i + 1)
            v6c2l2[i] <= v6c2l2_out[i];
    end

	reg [5:0] v6c2l3 [0:1];
	logic [5:0] v6c2l3_out [0:1];
	assign v6c2l3_out[0] = v6c2l2[0] + v6c2l2[1];
	assign v6c2l3_out[1] = v6c2l2[2] + v6c2l2[3];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 2; i = i + 1)
            v6c2l3[i] <= v6c2l3_out[i];
    end

	reg [6:0] v6c2l4 [0:0];
	logic [6:0] v6c2l4_out [0:0];
	assign v6c2l4_out[0] = v6c2l3[0] + v6c2l3[1];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 1; i = i + 1)
            v6c2l4[i] <= v6c2l4_out[i];
    end

	reg [7:0] v6c2l5 [0:0];
	logic [7:0] v6c2l5_out [0:0];
	assign v6c2l5_out[0] = v6c2l4[0];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 1; i = i + 1)
            v6c2l5[i] <= v6c2l5_out[i];
    end

	assign val[6] = v6c2l5[0];
	
	// 0.0625
	logic [0:70] g7;
	reg [0:70] g7_reg;
	assign g7[0] = l[3];
	assign g7[1] = l[41];
	assign g7[2] = l[62];
	assign g7[3] = l[111];
	assign g7[4] = l[181];
	assign g7[5] = l[198];
	assign g7[6] = l[207] || l[220];
	assign g7[7] = l[222];
	assign g7[8] = l[240] || l[250];
	assign g7[9] = l[260];
	assign g7[10] = l[314];
	assign g7[11] = l[338];
	assign g7[12] = l[346] || l[349] || l[351] || l[359] || l[360];
	assign g7[13] = l[376];
	assign g7[14] = l[388] || l[391] || l[392] || l[395];
	assign g7[15] = l[420];
	assign g7[16] = l[445] || l[451];
	assign g7[17] = l[453] || l[458];
	assign g7[18] = l[463];
	assign g7[19] = l[480] || l[481];
	assign g7[20] = l[496] || l[503];
	assign g7[21] = l[512];
	assign g7[22] = l[513] || l[524];
	assign g7[23] = l[525];
	assign g7[24] = l[576] || l[579];
	assign g7[25] = l[586];
	assign g7[26] = l[600] || l[604];
	assign g7[27] = l[615] || l[617] || l[623] || l[624];
	assign g7[28] = l[652];
	assign g7[29] = l[659] || l[664];
	assign g7[30] = l[699];
	assign g7[31] = l[703];
	assign g7[32] = l[710] || l[714];
	assign g7[33] = l[743] || l[746];
	assign g7[34] = l[761] || l[772];
	assign g7[35] = l[775] || l[783];
	assign g7[36] = l[790] || l[793] || l[799] || l[801] || l[802];
	assign g7[37] = l[810];
	assign g7[38] = l[814] || l[821] || l[822] || l[825];
	assign g7[39] = l[848];
	assign g7[40] = l[860] || l[864];
	assign g7[41] = l[874] || l[877] || l[881];
	assign g7[42] = l[899];
	assign g7[43] = l[921];
	assign g7[44] = l[922] || l[927] || l[934];
	assign g7[45] = l[940] || l[947];
	assign g7[46] = l[962];
	assign g7[47] = l[985] || l[989] || l[992];
	assign g7[48] = l[1000];
	assign g7[49] = l[1011];
	assign g7[50] = l[1018];
	assign g7[51] = l[1027] || l[1028];
	assign g7[52] = l[1036] || l[1046] || l[1047];
	assign g7[53] = l[1068] || l[1069];
	assign g7[54] = l[1093] || l[1094];
	assign g7[55] = l[1107];
	assign g7[56] = l[1140] || l[1148] || l[1149];
	assign g7[57] = l[1152] || l[1156] || l[1162];
	assign g7[58] = l[1169];
	assign g7[59] = l[1186] || l[1188] || l[1194];
	assign g7[60] = l[1215] || l[1223] || l[1226];
	assign g7[61] = l[1246] || l[1252];
	assign g7[62] = l[1256] || l[1260] || l[1265];
	assign g7[63] = l[1269] || l[1277];
	assign g7[64] = l[1282] || l[1287] || l[1290] || l[1292] || l[1293];
	assign g7[65] = l[1297] || l[1306];
	assign g7[66] = l[1310] || l[1311] || l[1316] || l[1317] || l[1323];
	assign g7[67] = l[1331];
	assign g7[68] = l[1335] || l[1341];
	assign g7[69] = l[1345] || l[1350] || l[1354] || l[1356] || l[1359];
	assign g7[70] = l[1361] || l[1368];
	
    always_ff @(posedge clk) begin
        g7_reg <= g7;
    end
    
	logic [2:0] v7c2l0_out [0:17];
	logic [2:0] v7c2l0 [0:17];
	assign v7c2l0_out[0] = g7_reg[0] + g7_reg[1] + g7_reg[2] + g7_reg[3];
	assign v7c2l0_out[1] = g7_reg[4] + g7_reg[5] + g7_reg[6] + g7_reg[7];
	assign v7c2l0_out[2] = g7_reg[8] + g7_reg[9] + g7_reg[10] + g7_reg[11];
	assign v7c2l0_out[3] = g7_reg[12] + g7_reg[13] + g7_reg[14] + g7_reg[15];
	assign v7c2l0_out[4] = g7_reg[16] + g7_reg[17] + g7_reg[18] + g7_reg[19];
	assign v7c2l0_out[5] = g7_reg[20] + g7_reg[21] + g7_reg[22] + g7_reg[23];
	assign v7c2l0_out[6] = g7_reg[24] + g7_reg[25] + g7_reg[26] + g7_reg[27];
	assign v7c2l0_out[7] = g7_reg[28] + g7_reg[29] + g7_reg[30] + g7_reg[31];
	assign v7c2l0_out[8] = g7_reg[32] + g7_reg[33] + g7_reg[34] + g7_reg[35];
	assign v7c2l0_out[9] = g7_reg[36] + g7_reg[37] + g7_reg[38] + g7_reg[39];
	assign v7c2l0_out[10] = g7_reg[40] + g7_reg[41] + g7_reg[42] + g7_reg[43];
	assign v7c2l0_out[11] = g7_reg[44] + g7_reg[45] + g7_reg[46] + g7_reg[47];
	assign v7c2l0_out[12] = g7_reg[48] + g7_reg[49] + g7_reg[50] + g7_reg[51];
	assign v7c2l0_out[13] = g7_reg[52] + g7_reg[53] + g7_reg[54] + g7_reg[55];
	assign v7c2l0_out[14] = g7_reg[56] + g7_reg[57] + g7_reg[58] + g7_reg[59];
	assign v7c2l0_out[15] = g7_reg[60] + g7_reg[61] + g7_reg[62] + g7_reg[63];
	assign v7c2l0_out[16] = g7_reg[64] + g7_reg[65] + g7_reg[66] + g7_reg[67];
	assign v7c2l0_out[17] = g7_reg[68] + g7_reg[69] + g7_reg[70];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 18; i = i + 1)
            v7c2l0[i] <= v7c2l0_out[i];
    end

	reg [3:0] v7c2l1 [0:8];
	logic [3:0] v7c2l1_out [0:8];
	assign v7c2l1_out[0] = v7c2l0[0] + v7c2l0[1];
	assign v7c2l1_out[1] = v7c2l0[2] + v7c2l0[3];
	assign v7c2l1_out[2] = v7c2l0[4] + v7c2l0[5];
	assign v7c2l1_out[3] = v7c2l0[6] + v7c2l0[7];
	assign v7c2l1_out[4] = v7c2l0[8] + v7c2l0[9];
	assign v7c2l1_out[5] = v7c2l0[10] + v7c2l0[11];
	assign v7c2l1_out[6] = v7c2l0[12] + v7c2l0[13];
	assign v7c2l1_out[7] = v7c2l0[14] + v7c2l0[15];
	assign v7c2l1_out[8] = v7c2l0[16] + v7c2l0[17];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 9; i = i + 1)
            v7c2l1[i] <= v7c2l1_out[i];
    end

	reg [4:0] v7c2l2 [0:4];
	logic [4:0] v7c2l2_out [0:4];
	assign v7c2l2_out[0] = v7c2l1[0] + v7c2l1[1];
	assign v7c2l2_out[1] = v7c2l1[2] + v7c2l1[3];
	assign v7c2l2_out[2] = v7c2l1[4] + v7c2l1[5];
	assign v7c2l2_out[3] = v7c2l1[6] + v7c2l1[7];
	assign v7c2l2_out[4] = v7c2l1[8];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 5; i = i + 1)
            v7c2l2[i] <= v7c2l2_out[i];
    end

	reg [5:0] v7c2l3 [0:2];
	logic [5:0] v7c2l3_out [0:2];
	assign v7c2l3_out[0] = v7c2l2[0] + v7c2l2[1];
	assign v7c2l3_out[1] = v7c2l2[2] + v7c2l2[3];
	assign v7c2l3_out[2] = v7c2l2[4];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 3; i = i + 1)
            v7c2l3[i] <= v7c2l3_out[i];
    end

	reg [6:0] v7c2l4 [0:1];
	logic [6:0] v7c2l4_out [0:1];
	assign v7c2l4_out[0] = v7c2l3[0] + v7c2l3[1];
	assign v7c2l4_out[1] = v7c2l3[2];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 2; i = i + 1)
            v7c2l4[i] <= v7c2l4_out[i];
    end

	reg [7:0] v7c2l5 [0:0];
	logic [7:0] v7c2l5_out [0:0];
	assign v7c2l5_out[0] = v7c2l4[0] + v7c2l4[1];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 1; i = i + 1)
            v7c2l5[i] <= v7c2l5_out[i];
    end

	assign val[7] = v7c2l5[0];
	
	// 0.125
	logic [0:85] g8;
	reg [0:85] g8_reg;
	assign g8[0] = l[9] || l[13];
	assign g8[1] = l[26] || l[29];
	assign g8[2] = l[59];
	assign g8[3] = l[65] || l[68];
	assign g8[4] = l[96] || l[97] || l[99] || l[104];
	assign g8[5] = l[128] || l[130];
	assign g8[6] = l[156];
	assign g8[7] = l[159] || l[160] || l[163] || l[167];
	assign g8[8] = l[192];
	assign g8[9] = l[217];
	assign g8[10] = l[223] || l[227];
	assign g8[11] = l[245] || l[248];
	assign g8[12] = l[252] || l[253] || l[266];
	assign g8[13] = l[268] || l[274] || l[279];
	assign g8[14] = l[284] || l[291] || l[293];
	assign g8[15] = l[300] || l[302] || l[303] || l[308];
	assign g8[16] = l[316];
	assign g8[17] = l[332] || l[336] || l[345];
	assign g8[18] = l[347] || l[355];
	assign g8[19] = l[363];
	assign g8[20] = l[384];
	assign g8[21] = l[393] || l[397] || l[398] || l[403];
	assign g8[22] = l[405] || l[406] || l[408] || l[415] || l[419];
	assign g8[23] = l[427] || l[433];
	assign g8[24] = l[438] || l[447] || l[448];
	assign g8[25] = l[455] || l[461];
	assign g8[26] = l[471];
	assign g8[27] = l[478] || l[483] || l[488];
	assign g8[28] = l[494] || l[497] || l[500];
	assign g8[29] = l[508];
	assign g8[30] = l[532] || l[537];
	assign g8[31] = l[547] || l[549] || l[554];
	assign g8[32] = l[557] || l[561] || l[565];
	assign g8[33] = l[570] || l[572] || l[581] || l[582];
	assign g8[34] = l[595] || l[598];
	assign g8[35] = l[607];
	assign g8[36] = l[613] || l[626];
	assign g8[37] = l[629] || l[630] || l[633] || l[637] || l[641];
	assign g8[38] = l[647] || l[651] || l[658];
	assign g8[39] = l[662];
	assign g8[40] = l[672] || l[675] || l[679];
	assign g8[41] = l[688] || l[690];
	assign g8[42] = l[718] || l[722] || l[726];
	assign g8[43] = l[733];
	assign g8[44] = l[738];
	assign g8[45] = l[749] || l[755];
	assign g8[46] = l[758] || l[769];
	assign g8[47] = l[776] || l[786];
	assign g8[48] = l[796];
	assign g8[49] = l[817] || l[819] || l[827];
	assign g8[50] = l[831] || l[835] || l[841];
	assign g8[51] = l[847];
	assign g8[52] = l[859];
	assign g8[53] = l[872] || l[878];
	assign g8[54] = l[885] || l[886] || l[888] || l[894];
	assign g8[55] = l[912] || l[915] || l[917] || l[919];
	assign g8[56] = l[925] || l[936];
	assign g8[57] = l[937] || l[950] || l[952];
	assign g8[58] = l[954] || l[956] || l[959];
	assign g8[59] = l[968] || l[970] || l[973] || l[982];
	assign g8[60] = l[984] || l[996];
	assign g8[61] = l[1009] || l[1015];
	assign g8[62] = l[1035];
	assign g8[63] = l[1050];
	assign g8[64] = l[1054];
	assign g8[65] = l[1062] || l[1063] || l[1065];
	assign g8[66] = l[1076] || l[1083] || l[1086];
	assign g8[67] = l[1099];
	assign g8[68] = l[1105] || l[1111];
	assign g8[69] = l[1117] || l[1119];
	assign g8[70] = l[1126] || l[1129] || l[1132] || l[1135] || l[1138];
	assign g8[71] = l[1141] || l[1143];
	assign g8[72] = l[1163] || l[1165];
	assign g8[73] = l[1173];
	assign g8[74] = l[1202] || l[1209];
	assign g8[75] = l[1219];
	assign g8[76] = l[1231] || l[1233] || l[1238];
	assign g8[77] = l[1244] || l[1249];
	assign g8[78] = l[1255] || l[1259] || l[1266];
	assign g8[79] = l[1273] || l[1275];
	assign g8[80] = l[1288] || l[1295];
	assign g8[81] = l[1313];
	assign g8[82] = l[1328];
	assign g8[83] = l[1342];
	assign g8[84] = l[1346];
	assign g8[85] = l[1365] || l[1374];
	
    always_ff @(posedge clk) begin
        g8_reg <= g8;
    end
    
	logic [2:0] v8c2l0_out [0:21];
	logic [2:0] v8c2l0 [0:21];
	assign v8c2l0_out[0] = g8_reg[0] + g8_reg[1] + g8_reg[2] + g8_reg[3];
	assign v8c2l0_out[1] = g8_reg[4] + g8_reg[5] + g8_reg[6] + g8_reg[7];
	assign v8c2l0_out[2] = g8_reg[8] + g8_reg[9] + g8_reg[10] + g8_reg[11];
	assign v8c2l0_out[3] = g8_reg[12] + g8_reg[13] + g8_reg[14] + g8_reg[15];
	assign v8c2l0_out[4] = g8_reg[16] + g8_reg[17] + g8_reg[18] + g8_reg[19];
	assign v8c2l0_out[5] = g8_reg[20] + g8_reg[21] + g8_reg[22] + g8_reg[23];
	assign v8c2l0_out[6] = g8_reg[24] + g8_reg[25] + g8_reg[26] + g8_reg[27];
	assign v8c2l0_out[7] = g8_reg[28] + g8_reg[29] + g8_reg[30] + g8_reg[31];
	assign v8c2l0_out[8] = g8_reg[32] + g8_reg[33] + g8_reg[34] + g8_reg[35];
	assign v8c2l0_out[9] = g8_reg[36] + g8_reg[37] + g8_reg[38] + g8_reg[39];
	assign v8c2l0_out[10] = g8_reg[40] + g8_reg[41] + g8_reg[42] + g8_reg[43];
	assign v8c2l0_out[11] = g8_reg[44] + g8_reg[45] + g8_reg[46] + g8_reg[47];
	assign v8c2l0_out[12] = g8_reg[48] + g8_reg[49] + g8_reg[50] + g8_reg[51];
	assign v8c2l0_out[13] = g8_reg[52] + g8_reg[53] + g8_reg[54] + g8_reg[55];
	assign v8c2l0_out[14] = g8_reg[56] + g8_reg[57] + g8_reg[58] + g8_reg[59];
	assign v8c2l0_out[15] = g8_reg[60] + g8_reg[61] + g8_reg[62] + g8_reg[63];
	assign v8c2l0_out[16] = g8_reg[64] + g8_reg[65] + g8_reg[66] + g8_reg[67];
	assign v8c2l0_out[17] = g8_reg[68] + g8_reg[69] + g8_reg[70] + g8_reg[71];
	assign v8c2l0_out[18] = g8_reg[72] + g8_reg[73] + g8_reg[74] + g8_reg[75];
	assign v8c2l0_out[19] = g8_reg[76] + g8_reg[77] + g8_reg[78] + g8_reg[79];
	assign v8c2l0_out[20] = g8_reg[80] + g8_reg[81] + g8_reg[82] + g8_reg[83];
	assign v8c2l0_out[21] = g8_reg[84] + g8_reg[85];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 22; i = i + 1)
            v8c2l0[i] <= v8c2l0_out[i];
    end

	reg [3:0] v8c2l1 [0:10];
	logic [3:0] v8c2l1_out [0:10];
	assign v8c2l1_out[0] = v8c2l0[0] + v8c2l0[1];
	assign v8c2l1_out[1] = v8c2l0[2] + v8c2l0[3];
	assign v8c2l1_out[2] = v8c2l0[4] + v8c2l0[5];
	assign v8c2l1_out[3] = v8c2l0[6] + v8c2l0[7];
	assign v8c2l1_out[4] = v8c2l0[8] + v8c2l0[9];
	assign v8c2l1_out[5] = v8c2l0[10] + v8c2l0[11];
	assign v8c2l1_out[6] = v8c2l0[12] + v8c2l0[13];
	assign v8c2l1_out[7] = v8c2l0[14] + v8c2l0[15];
	assign v8c2l1_out[8] = v8c2l0[16] + v8c2l0[17];
	assign v8c2l1_out[9] = v8c2l0[18] + v8c2l0[19];
	assign v8c2l1_out[10] = v8c2l0[20] + v8c2l0[21];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 11; i = i + 1)
            v8c2l1[i] <= v8c2l1_out[i];
    end

	reg [4:0] v8c2l2 [0:5];
	logic [4:0] v8c2l2_out [0:5];
	assign v8c2l2_out[0] = v8c2l1[0] + v8c2l1[1];
	assign v8c2l2_out[1] = v8c2l1[2] + v8c2l1[3];
	assign v8c2l2_out[2] = v8c2l1[4] + v8c2l1[5];
	assign v8c2l2_out[3] = v8c2l1[6] + v8c2l1[7];
	assign v8c2l2_out[4] = v8c2l1[8] + v8c2l1[9];
	assign v8c2l2_out[5] = v8c2l1[10];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 6; i = i + 1)
            v8c2l2[i] <= v8c2l2_out[i];
    end

	reg [5:0] v8c2l3 [0:2];
	logic [5:0] v8c2l3_out [0:2];
	assign v8c2l3_out[0] = v8c2l2[0] + v8c2l2[1];
	assign v8c2l3_out[1] = v8c2l2[2] + v8c2l2[3];
	assign v8c2l3_out[2] = v8c2l2[4] + v8c2l2[5];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 3; i = i + 1)
            v8c2l3[i] <= v8c2l3_out[i];
    end

	reg [6:0] v8c2l4 [0:1];
	logic [6:0] v8c2l4_out [0:1];
	assign v8c2l4_out[0] = v8c2l3[0] + v8c2l3[1];
	assign v8c2l4_out[1] = v8c2l3[2];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 2; i = i + 1)
            v8c2l4[i] <= v8c2l4_out[i];
    end

	reg [7:0] v8c2l5 [0:0];
	logic [7:0] v8c2l5_out [0:0];
	assign v8c2l5_out[0] = v8c2l4[0] + v8c2l4[1];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 1; i = i + 1)
            v8c2l5[i] <= v8c2l5_out[i];
    end

	assign val[8] = v8c2l5[0];
	
	// 0.25
	logic [0:62] g9;
	reg [0:62] g9_reg;
	assign g9[0] = l[7];
	assign g9[1] = l[25];
	assign g9[2] = l[34] || l[36] || l[42] || l[44] || l[47];
	assign g9[3] = l[49] || l[50] || l[52] || l[55];
	assign g9[4] = l[64] || l[77];
	assign g9[5] = l[81] || l[83] || l[88] || l[89];
	assign g9[6] = l[101];
	assign g9[7] = l[112] || l[114] || l[120] || l[122] || l[124];
	assign g9[8] = l[132] || l[135] || l[136] || l[138] || l[141];
	assign g9[9] = l[142] || l[148];
	assign g9[10] = l[165] || l[168];
	assign g9[11] = l[175] || l[176] || l[178] || l[182] || l[187];
	assign g9[12] = l[190] || l[193] || l[197] || l[200] || l[203];
	assign g9[13] = l[206] || l[210] || l[211] || l[216];
	assign g9[14] = l[236];
	assign g9[15] = l[256] || l[259];
	assign g9[16] = l[276] || l[277];
	assign g9[17] = l[286] || l[290] || l[296];
	assign g9[18] = l[309] || l[311];
	assign g9[19] = l[320] || l[326] || l[328];
	assign g9[20] = l[333] || l[339];
	assign g9[21] = l[353] || l[356];
	assign g9[22] = l[364] || l[372] || l[374];
	assign g9[23] = l[379] || l[382] || l[385];
	assign g9[24] = l[401];
	assign g9[25] = l[412];
	assign g9[26] = l[426] || l[429] || l[431];
	assign g9[27] = l[437];
	assign g9[28] = l[460];
	assign g9[29] = l[492] || l[499];
	assign g9[30] = l[520];
	assign g9[31] = l[528] || l[534];
	assign g9[32] = l[545];
	assign g9[33] = l[562] || l[564];
	assign g9[34] = l[593] || l[594];
	assign g9[35] = l[601] || l[603] || l[608];
	assign g9[36] = l[614];
	assign g9[37] = l[635] || l[639] || l[642];
	assign g9[38] = l[645];
	assign g9[39] = l[674] || l[681];
	assign g9[40] = l[691];
	assign g9[41] = l[704];
	assign g9[42] = l[712] || l[713] || l[716];
	assign g9[43] = l[719] || l[721];
	assign g9[44] = l[732] || l[734];
	assign g9[45] = l[765];
	assign g9[46] = l[778];
	assign g9[47] = l[813];
	assign g9[48] = l[829];
	assign g9[49] = l[849];
	assign g9[50] = l[855];
	assign g9[51] = l[892];
	assign g9[52] = l[988];
	assign g9[53] = l[999];
	assign g9[54] = l[1025];
	assign g9[55] = l[1048];
	assign g9[56] = l[1113];
	assign g9[57] = l[1147];
	assign g9[58] = l[1157];
	assign g9[59] = l[1175];
	assign g9[60] = l[1195];
	assign g9[61] = l[1332];
	assign g9[62] = l[1362];
	
    always_ff @(posedge clk) begin
        g9_reg <= g9;
    end
    
	logic [2:0] v9c2l0_out [0:15];
	logic [2:0] v9c2l0 [0:15];
	assign v9c2l0_out[0] = g9_reg[0] + g9_reg[1] + g9_reg[2] + g9_reg[3];
	assign v9c2l0_out[1] = g9_reg[4] + g9_reg[5] + g9_reg[6] + g9_reg[7];
	assign v9c2l0_out[2] = g9_reg[8] + g9_reg[9] + g9_reg[10] + g9_reg[11];
	assign v9c2l0_out[3] = g9_reg[12] + g9_reg[13] + g9_reg[14] + g9_reg[15];
	assign v9c2l0_out[4] = g9_reg[16] + g9_reg[17] + g9_reg[18] + g9_reg[19];
	assign v9c2l0_out[5] = g9_reg[20] + g9_reg[21] + g9_reg[22] + g9_reg[23];
	assign v9c2l0_out[6] = g9_reg[24] + g9_reg[25] + g9_reg[26] + g9_reg[27];
	assign v9c2l0_out[7] = g9_reg[28] + g9_reg[29] + g9_reg[30] + g9_reg[31];
	assign v9c2l0_out[8] = g9_reg[32] + g9_reg[33] + g9_reg[34] + g9_reg[35];
	assign v9c2l0_out[9] = g9_reg[36] + g9_reg[37] + g9_reg[38] + g9_reg[39];
	assign v9c2l0_out[10] = g9_reg[40] + g9_reg[41] + g9_reg[42] + g9_reg[43];
	assign v9c2l0_out[11] = g9_reg[44] + g9_reg[45] + g9_reg[46] + g9_reg[47];
	assign v9c2l0_out[12] = g9_reg[48] + g9_reg[49] + g9_reg[50] + g9_reg[51];
	assign v9c2l0_out[13] = g9_reg[52] + g9_reg[53] + g9_reg[54] + g9_reg[55];
	assign v9c2l0_out[14] = g9_reg[56] + g9_reg[57] + g9_reg[58] + g9_reg[59];
	assign v9c2l0_out[15] = g9_reg[60] + g9_reg[61] + g9_reg[62];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 16; i = i + 1)
            v9c2l0[i] <= v9c2l0_out[i];
    end

	reg [3:0] v9c2l1 [0:7];
	logic [3:0] v9c2l1_out [0:7];
	assign v9c2l1_out[0] = v9c2l0[0] + v9c2l0[1];
	assign v9c2l1_out[1] = v9c2l0[2] + v9c2l0[3];
	assign v9c2l1_out[2] = v9c2l0[4] + v9c2l0[5];
	assign v9c2l1_out[3] = v9c2l0[6] + v9c2l0[7];
	assign v9c2l1_out[4] = v9c2l0[8] + v9c2l0[9];
	assign v9c2l1_out[5] = v9c2l0[10] + v9c2l0[11];
	assign v9c2l1_out[6] = v9c2l0[12] + v9c2l0[13];
	assign v9c2l1_out[7] = v9c2l0[14] + v9c2l0[15];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 8; i = i + 1)
            v9c2l1[i] <= v9c2l1_out[i];
    end

	reg [4:0] v9c2l2 [0:3];
	logic [4:0] v9c2l2_out [0:3];
	assign v9c2l2_out[0] = v9c2l1[0] + v9c2l1[1];
	assign v9c2l2_out[1] = v9c2l1[2] + v9c2l1[3];
	assign v9c2l2_out[2] = v9c2l1[4] + v9c2l1[5];
	assign v9c2l2_out[3] = v9c2l1[6] + v9c2l1[7];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 4; i = i + 1)
            v9c2l2[i] <= v9c2l2_out[i];
    end

	reg [5:0] v9c2l3 [0:1];
	logic [5:0] v9c2l3_out [0:1];
	assign v9c2l3_out[0] = v9c2l2[0] + v9c2l2[1];
	assign v9c2l3_out[1] = v9c2l2[2] + v9c2l2[3];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 2; i = i + 1)
            v9c2l3[i] <= v9c2l3_out[i];
    end

	reg [6:0] v9c2l4 [0:0];
	logic [6:0] v9c2l4_out [0:0];
	assign v9c2l4_out[0] = v9c2l3[0] + v9c2l3[1];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 1; i = i + 1)
            v9c2l4[i] <= v9c2l4_out[i];
    end

	reg [7:0] v9c2l5 [0:0];
	logic [7:0] v9c2l5_out [0:0];
	assign v9c2l5_out[0] = v9c2l4[0];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 1; i = i + 1)
            v9c2l5[i] <= v9c2l5_out[i];
    end

	assign val[9] = v9c2l5[0];
	
	// 0.5
	logic [0:19] g10;
	reg [0:19] g10_reg;
	assign g10[0] = l[1];
	assign g10[1] = l[19] || l[20] || l[23] || l[24] || l[30];
	assign g10[2] = l[33] || l[45];
	assign g10[3] = l[58] || l[60];
	assign g10[4] = l[66] || l[70] || l[74];
	assign g10[5] = l[92];
	assign g10[6] = l[105] || l[108];
	assign g10[7] = l[116];
	assign g10[8] = l[127];
	assign g10[9] = l[147];
	assign g10[10] = l[172];
	assign g10[11] = l[231];
	assign g10[12] = l[241];
	assign g10[13] = l[335];
	assign g10[14] = l[373];
	assign g10[15] = l[402];
	assign g10[16] = l[485];
	assign g10[17] = l[519];
	assign g10[18] = l[539];
	assign g10[19] = l[1058];
	
    always_ff @(posedge clk) begin
        g10_reg <= g10;
    end
    
	logic [2:0] v10c2l0_out [0:4];
	logic [2:0] v10c2l0 [0:4];
	assign v10c2l0_out[0] = g10_reg[0] + g10_reg[1] + g10_reg[2] + g10_reg[3];
	assign v10c2l0_out[1] = g10_reg[4] + g10_reg[5] + g10_reg[6] + g10_reg[7];
	assign v10c2l0_out[2] = g10_reg[8] + g10_reg[9] + g10_reg[10] + g10_reg[11];
	assign v10c2l0_out[3] = g10_reg[12] + g10_reg[13] + g10_reg[14] + g10_reg[15];
	assign v10c2l0_out[4] = g10_reg[16] + g10_reg[17] + g10_reg[18] + g10_reg[19];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 5; i = i + 1)
            v10c2l0[i] <= v10c2l0_out[i];
    end

	reg [3:0] v10c2l1 [0:2];
	logic [3:0] v10c2l1_out [0:2];
	assign v10c2l1_out[0] = v10c2l0[0] + v10c2l0[1];
	assign v10c2l1_out[1] = v10c2l0[2] + v10c2l0[3];
	assign v10c2l1_out[2] = v10c2l0[4];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 3; i = i + 1)
            v10c2l1[i] <= v10c2l1_out[i];
    end

	reg [4:0] v10c2l2 [0:1];
	logic [4:0] v10c2l2_out [0:1];
	assign v10c2l2_out[0] = v10c2l1[0] + v10c2l1[1];
	assign v10c2l2_out[1] = v10c2l1[2];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 2; i = i + 1)
            v10c2l2[i] <= v10c2l2_out[i];
    end

	reg [5:0] v10c2l3 [0:0];
	logic [5:0] v10c2l3_out [0:0];
	assign v10c2l3_out[0] = v10c2l2[0] + v10c2l2[1];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 1; i = i + 1)
            v10c2l3[i] <= v10c2l3_out[i];
    end

	reg [6:0] v10c2l4 [0:0];
	logic [6:0] v10c2l4_out [0:0];
	assign v10c2l4_out[0] = v10c2l3[0];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 1; i = i + 1)
            v10c2l4[i] <= v10c2l4_out[i];
    end

	reg [7:0] v10c2l5 [0:0];
	logic [7:0] v10c2l5_out [0:0];
	assign v10c2l5_out[0] = v10c2l4[0];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 1; i = i + 1)
            v10c2l5[i] <= v10c2l5_out[i];
    end

	assign val[10] = v10c2l5[0];
	
	// 1.0
	logic [0:3] g11;
	reg [0:3] g11_reg;
	assign g11[0] = l[4] || l[11] || l[14];
	assign g11[1] = l[69];
	assign g11[2] = l[123];
	assign g11[3] = l[321];
	
    always_ff @(posedge clk) begin
        g11_reg <= g11;
    end
    
	logic [2:0] v11c2l0_out [0:0];
	logic [2:0] v11c2l0 [0:0];
	assign v11c2l0_out[0] = g11_reg[0] + g11_reg[1] + g11_reg[2] + g11_reg[3];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 1; i = i + 1)
            v11c2l0[i] <= v11c2l0_out[i];
    end

	reg [3:0] v11c2l1 [0:0];
	logic [3:0] v11c2l1_out [0:0];
	assign v11c2l1_out[0] = v11c2l0[0];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 1; i = i + 1)
            v11c2l1[i] <= v11c2l1_out[i];
    end

	reg [4:0] v11c2l2 [0:0];
	logic [4:0] v11c2l2_out [0:0];
	assign v11c2l2_out[0] = v11c2l1[0];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 1; i = i + 1)
            v11c2l2[i] <= v11c2l2_out[i];
    end

	reg [5:0] v11c2l3 [0:0];
	logic [5:0] v11c2l3_out [0:0];
	assign v11c2l3_out[0] = v11c2l2[0];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 1; i = i + 1)
            v11c2l3[i] <= v11c2l3_out[i];
    end

	reg [6:0] v11c2l4 [0:0];
	logic [6:0] v11c2l4_out [0:0];
	assign v11c2l4_out[0] = v11c2l3[0];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 1; i = i + 1)
            v11c2l4[i] <= v11c2l4_out[i];
    end

	reg [7:0] v11c2l5 [0:0];
	logic [7:0] v11c2l5_out [0:0];
	assign v11c2l5_out[0] = v11c2l4[0];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 1; i = i + 1)
            v11c2l5[i] <= v11c2l5_out[i];
    end

	assign val[11] = v11c2l5[0];
	
	// 2.0
	logic [0:0] g12;
	reg [0:0] g12_reg;
	assign g12[0] = l[2] || l[8];
	
    always_ff @(posedge clk) begin
        g12_reg <= g12;
    end
    
	logic [2:0] v12c2l0_out [0:0];
	logic [2:0] v12c2l0 [0:0];
	assign v12c2l0_out[0] = g12_reg[0];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 1; i = i + 1)
            v12c2l0[i] <= v12c2l0_out[i];
    end

	reg [3:0] v12c2l1 [0:0];
	logic [3:0] v12c2l1_out [0:0];
	assign v12c2l1_out[0] = v12c2l0[0];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 1; i = i + 1)
            v12c2l1[i] <= v12c2l1_out[i];
    end

	reg [4:0] v12c2l2 [0:0];
	logic [4:0] v12c2l2_out [0:0];
	assign v12c2l2_out[0] = v12c2l1[0];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 1; i = i + 1)
            v12c2l2[i] <= v12c2l2_out[i];
    end

	reg [5:0] v12c2l3 [0:0];
	logic [5:0] v12c2l3_out [0:0];
	assign v12c2l3_out[0] = v12c2l2[0];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 1; i = i + 1)
            v12c2l3[i] <= v12c2l3_out[i];
    end

	reg [6:0] v12c2l4 [0:0];
	logic [6:0] v12c2l4_out [0:0];
	assign v12c2l4_out[0] = v12c2l3[0];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 1; i = i + 1)
            v12c2l4[i] <= v12c2l4_out[i];
    end

	reg [7:0] v12c2l5 [0:0];
	logic [7:0] v12c2l5_out [0:0];
	assign v12c2l5_out[0] = v12c2l4[0];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 1; i = i + 1)
            v12c2l5[i] <= v12c2l5_out[i];
    end

	assign val[12] = v12c2l5[0];
	
endmodule


module leaf_counter_3(input logic clk, input logic [0:1472] l, output logic [7:0] val [0:12]);
    integer i;
	// -0.25
	logic [0:48] g0;
	reg [0:48] g0_reg;
	assign g0[0] = l[1];
	assign g0[1] = l[32];
	assign g0[2] = l[70];
	assign g0[3] = l[102];
	assign g0[4] = l[125];
	assign g0[5] = l[149];
	assign g0[6] = l[185];
	assign g0[7] = l[202];
	assign g0[8] = l[218];
	assign g0[9] = l[251] || l[253];
	assign g0[10] = l[263] || l[264] || l[268];
	assign g0[11] = l[282];
	assign g0[12] = l[301];
	assign g0[13] = l[307] || l[311];
	assign g0[14] = l[345];
	assign g0[15] = l[362] || l[364];
	assign g0[16] = l[373] || l[374];
	assign g0[17] = l[386] || l[391];
	assign g0[18] = l[448];
	assign g0[19] = l[477];
	assign g0[20] = l[494];
	assign g0[21] = l[510];
	assign g0[22] = l[541];
	assign g0[23] = l[557];
	assign g0[24] = l[568];
	assign g0[25] = l[612];
	assign g0[26] = l[645];
	assign g0[27] = l[658] || l[661];
	assign g0[28] = l[690];
	assign g0[29] = l[696];
	assign g0[30] = l[741] || l[745];
	assign g0[31] = l[751];
	assign g0[32] = l[790];
	assign g0[33] = l[809];
	assign g0[34] = l[815];
	assign g0[35] = l[829];
	assign g0[36] = l[863];
	assign g0[37] = l[983] || l[987];
	assign g0[38] = l[1000];
	assign g0[39] = l[1014];
	assign g0[40] = l[1060];
	assign g0[41] = l[1102];
	assign g0[42] = l[1120];
	assign g0[43] = l[1153];
	assign g0[44] = l[1200];
	assign g0[45] = l[1253];
	assign g0[46] = l[1263];
	assign g0[47] = l[1280];
	assign g0[48] = l[1410];
	
    always_ff @(posedge clk) begin
        g0_reg <= g0;
    end
    
	logic [2:0] v0c3l0_out [0:12];
	logic [2:0] v0c3l0 [0:12];
	assign v0c3l0_out[0] = g0_reg[0] + g0_reg[1] + g0_reg[2] + g0_reg[3];
	assign v0c3l0_out[1] = g0_reg[4] + g0_reg[5] + g0_reg[6] + g0_reg[7];
	assign v0c3l0_out[2] = g0_reg[8] + g0_reg[9] + g0_reg[10] + g0_reg[11];
	assign v0c3l0_out[3] = g0_reg[12] + g0_reg[13] + g0_reg[14] + g0_reg[15];
	assign v0c3l0_out[4] = g0_reg[16] + g0_reg[17] + g0_reg[18] + g0_reg[19];
	assign v0c3l0_out[5] = g0_reg[20] + g0_reg[21] + g0_reg[22] + g0_reg[23];
	assign v0c3l0_out[6] = g0_reg[24] + g0_reg[25] + g0_reg[26] + g0_reg[27];
	assign v0c3l0_out[7] = g0_reg[28] + g0_reg[29] + g0_reg[30] + g0_reg[31];
	assign v0c3l0_out[8] = g0_reg[32] + g0_reg[33] + g0_reg[34] + g0_reg[35];
	assign v0c3l0_out[9] = g0_reg[36] + g0_reg[37] + g0_reg[38] + g0_reg[39];
	assign v0c3l0_out[10] = g0_reg[40] + g0_reg[41] + g0_reg[42] + g0_reg[43];
	assign v0c3l0_out[11] = g0_reg[44] + g0_reg[45] + g0_reg[46] + g0_reg[47];
	assign v0c3l0_out[12] = g0_reg[48];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 13; i = i + 1)
            v0c3l0[i] <= v0c3l0_out[i];
    end

	reg [3:0] v0c3l1 [0:6];
	logic [3:0] v0c3l1_out [0:6];
	assign v0c3l1_out[0] = v0c3l0[0] + v0c3l0[1];
	assign v0c3l1_out[1] = v0c3l0[2] + v0c3l0[3];
	assign v0c3l1_out[2] = v0c3l0[4] + v0c3l0[5];
	assign v0c3l1_out[3] = v0c3l0[6] + v0c3l0[7];
	assign v0c3l1_out[4] = v0c3l0[8] + v0c3l0[9];
	assign v0c3l1_out[5] = v0c3l0[10] + v0c3l0[11];
	assign v0c3l1_out[6] = v0c3l0[12];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 7; i = i + 1)
            v0c3l1[i] <= v0c3l1_out[i];
    end

	reg [4:0] v0c3l2 [0:3];
	logic [4:0] v0c3l2_out [0:3];
	assign v0c3l2_out[0] = v0c3l1[0] + v0c3l1[1];
	assign v0c3l2_out[1] = v0c3l1[2] + v0c3l1[3];
	assign v0c3l2_out[2] = v0c3l1[4] + v0c3l1[5];
	assign v0c3l2_out[3] = v0c3l1[6];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 4; i = i + 1)
            v0c3l2[i] <= v0c3l2_out[i];
    end

	reg [5:0] v0c3l3 [0:1];
	logic [5:0] v0c3l3_out [0:1];
	assign v0c3l3_out[0] = v0c3l2[0] + v0c3l2[1];
	assign v0c3l3_out[1] = v0c3l2[2] + v0c3l2[3];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 2; i = i + 1)
            v0c3l3[i] <= v0c3l3_out[i];
    end

	reg [6:0] v0c3l4 [0:0];
	logic [6:0] v0c3l4_out [0:0];
	assign v0c3l4_out[0] = v0c3l3[0] + v0c3l3[1];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 1; i = i + 1)
            v0c3l4[i] <= v0c3l4_out[i];
    end

	reg [7:0] v0c3l5 [0:0];
	logic [7:0] v0c3l5_out [0:0];
	assign v0c3l5_out[0] = v0c3l4[0];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 1; i = i + 1)
            v0c3l5[i] <= v0c3l5_out[i];
    end

	assign val[0] = v0c3l5[0];
	
	// -0.125
	logic [0:96] g1;
	reg [0:96] g1_reg;
	assign g1[0] = l[0] || l[2] || l[4] || l[7] || l[13] || l[14];
	assign g1[1] = l[16] || l[19] || l[20] || l[23] || l[26] || l[28] || l[31];
	assign g1[2] = l[33] || l[34] || l[37] || l[38] || l[43] || l[46];
	assign g1[3] = l[51] || l[52] || l[56] || l[57] || l[59] || l[60] || l[63];
	assign g1[4] = l[65] || l[66] || l[68] || l[72] || l[74] || l[76] || l[79];
	assign g1[5] = l[80] || l[85] || l[86] || l[92] || l[95];
	assign g1[6] = l[98] || l[100] || l[103] || l[104] || l[105] || l[107] || l[108];
	assign g1[7] = l[112] || l[114] || l[117] || l[123] || l[127];
	assign g1[8] = l[128] || l[131] || l[136] || l[139] || l[142];
	assign g1[9] = l[146] || l[147] || l[151] || l[155] || l[157];
	assign g1[10] = l[163] || l[166] || l[170] || l[172];
	assign g1[11] = l[175] || l[183] || l[186] || l[188] || l[189];
	assign g1[12] = l[195] || l[199] || l[201] || l[203] || l[206];
	assign g1[13] = l[208] || l[210] || l[212] || l[215] || l[216] || l[221];
	assign g1[14] = l[222] || l[226] || l[228] || l[233];
	assign g1[15] = l[245] || l[247] || l[248];
	assign g1[16] = l[255] || l[260] || l[267];
	assign g1[17] = l[271] || l[272] || l[275] || l[278] || l[281] || l[285];
	assign g1[18] = l[287] || l[299];
	assign g1[19] = l[305] || l[312] || l[314];
	assign g1[20] = l[321] || l[322] || l[325] || l[329];
	assign g1[21] = l[337] || l[338] || l[342] || l[347];
	assign g1[22] = l[349] || l[353] || l[358];
	assign g1[23] = l[383] || l[384] || l[388] || l[389];
	assign g1[24] = l[394] || l[399] || l[401] || l[404] || l[406] || l[407];
	assign g1[25] = l[413] || l[421];
	assign g1[26] = l[427] || l[430] || l[436] || l[437];
	assign g1[27] = l[444] || l[447] || l[450];
	assign g1[28] = l[456] || l[458] || l[461] || l[467];
	assign g1[29] = l[470] || l[476] || l[479] || l[480] || l[483];
	assign g1[30] = l[489] || l[493] || l[498];
	assign g1[31] = l[501] || l[505] || l[508];
	assign g1[32] = l[520] || l[522] || l[525] || l[528];
	assign g1[33] = l[535];
	assign g1[34] = l[552];
	assign g1[35] = l[562] || l[570];
	assign g1[36] = l[576] || l[580] || l[584];
	assign g1[37] = l[592] || l[596] || l[598] || l[601];
	assign g1[38] = l[607] || l[608] || l[615];
	assign g1[39] = l[620] || l[622] || l[623];
	assign g1[40] = l[637] || l[647];
	assign g1[41] = l[650] || l[655] || l[657] || l[659];
	assign g1[42] = l[664] || l[665] || l[668] || l[675];
	assign g1[43] = l[683] || l[686];
	assign g1[44] = l[699];
	assign g1[45] = l[704] || l[708] || l[713];
	assign g1[46] = l[730] || l[731];
	assign g1[47] = l[738] || l[742];
	assign g1[48] = l[749] || l[758];
	assign g1[49] = l[771] || l[774] || l[776];
	assign g1[50] = l[783] || l[786] || l[792] || l[793];
	assign g1[51] = l[798] || l[800] || l[802] || l[804] || l[805] || l[807] || l[810];
	assign g1[52] = l[817] || l[821];
	assign g1[53] = l[828] || l[831];
	assign g1[54] = l[845] || l[848] || l[852] || l[853];
	assign g1[55] = l[857] || l[864];
	assign g1[56] = l[870] || l[872] || l[875] || l[879];
	assign g1[57] = l[883] || l[887] || l[888] || l[893];
	assign g1[58] = l[899] || l[901] || l[905] || l[908];
	assign g1[59] = l[918] || l[922] || l[924];
	assign g1[60] = l[929] || l[932] || l[933];
	assign g1[61] = l[945];
	assign g1[62] = l[953] || l[954];
	assign g1[63] = l[963] || l[966] || l[967] || l[970] || l[971] || l[975];
	assign g1[64] = l[989];
	assign g1[65] = l[991] || l[999] || l[1004];
	assign g1[66] = l[1008] || l[1015];
	assign g1[67] = l[1021] || l[1026] || l[1030] || l[1034];
	assign g1[68] = l[1035] || l[1040] || l[1043];
	assign g1[69] = l[1064];
	assign g1[70] = l[1069] || l[1070] || l[1074] || l[1079];
	assign g1[71] = l[1083] || l[1088] || l[1090] || l[1094] || l[1095];
	assign g1[72] = l[1107] || l[1112];
	assign g1[73] = l[1123];
	assign g1[74] = l[1147] || l[1152] || l[1155];
	assign g1[75] = l[1164] || l[1166] || l[1167] || l[1170];
	assign g1[76] = l[1174] || l[1175] || l[1179] || l[1184] || l[1187];
	assign g1[77] = l[1189] || l[1190] || l[1197];
	assign g1[78] = l[1211] || l[1214];
	assign g1[79] = l[1222] || l[1223];
	assign g1[80] = l[1226] || l[1233];
	assign g1[81] = l[1247] || l[1252];
	assign g1[82] = l[1262];
	assign g1[83] = l[1276] || l[1281];
	assign g1[84] = l[1290];
	assign g1[85] = l[1300] || l[1304] || l[1309];
	assign g1[86] = l[1312] || l[1314] || l[1319];
	assign g1[87] = l[1329] || l[1332];
	assign g1[88] = l[1350];
	assign g1[89] = l[1356] || l[1359] || l[1363];
	assign g1[90] = l[1371] || l[1373] || l[1374] || l[1376];
	assign g1[91] = l[1380] || l[1382] || l[1386] || l[1388];
	assign g1[92] = l[1399] || l[1402] || l[1405];
	assign g1[93] = l[1420] || l[1424];
	assign g1[94] = l[1429] || l[1434] || l[1437];
	assign g1[95] = l[1444] || l[1446];
	assign g1[96] = l[1469];
	
    always_ff @(posedge clk) begin
        g1_reg <= g1;
    end
    
	logic [2:0] v1c3l0_out [0:24];
	logic [2:0] v1c3l0 [0:24];
	assign v1c3l0_out[0] = g1_reg[0] + g1_reg[1] + g1_reg[2] + g1_reg[3];
	assign v1c3l0_out[1] = g1_reg[4] + g1_reg[5] + g1_reg[6] + g1_reg[7];
	assign v1c3l0_out[2] = g1_reg[8] + g1_reg[9] + g1_reg[10] + g1_reg[11];
	assign v1c3l0_out[3] = g1_reg[12] + g1_reg[13] + g1_reg[14] + g1_reg[15];
	assign v1c3l0_out[4] = g1_reg[16] + g1_reg[17] + g1_reg[18] + g1_reg[19];
	assign v1c3l0_out[5] = g1_reg[20] + g1_reg[21] + g1_reg[22] + g1_reg[23];
	assign v1c3l0_out[6] = g1_reg[24] + g1_reg[25] + g1_reg[26] + g1_reg[27];
	assign v1c3l0_out[7] = g1_reg[28] + g1_reg[29] + g1_reg[30] + g1_reg[31];
	assign v1c3l0_out[8] = g1_reg[32] + g1_reg[33] + g1_reg[34] + g1_reg[35];
	assign v1c3l0_out[9] = g1_reg[36] + g1_reg[37] + g1_reg[38] + g1_reg[39];
	assign v1c3l0_out[10] = g1_reg[40] + g1_reg[41] + g1_reg[42] + g1_reg[43];
	assign v1c3l0_out[11] = g1_reg[44] + g1_reg[45] + g1_reg[46] + g1_reg[47];
	assign v1c3l0_out[12] = g1_reg[48] + g1_reg[49] + g1_reg[50] + g1_reg[51];
	assign v1c3l0_out[13] = g1_reg[52] + g1_reg[53] + g1_reg[54] + g1_reg[55];
	assign v1c3l0_out[14] = g1_reg[56] + g1_reg[57] + g1_reg[58] + g1_reg[59];
	assign v1c3l0_out[15] = g1_reg[60] + g1_reg[61] + g1_reg[62] + g1_reg[63];
	assign v1c3l0_out[16] = g1_reg[64] + g1_reg[65] + g1_reg[66] + g1_reg[67];
	assign v1c3l0_out[17] = g1_reg[68] + g1_reg[69] + g1_reg[70] + g1_reg[71];
	assign v1c3l0_out[18] = g1_reg[72] + g1_reg[73] + g1_reg[74] + g1_reg[75];
	assign v1c3l0_out[19] = g1_reg[76] + g1_reg[77] + g1_reg[78] + g1_reg[79];
	assign v1c3l0_out[20] = g1_reg[80] + g1_reg[81] + g1_reg[82] + g1_reg[83];
	assign v1c3l0_out[21] = g1_reg[84] + g1_reg[85] + g1_reg[86] + g1_reg[87];
	assign v1c3l0_out[22] = g1_reg[88] + g1_reg[89] + g1_reg[90] + g1_reg[91];
	assign v1c3l0_out[23] = g1_reg[92] + g1_reg[93] + g1_reg[94] + g1_reg[95];
	assign v1c3l0_out[24] = g1_reg[96];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 25; i = i + 1)
            v1c3l0[i] <= v1c3l0_out[i];
    end

	reg [3:0] v1c3l1 [0:12];
	logic [3:0] v1c3l1_out [0:12];
	assign v1c3l1_out[0] = v1c3l0[0] + v1c3l0[1];
	assign v1c3l1_out[1] = v1c3l0[2] + v1c3l0[3];
	assign v1c3l1_out[2] = v1c3l0[4] + v1c3l0[5];
	assign v1c3l1_out[3] = v1c3l0[6] + v1c3l0[7];
	assign v1c3l1_out[4] = v1c3l0[8] + v1c3l0[9];
	assign v1c3l1_out[5] = v1c3l0[10] + v1c3l0[11];
	assign v1c3l1_out[6] = v1c3l0[12] + v1c3l0[13];
	assign v1c3l1_out[7] = v1c3l0[14] + v1c3l0[15];
	assign v1c3l1_out[8] = v1c3l0[16] + v1c3l0[17];
	assign v1c3l1_out[9] = v1c3l0[18] + v1c3l0[19];
	assign v1c3l1_out[10] = v1c3l0[20] + v1c3l0[21];
	assign v1c3l1_out[11] = v1c3l0[22] + v1c3l0[23];
	assign v1c3l1_out[12] = v1c3l0[24];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 13; i = i + 1)
            v1c3l1[i] <= v1c3l1_out[i];
    end

	reg [4:0] v1c3l2 [0:6];
	logic [4:0] v1c3l2_out [0:6];
	assign v1c3l2_out[0] = v1c3l1[0] + v1c3l1[1];
	assign v1c3l2_out[1] = v1c3l1[2] + v1c3l1[3];
	assign v1c3l2_out[2] = v1c3l1[4] + v1c3l1[5];
	assign v1c3l2_out[3] = v1c3l1[6] + v1c3l1[7];
	assign v1c3l2_out[4] = v1c3l1[8] + v1c3l1[9];
	assign v1c3l2_out[5] = v1c3l1[10] + v1c3l1[11];
	assign v1c3l2_out[6] = v1c3l1[12];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 7; i = i + 1)
            v1c3l2[i] <= v1c3l2_out[i];
    end

	reg [5:0] v1c3l3 [0:3];
	logic [5:0] v1c3l3_out [0:3];
	assign v1c3l3_out[0] = v1c3l2[0] + v1c3l2[1];
	assign v1c3l3_out[1] = v1c3l2[2] + v1c3l2[3];
	assign v1c3l3_out[2] = v1c3l2[4] + v1c3l2[5];
	assign v1c3l3_out[3] = v1c3l2[6];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 4; i = i + 1)
            v1c3l3[i] <= v1c3l3_out[i];
    end

	reg [6:0] v1c3l4 [0:1];
	logic [6:0] v1c3l4_out [0:1];
	assign v1c3l4_out[0] = v1c3l3[0] + v1c3l3[1];
	assign v1c3l4_out[1] = v1c3l3[2] + v1c3l3[3];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 2; i = i + 1)
            v1c3l4[i] <= v1c3l4_out[i];
    end

	reg [7:0] v1c3l5 [0:0];
	logic [7:0] v1c3l5_out [0:0];
	assign v1c3l5_out[0] = v1c3l4[0] + v1c3l4[1];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 1; i = i + 1)
            v1c3l5[i] <= v1c3l5_out[i];
    end

	assign val[1] = v1c3l5[0];
	
	// -0.0625
	logic [0:87] g2;
	reg [0:87] g2_reg;
	assign g2[0] = l[11];
	assign g2[1] = l[41] || l[44];
	assign g2[2] = l[55];
	assign g2[3] = l[71] || l[77];
	assign g2[4] = l[83];
	assign g2[5] = l[110];
	assign g2[6] = l[119];
	assign g2[7] = l[137] || l[140];
	assign g2[8] = l[144] || l[150] || l[154];
	assign g2[9] = l[159] || l[162] || l[168];
	assign g2[10] = l[177];
	assign g2[11] = l[191] || l[194];
	assign g2[12] = l[213];
	assign g2[13] = l[225] || l[230] || l[234];
	assign g2[14] = l[238] || l[250];
	assign g2[15] = l[262];
	assign g2[16] = l[283];
	assign g2[17] = l[286] || l[292] || l[295] || l[298];
	assign g2[18] = l[317];
	assign g2[19] = l[318] || l[331];
	assign g2[20] = l[356];
	assign g2[21] = l[368] || l[369] || l[371] || l[376];
	assign g2[22] = l[381] || l[387];
	assign g2[23] = l[398];
	assign g2[24] = l[409] || l[424];
	assign g2[25] = l[439] || l[443];
	assign g2[26] = l[455];
	assign g2[27] = l[495] || l[499];
	assign g2[28] = l[503] || l[507] || l[511];
	assign g2[29] = l[514] || l[526];
	assign g2[30] = l[538];
	assign g2[31] = l[546] || l[549] || l[551] || l[558];
	assign g2[32] = l[561] || l[567] || l[571];
	assign g2[33] = l[573];
	assign g2[34] = l[588] || l[603];
	assign g2[35] = l[611];
	assign g2[36] = l[617] || l[630];
	assign g2[37] = l[633] || l[635] || l[638] || l[640] || l[641];
	assign g2[38] = l[648] || l[662];
	assign g2[39] = l[670];
	assign g2[40] = l[682] || l[685];
	assign g2[41] = l[711] || l[716] || l[718];
	assign g2[42] = l[720] || l[725];
	assign g2[43] = l[736];
	assign g2[44] = l[754];
	assign g2[45] = l[764] || l[768];
	assign g2[46] = l[781];
	assign g2[47] = l[811];
	assign g2[48] = l[837];
	assign g2[49] = l[839];
	assign g2[50] = l[860];
	assign g2[51] = l[910];
	assign g2[52] = l[912] || l[920];
	assign g2[53] = l[930] || l[936];
	assign g2[54] = l[942] || l[943] || l[946] || l[947];
	assign g2[55] = l[958];
	assign g2[56] = l[978] || l[979] || l[986];
	assign g2[57] = l[993] || l[995];
	assign g2[58] = l[1010] || l[1018];
	assign g2[59] = l[1031];
	assign g2[60] = l[1042] || l[1045] || l[1050];
	assign g2[61] = l[1051] || l[1054] || l[1061] || l[1062];
	assign g2[62] = l[1089] || l[1092];
	assign g2[63] = l[1105] || l[1106] || l[1115];
	assign g2[64] = l[1126];
	assign g2[65] = l[1136];
	assign g2[66] = l[1162];
	assign g2[67] = l[1178];
	assign g2[68] = l[1193] || l[1194];
	assign g2[69] = l[1207] || l[1213] || l[1215] || l[1217];
	assign g2[70] = l[1219];
	assign g2[71] = l[1229] || l[1230] || l[1234] || l[1239];
	assign g2[72] = l[1245] || l[1249] || l[1250] || l[1256];
	assign g2[73] = l[1257] || l[1264] || l[1265];
	assign g2[74] = l[1283];
	assign g2[75] = l[1285] || l[1289] || l[1292];
	assign g2[76] = l[1298] || l[1305];
	assign g2[77] = l[1316] || l[1325];
	assign g2[78] = l[1334] || l[1337] || l[1338] || l[1340];
	assign g2[79] = l[1343] || l[1347];
	assign g2[80] = l[1355] || l[1360];
	assign g2[81] = l[1365];
	assign g2[82] = l[1394];
	assign g2[83] = l[1397];
	assign g2[84] = l[1412];
	assign g2[85] = l[1426];
	assign g2[86] = l[1442] || l[1451] || l[1453] || l[1456];
	assign g2[87] = l[1457] || l[1460] || l[1465] || l[1472];
	
    always_ff @(posedge clk) begin
        g2_reg <= g2;
    end
    
	logic [2:0] v2c3l0_out [0:21];
	logic [2:0] v2c3l0 [0:21];
	assign v2c3l0_out[0] = g2_reg[0] + g2_reg[1] + g2_reg[2] + g2_reg[3];
	assign v2c3l0_out[1] = g2_reg[4] + g2_reg[5] + g2_reg[6] + g2_reg[7];
	assign v2c3l0_out[2] = g2_reg[8] + g2_reg[9] + g2_reg[10] + g2_reg[11];
	assign v2c3l0_out[3] = g2_reg[12] + g2_reg[13] + g2_reg[14] + g2_reg[15];
	assign v2c3l0_out[4] = g2_reg[16] + g2_reg[17] + g2_reg[18] + g2_reg[19];
	assign v2c3l0_out[5] = g2_reg[20] + g2_reg[21] + g2_reg[22] + g2_reg[23];
	assign v2c3l0_out[6] = g2_reg[24] + g2_reg[25] + g2_reg[26] + g2_reg[27];
	assign v2c3l0_out[7] = g2_reg[28] + g2_reg[29] + g2_reg[30] + g2_reg[31];
	assign v2c3l0_out[8] = g2_reg[32] + g2_reg[33] + g2_reg[34] + g2_reg[35];
	assign v2c3l0_out[9] = g2_reg[36] + g2_reg[37] + g2_reg[38] + g2_reg[39];
	assign v2c3l0_out[10] = g2_reg[40] + g2_reg[41] + g2_reg[42] + g2_reg[43];
	assign v2c3l0_out[11] = g2_reg[44] + g2_reg[45] + g2_reg[46] + g2_reg[47];
	assign v2c3l0_out[12] = g2_reg[48] + g2_reg[49] + g2_reg[50] + g2_reg[51];
	assign v2c3l0_out[13] = g2_reg[52] + g2_reg[53] + g2_reg[54] + g2_reg[55];
	assign v2c3l0_out[14] = g2_reg[56] + g2_reg[57] + g2_reg[58] + g2_reg[59];
	assign v2c3l0_out[15] = g2_reg[60] + g2_reg[61] + g2_reg[62] + g2_reg[63];
	assign v2c3l0_out[16] = g2_reg[64] + g2_reg[65] + g2_reg[66] + g2_reg[67];
	assign v2c3l0_out[17] = g2_reg[68] + g2_reg[69] + g2_reg[70] + g2_reg[71];
	assign v2c3l0_out[18] = g2_reg[72] + g2_reg[73] + g2_reg[74] + g2_reg[75];
	assign v2c3l0_out[19] = g2_reg[76] + g2_reg[77] + g2_reg[78] + g2_reg[79];
	assign v2c3l0_out[20] = g2_reg[80] + g2_reg[81] + g2_reg[82] + g2_reg[83];
	assign v2c3l0_out[21] = g2_reg[84] + g2_reg[85] + g2_reg[86] + g2_reg[87];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 22; i = i + 1)
            v2c3l0[i] <= v2c3l0_out[i];
    end

	reg [3:0] v2c3l1 [0:10];
	logic [3:0] v2c3l1_out [0:10];
	assign v2c3l1_out[0] = v2c3l0[0] + v2c3l0[1];
	assign v2c3l1_out[1] = v2c3l0[2] + v2c3l0[3];
	assign v2c3l1_out[2] = v2c3l0[4] + v2c3l0[5];
	assign v2c3l1_out[3] = v2c3l0[6] + v2c3l0[7];
	assign v2c3l1_out[4] = v2c3l0[8] + v2c3l0[9];
	assign v2c3l1_out[5] = v2c3l0[10] + v2c3l0[11];
	assign v2c3l1_out[6] = v2c3l0[12] + v2c3l0[13];
	assign v2c3l1_out[7] = v2c3l0[14] + v2c3l0[15];
	assign v2c3l1_out[8] = v2c3l0[16] + v2c3l0[17];
	assign v2c3l1_out[9] = v2c3l0[18] + v2c3l0[19];
	assign v2c3l1_out[10] = v2c3l0[20] + v2c3l0[21];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 11; i = i + 1)
            v2c3l1[i] <= v2c3l1_out[i];
    end

	reg [4:0] v2c3l2 [0:5];
	logic [4:0] v2c3l2_out [0:5];
	assign v2c3l2_out[0] = v2c3l1[0] + v2c3l1[1];
	assign v2c3l2_out[1] = v2c3l1[2] + v2c3l1[3];
	assign v2c3l2_out[2] = v2c3l1[4] + v2c3l1[5];
	assign v2c3l2_out[3] = v2c3l1[6] + v2c3l1[7];
	assign v2c3l2_out[4] = v2c3l1[8] + v2c3l1[9];
	assign v2c3l2_out[5] = v2c3l1[10];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 6; i = i + 1)
            v2c3l2[i] <= v2c3l2_out[i];
    end

	reg [5:0] v2c3l3 [0:2];
	logic [5:0] v2c3l3_out [0:2];
	assign v2c3l3_out[0] = v2c3l2[0] + v2c3l2[1];
	assign v2c3l3_out[1] = v2c3l2[2] + v2c3l2[3];
	assign v2c3l3_out[2] = v2c3l2[4] + v2c3l2[5];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 3; i = i + 1)
            v2c3l3[i] <= v2c3l3_out[i];
    end

	reg [6:0] v2c3l4 [0:1];
	logic [6:0] v2c3l4_out [0:1];
	assign v2c3l4_out[0] = v2c3l3[0] + v2c3l3[1];
	assign v2c3l4_out[1] = v2c3l3[2];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 2; i = i + 1)
            v2c3l4[i] <= v2c3l4_out[i];
    end

	reg [7:0] v2c3l5 [0:0];
	logic [7:0] v2c3l5_out [0:0];
	assign v2c3l5_out[0] = v2c3l4[0] + v2c3l4[1];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 1; i = i + 1)
            v2c3l5[i] <= v2c3l5_out[i];
    end

	assign val[2] = v2c3l5[0];
	
	// -0.03125
	logic [0:61] g3;
	reg [0:61] g3_reg;
	assign g3[0] = l[47];
	assign g3[1] = l[53];
	assign g3[2] = l[88];
	assign g3[3] = l[120];
	assign g3[4] = l[179];
	assign g3[5] = l[217];
	assign g3[6] = l[288] || l[290];
	assign g3[7] = l[302];
	assign g3[8] = l[357] || l[363];
	assign g3[9] = l[365];
	assign g3[10] = l[378];
	assign g3[11] = l[396] || l[405];
	assign g3[12] = l[429];
	assign g3[13] = l[453];
	assign g3[14] = l[462] || l[466];
	assign g3[15] = l[484];
	assign g3[16] = l[542];
	assign g3[17] = l[556];
	assign g3[18] = l[600];
	assign g3[19] = l[627] || l[632];
	assign g3[20] = l[688];
	assign g3[21] = l[692] || l[697];
	assign g3[22] = l[728];
	assign g3[23] = l[744] || l[747];
	assign g3[24] = l[752];
	assign g3[25] = l[765] || l[777];
	assign g3[26] = l[825];
	assign g3[27] = l[841] || l[844] || l[854];
	assign g3[28] = l[862];
	assign g3[29] = l[881] || l[890] || l[892] || l[894];
	assign g3[30] = l[896];
	assign g3[31] = l[915] || l[917] || l[923];
	assign g3[32] = l[938];
	assign g3[33] = l[956];
	assign g3[34] = l[961];
	assign g3[35] = l[1005];
	assign g3[36] = l[1033];
	assign g3[37] = l[1036];
	assign g3[38] = l[1058];
	assign g3[39] = l[1066] || l[1081];
	assign g3[40] = l[1100];
	assign g3[41] = l[1108] || l[1111];
	assign g3[42] = l[1119] || l[1121] || l[1129];
	assign g3[43] = l[1130] || l[1133];
	assign g3[44] = l[1141] || l[1154];
	assign g3[45] = l[1181] || l[1183];
	assign g3[46] = l[1202];
	assign g3[47] = l[1221];
	assign g3[48] = l[1232] || l[1236] || l[1240];
	assign g3[49] = l[1242] || l[1254];
	assign g3[50] = l[1272];
	assign g3[51] = l[1287] || l[1291];
	assign g3[52] = l[1311];
	assign g3[53] = l[1326];
	assign g3[54] = l[1358] || l[1362] || l[1364];
	assign g3[55] = l[1378];
	assign g3[56] = l[1381] || l[1389];
	assign g3[57] = l[1403] || l[1406];
	assign g3[58] = l[1414] || l[1423];
	assign g3[59] = l[1436] || l[1440];
	assign g3[60] = l[1447];
	assign g3[61] = l[1463];
	
    always_ff @(posedge clk) begin
        g3_reg <= g3;
    end
    
	logic [2:0] v3c3l0_out [0:15];
	logic [2:0] v3c3l0 [0:15];
	assign v3c3l0_out[0] = g3_reg[0] + g3_reg[1] + g3_reg[2] + g3_reg[3];
	assign v3c3l0_out[1] = g3_reg[4] + g3_reg[5] + g3_reg[6] + g3_reg[7];
	assign v3c3l0_out[2] = g3_reg[8] + g3_reg[9] + g3_reg[10] + g3_reg[11];
	assign v3c3l0_out[3] = g3_reg[12] + g3_reg[13] + g3_reg[14] + g3_reg[15];
	assign v3c3l0_out[4] = g3_reg[16] + g3_reg[17] + g3_reg[18] + g3_reg[19];
	assign v3c3l0_out[5] = g3_reg[20] + g3_reg[21] + g3_reg[22] + g3_reg[23];
	assign v3c3l0_out[6] = g3_reg[24] + g3_reg[25] + g3_reg[26] + g3_reg[27];
	assign v3c3l0_out[7] = g3_reg[28] + g3_reg[29] + g3_reg[30] + g3_reg[31];
	assign v3c3l0_out[8] = g3_reg[32] + g3_reg[33] + g3_reg[34] + g3_reg[35];
	assign v3c3l0_out[9] = g3_reg[36] + g3_reg[37] + g3_reg[38] + g3_reg[39];
	assign v3c3l0_out[10] = g3_reg[40] + g3_reg[41] + g3_reg[42] + g3_reg[43];
	assign v3c3l0_out[11] = g3_reg[44] + g3_reg[45] + g3_reg[46] + g3_reg[47];
	assign v3c3l0_out[12] = g3_reg[48] + g3_reg[49] + g3_reg[50] + g3_reg[51];
	assign v3c3l0_out[13] = g3_reg[52] + g3_reg[53] + g3_reg[54] + g3_reg[55];
	assign v3c3l0_out[14] = g3_reg[56] + g3_reg[57] + g3_reg[58] + g3_reg[59];
	assign v3c3l0_out[15] = g3_reg[60] + g3_reg[61];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 16; i = i + 1)
            v3c3l0[i] <= v3c3l0_out[i];
    end

	reg [3:0] v3c3l1 [0:7];
	logic [3:0] v3c3l1_out [0:7];
	assign v3c3l1_out[0] = v3c3l0[0] + v3c3l0[1];
	assign v3c3l1_out[1] = v3c3l0[2] + v3c3l0[3];
	assign v3c3l1_out[2] = v3c3l0[4] + v3c3l0[5];
	assign v3c3l1_out[3] = v3c3l0[6] + v3c3l0[7];
	assign v3c3l1_out[4] = v3c3l0[8] + v3c3l0[9];
	assign v3c3l1_out[5] = v3c3l0[10] + v3c3l0[11];
	assign v3c3l1_out[6] = v3c3l0[12] + v3c3l0[13];
	assign v3c3l1_out[7] = v3c3l0[14] + v3c3l0[15];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 8; i = i + 1)
            v3c3l1[i] <= v3c3l1_out[i];
    end

	reg [4:0] v3c3l2 [0:3];
	logic [4:0] v3c3l2_out [0:3];
	assign v3c3l2_out[0] = v3c3l1[0] + v3c3l1[1];
	assign v3c3l2_out[1] = v3c3l1[2] + v3c3l1[3];
	assign v3c3l2_out[2] = v3c3l1[4] + v3c3l1[5];
	assign v3c3l2_out[3] = v3c3l1[6] + v3c3l1[7];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 4; i = i + 1)
            v3c3l2[i] <= v3c3l2_out[i];
    end

	reg [5:0] v3c3l3 [0:1];
	logic [5:0] v3c3l3_out [0:1];
	assign v3c3l3_out[0] = v3c3l2[0] + v3c3l2[1];
	assign v3c3l3_out[1] = v3c3l2[2] + v3c3l2[3];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 2; i = i + 1)
            v3c3l3[i] <= v3c3l3_out[i];
    end

	reg [6:0] v3c3l4 [0:0];
	logic [6:0] v3c3l4_out [0:0];
	assign v3c3l4_out[0] = v3c3l3[0] + v3c3l3[1];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 1; i = i + 1)
            v3c3l4[i] <= v3c3l4_out[i];
    end

	reg [7:0] v3c3l5 [0:0];
	logic [7:0] v3c3l5_out [0:0];
	assign v3c3l5_out[0] = v3c3l4[0];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 1; i = i + 1)
            v3c3l5[i] <= v3c3l5_out[i];
    end

	assign val[3] = v3c3l5[0];
	
	// -0.015625
	logic [0:39] g4;
	reg [0:39] g4_reg;
	assign g4[0] = l[124];
	assign g4[1] = l[197] || l[200];
	assign g4[2] = l[254];
	assign g4[3] = l[326];
	assign g4[4] = l[334];
	assign g4[5] = l[411];
	assign g4[6] = l[529];
	assign g4[7] = l[544];
	assign g4[8] = l[565];
	assign g4[9] = l[578];
	assign g4[10] = l[606];
	assign g4[11] = l[680];
	assign g4[12] = l[719] || l[724];
	assign g4[13] = l[733];
	assign g4[14] = l[772];
	assign g4[15] = l[787] || l[789];
	assign g4[16] = l[806];
	assign g4[17] = l[867];
	assign g4[18] = l[884];
	assign g4[19] = l[964] || l[976];
	assign g4[20] = l[997];
	assign g4[21] = l[1006] || l[1016];
	assign g4[22] = l[1019] || l[1024];
	assign g4[23] = l[1038];
	assign g4[24] = l[1057] || l[1065];
	assign g4[25] = l[1077] || l[1078];
	assign g4[26] = l[1097] || l[1103];
	assign g4[27] = l[1140];
	assign g4[28] = l[1160] || l[1168];
	assign g4[29] = l[1185];
	assign g4[30] = l[1205];
	assign g4[31] = l[1259];
	assign g4[32] = l[1277] || l[1279];
	assign g4[33] = l[1299] || l[1303];
	assign g4[34] = l[1313] || l[1318] || l[1321];
	assign g4[35] = l[1353];
	assign g4[36] = l[1367];
	assign g4[37] = l[1396];
	assign g4[38] = l[1431];
	assign g4[39] = l[1449];
	
    always_ff @(posedge clk) begin
        g4_reg <= g4;
    end
    
	logic [2:0] v4c3l0_out [0:9];
	logic [2:0] v4c3l0 [0:9];
	assign v4c3l0_out[0] = g4_reg[0] + g4_reg[1] + g4_reg[2] + g4_reg[3];
	assign v4c3l0_out[1] = g4_reg[4] + g4_reg[5] + g4_reg[6] + g4_reg[7];
	assign v4c3l0_out[2] = g4_reg[8] + g4_reg[9] + g4_reg[10] + g4_reg[11];
	assign v4c3l0_out[3] = g4_reg[12] + g4_reg[13] + g4_reg[14] + g4_reg[15];
	assign v4c3l0_out[4] = g4_reg[16] + g4_reg[17] + g4_reg[18] + g4_reg[19];
	assign v4c3l0_out[5] = g4_reg[20] + g4_reg[21] + g4_reg[22] + g4_reg[23];
	assign v4c3l0_out[6] = g4_reg[24] + g4_reg[25] + g4_reg[26] + g4_reg[27];
	assign v4c3l0_out[7] = g4_reg[28] + g4_reg[29] + g4_reg[30] + g4_reg[31];
	assign v4c3l0_out[8] = g4_reg[32] + g4_reg[33] + g4_reg[34] + g4_reg[35];
	assign v4c3l0_out[9] = g4_reg[36] + g4_reg[37] + g4_reg[38] + g4_reg[39];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 10; i = i + 1)
            v4c3l0[i] <= v4c3l0_out[i];
    end

	reg [3:0] v4c3l1 [0:4];
	logic [3:0] v4c3l1_out [0:4];
	assign v4c3l1_out[0] = v4c3l0[0] + v4c3l0[1];
	assign v4c3l1_out[1] = v4c3l0[2] + v4c3l0[3];
	assign v4c3l1_out[2] = v4c3l0[4] + v4c3l0[5];
	assign v4c3l1_out[3] = v4c3l0[6] + v4c3l0[7];
	assign v4c3l1_out[4] = v4c3l0[8] + v4c3l0[9];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 5; i = i + 1)
            v4c3l1[i] <= v4c3l1_out[i];
    end

	reg [4:0] v4c3l2 [0:2];
	logic [4:0] v4c3l2_out [0:2];
	assign v4c3l2_out[0] = v4c3l1[0] + v4c3l1[1];
	assign v4c3l2_out[1] = v4c3l1[2] + v4c3l1[3];
	assign v4c3l2_out[2] = v4c3l1[4];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 3; i = i + 1)
            v4c3l2[i] <= v4c3l2_out[i];
    end

	reg [5:0] v4c3l3 [0:1];
	logic [5:0] v4c3l3_out [0:1];
	assign v4c3l3_out[0] = v4c3l2[0] + v4c3l2[1];
	assign v4c3l3_out[1] = v4c3l2[2];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 2; i = i + 1)
            v4c3l3[i] <= v4c3l3_out[i];
    end

	reg [6:0] v4c3l4 [0:0];
	logic [6:0] v4c3l4_out [0:0];
	assign v4c3l4_out[0] = v4c3l3[0] + v4c3l3[1];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 1; i = i + 1)
            v4c3l4[i] <= v4c3l4_out[i];
    end

	reg [7:0] v4c3l5 [0:0];
	logic [7:0] v4c3l5_out [0:0];
	assign v4c3l5_out[0] = v4c3l4[0];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 1; i = i + 1)
            v4c3l5[i] <= v4c3l5_out[i];
    end

	assign val[4] = v4c3l5[0];
	
	// 0.015625
	logic [0:40] g5;
	reg [0:40] g5_reg;
	assign g5[0] = l[97];
	assign g5[1] = l[176];
	assign g5[2] = l[229];
	assign g5[3] = l[360];
	assign g5[4] = l[425];
	assign g5[5] = l[438];
	assign g5[6] = l[457];
	assign g5[7] = l[515];
	assign g5[8] = l[553];
	assign g5[9] = l[569];
	assign g5[10] = l[581];
	assign g5[11] = l[643];
	assign g5[12] = l[654];
	assign g5[13] = l[663] || l[666];
	assign g5[14] = l[693];
	assign g5[15] = l[710];
	assign g5[16] = l[735];
	assign g5[17] = l[753] || l[759];
	assign g5[18] = l[763] || l[775];
	assign g5[19] = l[794];
	assign g5[20] = l[795] || l[797];
	assign g5[21] = l[885];
	assign g5[22] = l[906];
	assign g5[23] = l[941] || l[944];
	assign g5[24] = l[977];
	assign g5[25] = l[1027];
	assign g5[26] = l[1046];
	assign g5[27] = l[1068];
	assign g5[28] = l[1104] || l[1109];
	assign g5[29] = l[1145] || l[1151];
	assign g5[30] = l[1173] || l[1180];
	assign g5[31] = l[1196];
	assign g5[32] = l[1203] || l[1210];
	assign g5[33] = l[1243];
	assign g5[34] = l[1275];
	assign g5[35] = l[1295];
	assign g5[36] = l[1315];
	assign g5[37] = l[1352];
	assign g5[38] = l[1379] || l[1385];
	assign g5[39] = l[1445];
	assign g5[40] = l[1462];
	
    always_ff @(posedge clk) begin
        g5_reg <= g5;
    end
    
	logic [2:0] v5c3l0_out [0:10];
	logic [2:0] v5c3l0 [0:10];
	assign v5c3l0_out[0] = g5_reg[0] + g5_reg[1] + g5_reg[2] + g5_reg[3];
	assign v5c3l0_out[1] = g5_reg[4] + g5_reg[5] + g5_reg[6] + g5_reg[7];
	assign v5c3l0_out[2] = g5_reg[8] + g5_reg[9] + g5_reg[10] + g5_reg[11];
	assign v5c3l0_out[3] = g5_reg[12] + g5_reg[13] + g5_reg[14] + g5_reg[15];
	assign v5c3l0_out[4] = g5_reg[16] + g5_reg[17] + g5_reg[18] + g5_reg[19];
	assign v5c3l0_out[5] = g5_reg[20] + g5_reg[21] + g5_reg[22] + g5_reg[23];
	assign v5c3l0_out[6] = g5_reg[24] + g5_reg[25] + g5_reg[26] + g5_reg[27];
	assign v5c3l0_out[7] = g5_reg[28] + g5_reg[29] + g5_reg[30] + g5_reg[31];
	assign v5c3l0_out[8] = g5_reg[32] + g5_reg[33] + g5_reg[34] + g5_reg[35];
	assign v5c3l0_out[9] = g5_reg[36] + g5_reg[37] + g5_reg[38] + g5_reg[39];
	assign v5c3l0_out[10] = g5_reg[40];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 11; i = i + 1)
            v5c3l0[i] <= v5c3l0_out[i];
    end

	reg [3:0] v5c3l1 [0:5];
	logic [3:0] v5c3l1_out [0:5];
	assign v5c3l1_out[0] = v5c3l0[0] + v5c3l0[1];
	assign v5c3l1_out[1] = v5c3l0[2] + v5c3l0[3];
	assign v5c3l1_out[2] = v5c3l0[4] + v5c3l0[5];
	assign v5c3l1_out[3] = v5c3l0[6] + v5c3l0[7];
	assign v5c3l1_out[4] = v5c3l0[8] + v5c3l0[9];
	assign v5c3l1_out[5] = v5c3l0[10];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 6; i = i + 1)
            v5c3l1[i] <= v5c3l1_out[i];
    end

	reg [4:0] v5c3l2 [0:2];
	logic [4:0] v5c3l2_out [0:2];
	assign v5c3l2_out[0] = v5c3l1[0] + v5c3l1[1];
	assign v5c3l2_out[1] = v5c3l1[2] + v5c3l1[3];
	assign v5c3l2_out[2] = v5c3l1[4] + v5c3l1[5];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 3; i = i + 1)
            v5c3l2[i] <= v5c3l2_out[i];
    end

	reg [5:0] v5c3l3 [0:1];
	logic [5:0] v5c3l3_out [0:1];
	assign v5c3l3_out[0] = v5c3l2[0] + v5c3l2[1];
	assign v5c3l3_out[1] = v5c3l2[2];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 2; i = i + 1)
            v5c3l3[i] <= v5c3l3_out[i];
    end

	reg [6:0] v5c3l4 [0:0];
	logic [6:0] v5c3l4_out [0:0];
	assign v5c3l4_out[0] = v5c3l3[0] + v5c3l3[1];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 1; i = i + 1)
            v5c3l4[i] <= v5c3l4_out[i];
    end

	reg [7:0] v5c3l5 [0:0];
	logic [7:0] v5c3l5_out [0:0];
	assign v5c3l5_out[0] = v5c3l4[0];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 1; i = i + 1)
            v5c3l5[i] <= v5c3l5_out[i];
    end

	assign val[5] = v5c3l5[0];
	
	// 0.03125
	logic [0:54] g6;
	reg [0:54] g6_reg;
	assign g6[0] = l[25];
	assign g6[1] = l[50];
	assign g6[2] = l[129];
	assign g6[3] = l[152];
	assign g6[4] = l[182] || l[190];
	assign g6[5] = l[237];
	assign g6[6] = l[239] || l[243] || l[244];
	assign g6[7] = l[257];
	assign g6[8] = l[273] || l[279];
	assign g6[9] = l[297];
	assign g6[10] = l[336];
	assign g6[11] = l[350] || l[351];
	assign g6[12] = l[419] || l[422];
	assign g6[13] = l[428];
	assign g6[14] = l[451];
	assign g6[15] = l[454];
	assign g6[16] = l[524];
	assign g6[17] = l[534];
	assign g6[18] = l[560];
	assign g6[19] = l[597];
	assign g6[20] = l[624] || l[625];
	assign g6[21] = l[660];
	assign g6[22] = l[694];
	assign g6[23] = l[732];
	assign g6[24] = l[739];
	assign g6[25] = l[762];
	assign g6[26] = l[816];
	assign g6[27] = l[847];
	assign g6[28] = l[858];
	assign g6[29] = l[880];
	assign g6[30] = l[898] || l[900];
	assign g6[31] = l[919];
	assign g6[32] = l[952] || l[960];
	assign g6[33] = l[968];
	assign g6[34] = l[980];
	assign g6[35] = l[994];
	assign g6[36] = l[1022] || l[1025] || l[1029];
	assign g6[37] = l[1044];
	assign g6[38] = l[1052];
	assign g6[39] = l[1067] || l[1071];
	assign g6[40] = l[1156];
	assign g6[41] = l[1169] || l[1171];
	assign g6[42] = l[1199];
	assign g6[43] = l[1209];
	assign g6[44] = l[1227] || l[1235];
	assign g6[45] = l[1261];
	assign g6[46] = l[1297];
	assign g6[47] = l[1310];
	assign g6[48] = l[1327] || l[1328] || l[1330] || l[1333] || l[1335] || l[1341];
	assign g6[49] = l[1369];
	assign g6[50] = l[1383] || l[1391];
	assign g6[51] = l[1398] || l[1401] || l[1409];
	assign g6[52] = l[1415] || l[1416];
	assign g6[53] = l[1425] || l[1427] || l[1432] || l[1435];
	assign g6[54] = l[1452];
	
    always_ff @(posedge clk) begin
        g6_reg <= g6;
    end
    
	logic [2:0] v6c3l0_out [0:13];
	logic [2:0] v6c3l0 [0:13];
	assign v6c3l0_out[0] = g6_reg[0] + g6_reg[1] + g6_reg[2] + g6_reg[3];
	assign v6c3l0_out[1] = g6_reg[4] + g6_reg[5] + g6_reg[6] + g6_reg[7];
	assign v6c3l0_out[2] = g6_reg[8] + g6_reg[9] + g6_reg[10] + g6_reg[11];
	assign v6c3l0_out[3] = g6_reg[12] + g6_reg[13] + g6_reg[14] + g6_reg[15];
	assign v6c3l0_out[4] = g6_reg[16] + g6_reg[17] + g6_reg[18] + g6_reg[19];
	assign v6c3l0_out[5] = g6_reg[20] + g6_reg[21] + g6_reg[22] + g6_reg[23];
	assign v6c3l0_out[6] = g6_reg[24] + g6_reg[25] + g6_reg[26] + g6_reg[27];
	assign v6c3l0_out[7] = g6_reg[28] + g6_reg[29] + g6_reg[30] + g6_reg[31];
	assign v6c3l0_out[8] = g6_reg[32] + g6_reg[33] + g6_reg[34] + g6_reg[35];
	assign v6c3l0_out[9] = g6_reg[36] + g6_reg[37] + g6_reg[38] + g6_reg[39];
	assign v6c3l0_out[10] = g6_reg[40] + g6_reg[41] + g6_reg[42] + g6_reg[43];
	assign v6c3l0_out[11] = g6_reg[44] + g6_reg[45] + g6_reg[46] + g6_reg[47];
	assign v6c3l0_out[12] = g6_reg[48] + g6_reg[49] + g6_reg[50] + g6_reg[51];
	assign v6c3l0_out[13] = g6_reg[52] + g6_reg[53] + g6_reg[54];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 14; i = i + 1)
            v6c3l0[i] <= v6c3l0_out[i];
    end

	reg [3:0] v6c3l1 [0:6];
	logic [3:0] v6c3l1_out [0:6];
	assign v6c3l1_out[0] = v6c3l0[0] + v6c3l0[1];
	assign v6c3l1_out[1] = v6c3l0[2] + v6c3l0[3];
	assign v6c3l1_out[2] = v6c3l0[4] + v6c3l0[5];
	assign v6c3l1_out[3] = v6c3l0[6] + v6c3l0[7];
	assign v6c3l1_out[4] = v6c3l0[8] + v6c3l0[9];
	assign v6c3l1_out[5] = v6c3l0[10] + v6c3l0[11];
	assign v6c3l1_out[6] = v6c3l0[12] + v6c3l0[13];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 7; i = i + 1)
            v6c3l1[i] <= v6c3l1_out[i];
    end

	reg [4:0] v6c3l2 [0:3];
	logic [4:0] v6c3l2_out [0:3];
	assign v6c3l2_out[0] = v6c3l1[0] + v6c3l1[1];
	assign v6c3l2_out[1] = v6c3l1[2] + v6c3l1[3];
	assign v6c3l2_out[2] = v6c3l1[4] + v6c3l1[5];
	assign v6c3l2_out[3] = v6c3l1[6];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 4; i = i + 1)
            v6c3l2[i] <= v6c3l2_out[i];
    end

	reg [5:0] v6c3l3 [0:1];
	logic [5:0] v6c3l3_out [0:1];
	assign v6c3l3_out[0] = v6c3l2[0] + v6c3l2[1];
	assign v6c3l3_out[1] = v6c3l2[2] + v6c3l2[3];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 2; i = i + 1)
            v6c3l3[i] <= v6c3l3_out[i];
    end

	reg [6:0] v6c3l4 [0:0];
	logic [6:0] v6c3l4_out [0:0];
	assign v6c3l4_out[0] = v6c3l3[0] + v6c3l3[1];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 1; i = i + 1)
            v6c3l4[i] <= v6c3l4_out[i];
    end

	reg [7:0] v6c3l5 [0:0];
	logic [7:0] v6c3l5_out [0:0];
	assign v6c3l5_out[0] = v6c3l4[0];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 1; i = i + 1)
            v6c3l5[i] <= v6c3l5_out[i];
    end

	assign val[6] = v6c3l5[0];
	
	// 0.0625
	logic [0:79] g7;
	reg [0:79] g7_reg;
	assign g7[0] = l[21];
	assign g7[1] = l[106];
	assign g7[2] = l[130];
	assign g7[3] = l[156] || l[158];
	assign g7[4] = l[171];
	assign g7[5] = l[209] || l[211];
	assign g7[6] = l[227];
	assign g7[7] = l[240] || l[246] || l[249];
	assign g7[8] = l[261] || l[269];
	assign g7[9] = l[270] || l[284];
	assign g7[10] = l[294] || l[300];
	assign g7[11] = l[303] || l[306] || l[309] || l[310];
	assign g7[12] = l[320];
	assign g7[13] = l[335] || l[339] || l[343] || l[344];
	assign g7[14] = l[355] || l[361];
	assign g7[15] = l[366] || l[375];
	assign g7[16] = l[379] || l[390];
	assign g7[17] = l[395] || l[400] || l[403];
	assign g7[18] = l[412] || l[414];
	assign g7[19] = l[441] || l[445] || l[446] || l[449];
	assign g7[20] = l[472];
	assign g7[21] = l[485] || l[487] || l[491];
	assign g7[22] = l[500] || l[502] || l[506] || l[509];
	assign g7[23] = l[518];
	assign g7[24] = l[547] || l[548];
	assign g7[25] = l[564];
	assign g7[26] = l[575] || l[577] || l[586];
	assign g7[27] = l[589] || l[595] || l[599] || l[602];
	assign g7[28] = l[605] || l[614];
	assign g7[29] = l[619] || l[629];
	assign g7[30] = l[634] || l[642] || l[644];
	assign g7[31] = l[649] || l[653];
	assign g7[32] = l[667];
	assign g7[33] = l[681] || l[684] || l[687];
	assign g7[34] = l[707] || l[712] || l[714] || l[715];
	assign g7[35] = l[723] || l[726];
	assign g7[36] = l[734];
	assign g7[37] = l[767];
	assign g7[38] = l[780] || l[784];
	assign g7[39] = l[799] || l[803];
	assign g7[40] = l[822];
	assign g7[41] = l[824] || l[827];
	assign g7[42] = l[846];
	assign g7[43] = l[856];
	assign g7[44] = l[871] || l[873] || l[874];
	assign g7[45] = l[882] || l[886] || l[889];
	assign g7[46] = l[897] || l[902] || l[909] || l[911];
	assign g7[47] = l[914] || l[921] || l[925] || l[926];
	assign g7[48] = l[937];
	assign g7[49] = l[957];
	assign g7[50] = l[962];
	assign g7[51] = l[988];
	assign g7[52] = l[1007] || l[1011];
	assign g7[53] = l[1023];
	assign g7[54] = l[1041] || l[1047] || l[1049];
	assign g7[55] = l[1053] || l[1055] || l[1059];
	assign g7[56] = l[1073] || l[1075];
	assign g7[57] = l[1085] || l[1093];
	assign g7[58] = l[1113];
	assign g7[59] = l[1117] || l[1122];
	assign g7[60] = l[1134] || l[1137] || l[1138];
	assign g7[61] = l[1163] || l[1165];
	assign g7[62] = l[1177];
	assign g7[63] = l[1192];
	assign g7[64] = l[1204] || l[1206] || l[1212];
	assign g7[65] = l[1224];
	assign g7[66] = l[1238];
	assign g7[67] = l[1244] || l[1246];
	assign g7[68] = l[1270] || l[1271];
	assign g7[69] = l[1274] || l[1282];
	assign g7[70] = l[1286] || l[1288] || l[1293];
	assign g7[71] = l[1296];
	assign g7[72] = l[1322];
	assign g7[73] = l[1339];
	assign g7[74] = l[1372];
	assign g7[75] = l[1393];
	assign g7[76] = l[1395] || l[1404];
	assign g7[77] = l[1439];
	assign g7[78] = l[1450] || l[1454];
	assign g7[79] = l[1459] || l[1466] || l[1471];
	
    always_ff @(posedge clk) begin
        g7_reg <= g7;
    end
    
	logic [2:0] v7c3l0_out [0:19];
	logic [2:0] v7c3l0 [0:19];
	assign v7c3l0_out[0] = g7_reg[0] + g7_reg[1] + g7_reg[2] + g7_reg[3];
	assign v7c3l0_out[1] = g7_reg[4] + g7_reg[5] + g7_reg[6] + g7_reg[7];
	assign v7c3l0_out[2] = g7_reg[8] + g7_reg[9] + g7_reg[10] + g7_reg[11];
	assign v7c3l0_out[3] = g7_reg[12] + g7_reg[13] + g7_reg[14] + g7_reg[15];
	assign v7c3l0_out[4] = g7_reg[16] + g7_reg[17] + g7_reg[18] + g7_reg[19];
	assign v7c3l0_out[5] = g7_reg[20] + g7_reg[21] + g7_reg[22] + g7_reg[23];
	assign v7c3l0_out[6] = g7_reg[24] + g7_reg[25] + g7_reg[26] + g7_reg[27];
	assign v7c3l0_out[7] = g7_reg[28] + g7_reg[29] + g7_reg[30] + g7_reg[31];
	assign v7c3l0_out[8] = g7_reg[32] + g7_reg[33] + g7_reg[34] + g7_reg[35];
	assign v7c3l0_out[9] = g7_reg[36] + g7_reg[37] + g7_reg[38] + g7_reg[39];
	assign v7c3l0_out[10] = g7_reg[40] + g7_reg[41] + g7_reg[42] + g7_reg[43];
	assign v7c3l0_out[11] = g7_reg[44] + g7_reg[45] + g7_reg[46] + g7_reg[47];
	assign v7c3l0_out[12] = g7_reg[48] + g7_reg[49] + g7_reg[50] + g7_reg[51];
	assign v7c3l0_out[13] = g7_reg[52] + g7_reg[53] + g7_reg[54] + g7_reg[55];
	assign v7c3l0_out[14] = g7_reg[56] + g7_reg[57] + g7_reg[58] + g7_reg[59];
	assign v7c3l0_out[15] = g7_reg[60] + g7_reg[61] + g7_reg[62] + g7_reg[63];
	assign v7c3l0_out[16] = g7_reg[64] + g7_reg[65] + g7_reg[66] + g7_reg[67];
	assign v7c3l0_out[17] = g7_reg[68] + g7_reg[69] + g7_reg[70] + g7_reg[71];
	assign v7c3l0_out[18] = g7_reg[72] + g7_reg[73] + g7_reg[74] + g7_reg[75];
	assign v7c3l0_out[19] = g7_reg[76] + g7_reg[77] + g7_reg[78] + g7_reg[79];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 20; i = i + 1)
            v7c3l0[i] <= v7c3l0_out[i];
    end

	reg [3:0] v7c3l1 [0:9];
	logic [3:0] v7c3l1_out [0:9];
	assign v7c3l1_out[0] = v7c3l0[0] + v7c3l0[1];
	assign v7c3l1_out[1] = v7c3l0[2] + v7c3l0[3];
	assign v7c3l1_out[2] = v7c3l0[4] + v7c3l0[5];
	assign v7c3l1_out[3] = v7c3l0[6] + v7c3l0[7];
	assign v7c3l1_out[4] = v7c3l0[8] + v7c3l0[9];
	assign v7c3l1_out[5] = v7c3l0[10] + v7c3l0[11];
	assign v7c3l1_out[6] = v7c3l0[12] + v7c3l0[13];
	assign v7c3l1_out[7] = v7c3l0[14] + v7c3l0[15];
	assign v7c3l1_out[8] = v7c3l0[16] + v7c3l0[17];
	assign v7c3l1_out[9] = v7c3l0[18] + v7c3l0[19];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 10; i = i + 1)
            v7c3l1[i] <= v7c3l1_out[i];
    end

	reg [4:0] v7c3l2 [0:4];
	logic [4:0] v7c3l2_out [0:4];
	assign v7c3l2_out[0] = v7c3l1[0] + v7c3l1[1];
	assign v7c3l2_out[1] = v7c3l1[2] + v7c3l1[3];
	assign v7c3l2_out[2] = v7c3l1[4] + v7c3l1[5];
	assign v7c3l2_out[3] = v7c3l1[6] + v7c3l1[7];
	assign v7c3l2_out[4] = v7c3l1[8] + v7c3l1[9];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 5; i = i + 1)
            v7c3l2[i] <= v7c3l2_out[i];
    end

	reg [5:0] v7c3l3 [0:2];
	logic [5:0] v7c3l3_out [0:2];
	assign v7c3l3_out[0] = v7c3l2[0] + v7c3l2[1];
	assign v7c3l3_out[1] = v7c3l2[2] + v7c3l2[3];
	assign v7c3l3_out[2] = v7c3l2[4];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 3; i = i + 1)
            v7c3l3[i] <= v7c3l3_out[i];
    end

	reg [6:0] v7c3l4 [0:1];
	logic [6:0] v7c3l4_out [0:1];
	assign v7c3l4_out[0] = v7c3l3[0] + v7c3l3[1];
	assign v7c3l4_out[1] = v7c3l3[2];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 2; i = i + 1)
            v7c3l4[i] <= v7c3l4_out[i];
    end

	reg [7:0] v7c3l5 [0:0];
	logic [7:0] v7c3l5_out [0:0];
	assign v7c3l5_out[0] = v7c3l4[0] + v7c3l4[1];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 1; i = i + 1)
            v7c3l5[i] <= v7c3l5_out[i];
    end

	assign val[7] = v7c3l5[0];
	
	// 0.125
	logic [0:87] g8;
	reg [0:87] g8_reg;
	assign g8[0] = l[39] || l[42];
	assign g8[1] = l[69];
	assign g8[2] = l[84] || l[89];
	assign g8[3] = l[99] || l[111];
	assign g8[4] = l[135] || l[141];
	assign g8[5] = l[143] || l[145] || l[148] || l[153];
	assign g8[6] = l[160] || l[161] || l[167] || l[169];
	assign g8[7] = l[180] || l[184];
	assign g8[8] = l[192] || l[193] || l[204];
	assign g8[9] = l[207] || l[220];
	assign g8[10] = l[223] || l[224] || l[231] || l[232] || l[235] || l[236];
	assign g8[11] = l[242] || l[252];
	assign g8[12] = l[259] || l[266];
	assign g8[13] = l[274] || l[276];
	assign g8[14] = l[291] || l[293] || l[296];
	assign g8[15] = l[304] || l[315] || l[316];
	assign g8[16] = l[323] || l[327] || l[328];
	assign g8[17] = l[340] || l[348];
	assign g8[18] = l[352];
	assign g8[19] = l[367] || l[370] || l[377];
	assign g8[20] = l[380] || l[382];
	assign g8[21] = l[415] || l[417];
	assign g8[22] = l[426] || l[435];
	assign g8[23] = l[459] || l[460];
	assign g8[24] = l[469] || l[478] || l[482];
	assign g8[25] = l[488];
	assign g8[26] = l[512];
	assign g8[27] = l[519] || l[521];
	assign g8[28] = l[530] || l[537] || l[540] || l[543];
	assign g8[29] = l[545] || l[550] || l[559];
	assign g8[30] = l[591] || l[593];
	assign g8[31] = l[618] || l[626] || l[628] || l[631];
	assign g8[32] = l[639] || l[646];
	assign g8[33] = l[651] || l[656];
	assign g8[34] = l[672] || l[673] || l[676];
	assign g8[35] = l[678] || l[679] || l[691];
	assign g8[36] = l[698] || l[702];
	assign g8[37] = l[706] || l[717];
	assign g8[38] = l[721] || l[729];
	assign g8[39] = l[746];
	assign g8[40] = l[755] || l[760];
	assign g8[41] = l[766] || l[769] || l[773] || l[778];
	assign g8[42] = l[788];
	assign g8[43] = l[796] || l[808];
	assign g8[44] = l[814] || l[818];
	assign g8[45] = l[826] || l[832] || l[835] || l[838];
	assign g8[46] = l[851];
	assign g8[47] = l[861] || l[866];
	assign g8[48] = l[869] || l[876];
	assign g8[49] = l[891] || l[895];
	assign g8[50] = l[907];
	assign g8[51] = l[913] || l[916];
	assign g8[52] = l[931] || l[935];
	assign g8[53] = l[948];
	assign g8[54] = l[951];
	assign g8[55] = l[965] || l[969] || l[974];
	assign g8[56] = l[996] || l[1003];
	assign g8[57] = l[1017];
	assign g8[58] = l[1020] || l[1028] || l[1032];
	assign g8[59] = l[1048];
	assign g8[60] = l[1063];
	assign g8[61] = l[1080];
	assign g8[62] = l[1084] || l[1087] || l[1091];
	assign g8[63] = l[1099] || l[1101];
	assign g8[64] = l[1118] || l[1124] || l[1127] || l[1128];
	assign g8[65] = l[1131];
	assign g8[66] = l[1144] || l[1146] || l[1150];
	assign g8[67] = l[1158] || l[1159] || l[1161] || l[1172];
	assign g8[68] = l[1182] || l[1186];
	assign g8[69] = l[1198] || l[1201];
	assign g8[70] = l[1216];
	assign g8[71] = l[1220] || l[1225];
	assign g8[72] = l[1228] || l[1231] || l[1237] || l[1241];
	assign g8[73] = l[1248] || l[1251] || l[1255];
	assign g8[74] = l[1260] || l[1268];
	assign g8[75] = l[1278];
	assign g8[76] = l[1302] || l[1306] || l[1307];
	assign g8[77] = l[1317] || l[1320] || l[1324];
	assign g8[78] = l[1331] || l[1336];
	assign g8[79] = l[1344] || l[1346] || l[1348] || l[1351];
	assign g8[80] = l[1354] || l[1357];
	assign g8[81] = l[1368] || l[1377];
	assign g8[82] = l[1390] || l[1392];
	assign g8[83] = l[1400] || l[1407];
	assign g8[84] = l[1413] || l[1417] || l[1418];
	assign g8[85] = l[1428];
	assign g8[86] = l[1448] || l[1455];
	assign g8[87] = l[1461] || l[1464] || l[1467];
	
    always_ff @(posedge clk) begin
        g8_reg <= g8;
    end
    
	logic [2:0] v8c3l0_out [0:21];
	logic [2:0] v8c3l0 [0:21];
	assign v8c3l0_out[0] = g8_reg[0] + g8_reg[1] + g8_reg[2] + g8_reg[3];
	assign v8c3l0_out[1] = g8_reg[4] + g8_reg[5] + g8_reg[6] + g8_reg[7];
	assign v8c3l0_out[2] = g8_reg[8] + g8_reg[9] + g8_reg[10] + g8_reg[11];
	assign v8c3l0_out[3] = g8_reg[12] + g8_reg[13] + g8_reg[14] + g8_reg[15];
	assign v8c3l0_out[4] = g8_reg[16] + g8_reg[17] + g8_reg[18] + g8_reg[19];
	assign v8c3l0_out[5] = g8_reg[20] + g8_reg[21] + g8_reg[22] + g8_reg[23];
	assign v8c3l0_out[6] = g8_reg[24] + g8_reg[25] + g8_reg[26] + g8_reg[27];
	assign v8c3l0_out[7] = g8_reg[28] + g8_reg[29] + g8_reg[30] + g8_reg[31];
	assign v8c3l0_out[8] = g8_reg[32] + g8_reg[33] + g8_reg[34] + g8_reg[35];
	assign v8c3l0_out[9] = g8_reg[36] + g8_reg[37] + g8_reg[38] + g8_reg[39];
	assign v8c3l0_out[10] = g8_reg[40] + g8_reg[41] + g8_reg[42] + g8_reg[43];
	assign v8c3l0_out[11] = g8_reg[44] + g8_reg[45] + g8_reg[46] + g8_reg[47];
	assign v8c3l0_out[12] = g8_reg[48] + g8_reg[49] + g8_reg[50] + g8_reg[51];
	assign v8c3l0_out[13] = g8_reg[52] + g8_reg[53] + g8_reg[54] + g8_reg[55];
	assign v8c3l0_out[14] = g8_reg[56] + g8_reg[57] + g8_reg[58] + g8_reg[59];
	assign v8c3l0_out[15] = g8_reg[60] + g8_reg[61] + g8_reg[62] + g8_reg[63];
	assign v8c3l0_out[16] = g8_reg[64] + g8_reg[65] + g8_reg[66] + g8_reg[67];
	assign v8c3l0_out[17] = g8_reg[68] + g8_reg[69] + g8_reg[70] + g8_reg[71];
	assign v8c3l0_out[18] = g8_reg[72] + g8_reg[73] + g8_reg[74] + g8_reg[75];
	assign v8c3l0_out[19] = g8_reg[76] + g8_reg[77] + g8_reg[78] + g8_reg[79];
	assign v8c3l0_out[20] = g8_reg[80] + g8_reg[81] + g8_reg[82] + g8_reg[83];
	assign v8c3l0_out[21] = g8_reg[84] + g8_reg[85] + g8_reg[86] + g8_reg[87];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 22; i = i + 1)
            v8c3l0[i] <= v8c3l0_out[i];
    end

	reg [3:0] v8c3l1 [0:10];
	logic [3:0] v8c3l1_out [0:10];
	assign v8c3l1_out[0] = v8c3l0[0] + v8c3l0[1];
	assign v8c3l1_out[1] = v8c3l0[2] + v8c3l0[3];
	assign v8c3l1_out[2] = v8c3l0[4] + v8c3l0[5];
	assign v8c3l1_out[3] = v8c3l0[6] + v8c3l0[7];
	assign v8c3l1_out[4] = v8c3l0[8] + v8c3l0[9];
	assign v8c3l1_out[5] = v8c3l0[10] + v8c3l0[11];
	assign v8c3l1_out[6] = v8c3l0[12] + v8c3l0[13];
	assign v8c3l1_out[7] = v8c3l0[14] + v8c3l0[15];
	assign v8c3l1_out[8] = v8c3l0[16] + v8c3l0[17];
	assign v8c3l1_out[9] = v8c3l0[18] + v8c3l0[19];
	assign v8c3l1_out[10] = v8c3l0[20] + v8c3l0[21];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 11; i = i + 1)
            v8c3l1[i] <= v8c3l1_out[i];
    end

	reg [4:0] v8c3l2 [0:5];
	logic [4:0] v8c3l2_out [0:5];
	assign v8c3l2_out[0] = v8c3l1[0] + v8c3l1[1];
	assign v8c3l2_out[1] = v8c3l1[2] + v8c3l1[3];
	assign v8c3l2_out[2] = v8c3l1[4] + v8c3l1[5];
	assign v8c3l2_out[3] = v8c3l1[6] + v8c3l1[7];
	assign v8c3l2_out[4] = v8c3l1[8] + v8c3l1[9];
	assign v8c3l2_out[5] = v8c3l1[10];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 6; i = i + 1)
            v8c3l2[i] <= v8c3l2_out[i];
    end

	reg [5:0] v8c3l3 [0:2];
	logic [5:0] v8c3l3_out [0:2];
	assign v8c3l3_out[0] = v8c3l2[0] + v8c3l2[1];
	assign v8c3l3_out[1] = v8c3l2[2] + v8c3l2[3];
	assign v8c3l3_out[2] = v8c3l2[4] + v8c3l2[5];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 3; i = i + 1)
            v8c3l3[i] <= v8c3l3_out[i];
    end

	reg [6:0] v8c3l4 [0:1];
	logic [6:0] v8c3l4_out [0:1];
	assign v8c3l4_out[0] = v8c3l3[0] + v8c3l3[1];
	assign v8c3l4_out[1] = v8c3l3[2];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 2; i = i + 1)
            v8c3l4[i] <= v8c3l4_out[i];
    end

	reg [7:0] v8c3l5 [0:0];
	logic [7:0] v8c3l5_out [0:0];
	assign v8c3l5_out[0] = v8c3l4[0] + v8c3l4[1];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 1; i = i + 1)
            v8c3l5[i] <= v8c3l5_out[i];
    end

	assign val[8] = v8c3l5[0];
	
	// 0.25
	logic [0:68] g9;
	reg [0:68] g9_reg;
	assign g9[0] = l[15];
	assign g9[1] = l[17] || l[18] || l[27] || l[29];
	assign g9[2] = l[35] || l[36] || l[45];
	assign g9[3] = l[48] || l[58] || l[61] || l[62];
	assign g9[4] = l[64] || l[67] || l[75] || l[78];
	assign g9[5] = l[81] || l[90] || l[93] || l[94];
	assign g9[6] = l[96] || l[101] || l[109];
	assign g9[7] = l[113] || l[115] || l[118] || l[121] || l[122] || l[126];
	assign g9[8] = l[138];
	assign g9[9] = l[164] || l[165] || l[173];
	assign g9[10] = l[178] || l[181] || l[187];
	assign g9[11] = l[198] || l[205];
	assign g9[12] = l[214];
	assign g9[13] = l[241];
	assign g9[14] = l[256];
	assign g9[15] = l[277] || l[280];
	assign g9[16] = l[289];
	assign g9[17] = l[308] || l[313];
	assign g9[18] = l[319] || l[324] || l[330];
	assign g9[19] = l[341];
	assign g9[20] = l[354] || l[359];
	assign g9[21] = l[385];
	assign g9[22] = l[397];
	assign g9[23] = l[416] || l[420] || l[423];
	assign g9[24] = l[432] || l[434];
	assign g9[25] = l[442] || l[452];
	assign g9[26] = l[463] || l[464];
	assign g9[27] = l[471] || l[474];
	assign g9[28] = l[490] || l[497];
	assign g9[29] = l[516] || l[517] || l[527];
	assign g9[30] = l[532] || l[533];
	assign g9[31] = l[555];
	assign g9[32] = l[566] || l[572];
	assign g9[33] = l[574] || l[582] || l[587];
	assign g9[34] = l[616];
	assign g9[35] = l[636];
	assign g9[36] = l[669];
	assign g9[37] = l[689];
	assign g9[38] = l[695] || l[701];
	assign g9[39] = l[709];
	assign g9[40] = l[727];
	assign g9[41] = l[740];
	assign g9[42] = l[750] || l[756] || l[761];
	assign g9[43] = l[782] || l[785];
	assign g9[44] = l[801];
	assign g9[45] = l[833];
	assign g9[46] = l[842] || l[843] || l[849];
	assign g9[47] = l[878];
	assign g9[48] = l[903];
	assign g9[49] = l[927];
	assign g9[50] = l[939];
	assign g9[51] = l[949];
	assign g9[52] = l[959];
	assign g9[53] = l[981] || l[985];
	assign g9[54] = l[992];
	assign g9[55] = l[1012];
	assign g9[56] = l[1037];
	assign g9[57] = l[1056];
	assign g9[58] = l[1076];
	assign g9[59] = l[1086];
	assign g9[60] = l[1110] || l[1114];
	assign g9[61] = l[1125];
	assign g9[62] = l[1132] || l[1139];
	assign g9[63] = l[1195];
	assign g9[64] = l[1208];
	assign g9[65] = l[1294];
	assign g9[66] = l[1361];
	assign g9[67] = l[1370];
	assign g9[68] = l[1384];
	
    always_ff @(posedge clk) begin
        g9_reg <= g9;
    end
    
	logic [2:0] v9c3l0_out [0:17];
	logic [2:0] v9c3l0 [0:17];
	assign v9c3l0_out[0] = g9_reg[0] + g9_reg[1] + g9_reg[2] + g9_reg[3];
	assign v9c3l0_out[1] = g9_reg[4] + g9_reg[5] + g9_reg[6] + g9_reg[7];
	assign v9c3l0_out[2] = g9_reg[8] + g9_reg[9] + g9_reg[10] + g9_reg[11];
	assign v9c3l0_out[3] = g9_reg[12] + g9_reg[13] + g9_reg[14] + g9_reg[15];
	assign v9c3l0_out[4] = g9_reg[16] + g9_reg[17] + g9_reg[18] + g9_reg[19];
	assign v9c3l0_out[5] = g9_reg[20] + g9_reg[21] + g9_reg[22] + g9_reg[23];
	assign v9c3l0_out[6] = g9_reg[24] + g9_reg[25] + g9_reg[26] + g9_reg[27];
	assign v9c3l0_out[7] = g9_reg[28] + g9_reg[29] + g9_reg[30] + g9_reg[31];
	assign v9c3l0_out[8] = g9_reg[32] + g9_reg[33] + g9_reg[34] + g9_reg[35];
	assign v9c3l0_out[9] = g9_reg[36] + g9_reg[37] + g9_reg[38] + g9_reg[39];
	assign v9c3l0_out[10] = g9_reg[40] + g9_reg[41] + g9_reg[42] + g9_reg[43];
	assign v9c3l0_out[11] = g9_reg[44] + g9_reg[45] + g9_reg[46] + g9_reg[47];
	assign v9c3l0_out[12] = g9_reg[48] + g9_reg[49] + g9_reg[50] + g9_reg[51];
	assign v9c3l0_out[13] = g9_reg[52] + g9_reg[53] + g9_reg[54] + g9_reg[55];
	assign v9c3l0_out[14] = g9_reg[56] + g9_reg[57] + g9_reg[58] + g9_reg[59];
	assign v9c3l0_out[15] = g9_reg[60] + g9_reg[61] + g9_reg[62] + g9_reg[63];
	assign v9c3l0_out[16] = g9_reg[64] + g9_reg[65] + g9_reg[66] + g9_reg[67];
	assign v9c3l0_out[17] = g9_reg[68];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 18; i = i + 1)
            v9c3l0[i] <= v9c3l0_out[i];
    end

	reg [3:0] v9c3l1 [0:8];
	logic [3:0] v9c3l1_out [0:8];
	assign v9c3l1_out[0] = v9c3l0[0] + v9c3l0[1];
	assign v9c3l1_out[1] = v9c3l0[2] + v9c3l0[3];
	assign v9c3l1_out[2] = v9c3l0[4] + v9c3l0[5];
	assign v9c3l1_out[3] = v9c3l0[6] + v9c3l0[7];
	assign v9c3l1_out[4] = v9c3l0[8] + v9c3l0[9];
	assign v9c3l1_out[5] = v9c3l0[10] + v9c3l0[11];
	assign v9c3l1_out[6] = v9c3l0[12] + v9c3l0[13];
	assign v9c3l1_out[7] = v9c3l0[14] + v9c3l0[15];
	assign v9c3l1_out[8] = v9c3l0[16] + v9c3l0[17];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 9; i = i + 1)
            v9c3l1[i] <= v9c3l1_out[i];
    end

	reg [4:0] v9c3l2 [0:4];
	logic [4:0] v9c3l2_out [0:4];
	assign v9c3l2_out[0] = v9c3l1[0] + v9c3l1[1];
	assign v9c3l2_out[1] = v9c3l1[2] + v9c3l1[3];
	assign v9c3l2_out[2] = v9c3l1[4] + v9c3l1[5];
	assign v9c3l2_out[3] = v9c3l1[6] + v9c3l1[7];
	assign v9c3l2_out[4] = v9c3l1[8];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 5; i = i + 1)
            v9c3l2[i] <= v9c3l2_out[i];
    end

	reg [5:0] v9c3l3 [0:2];
	logic [5:0] v9c3l3_out [0:2];
	assign v9c3l3_out[0] = v9c3l2[0] + v9c3l2[1];
	assign v9c3l3_out[1] = v9c3l2[2] + v9c3l2[3];
	assign v9c3l3_out[2] = v9c3l2[4];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 3; i = i + 1)
            v9c3l3[i] <= v9c3l3_out[i];
    end

	reg [6:0] v9c3l4 [0:1];
	logic [6:0] v9c3l4_out [0:1];
	assign v9c3l4_out[0] = v9c3l3[0] + v9c3l3[1];
	assign v9c3l4_out[1] = v9c3l3[2];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 2; i = i + 1)
            v9c3l4[i] <= v9c3l4_out[i];
    end

	reg [7:0] v9c3l5 [0:0];
	logic [7:0] v9c3l5_out [0:0];
	assign v9c3l5_out[0] = v9c3l4[0] + v9c3l4[1];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 1; i = i + 1)
            v9c3l5[i] <= v9c3l5_out[i];
    end

	assign val[9] = v9c3l5[0];
	
	// 0.5
	logic [0:20] g10;
	reg [0:20] g10_reg;
	assign g10[0] = l[3] || l[5] || l[6] || l[8] || l[10] || l[12];
	assign g10[1] = l[22] || l[24] || l[30];
	assign g10[2] = l[40];
	assign g10[3] = l[54];
	assign g10[4] = l[82] || l[87];
	assign g10[5] = l[132];
	assign g10[6] = l[219];
	assign g10[7] = l[333];
	assign g10[8] = l[372];
	assign g10[9] = l[408];
	assign g10[10] = l[418];
	assign g10[11] = l[433];
	assign g10[12] = l[523];
	assign g10[13] = l[539];
	assign g10[14] = l[585];
	assign g10[15] = l[594];
	assign g10[16] = l[610];
	assign g10[17] = l[674];
	assign g10[18] = l[819];
	assign g10[19] = l[836];
	assign g10[20] = l[1072];
	
    always_ff @(posedge clk) begin
        g10_reg <= g10;
    end
    
	logic [2:0] v10c3l0_out [0:5];
	logic [2:0] v10c3l0 [0:5];
	assign v10c3l0_out[0] = g10_reg[0] + g10_reg[1] + g10_reg[2] + g10_reg[3];
	assign v10c3l0_out[1] = g10_reg[4] + g10_reg[5] + g10_reg[6] + g10_reg[7];
	assign v10c3l0_out[2] = g10_reg[8] + g10_reg[9] + g10_reg[10] + g10_reg[11];
	assign v10c3l0_out[3] = g10_reg[12] + g10_reg[13] + g10_reg[14] + g10_reg[15];
	assign v10c3l0_out[4] = g10_reg[16] + g10_reg[17] + g10_reg[18] + g10_reg[19];
	assign v10c3l0_out[5] = g10_reg[20];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 6; i = i + 1)
            v10c3l0[i] <= v10c3l0_out[i];
    end

	reg [3:0] v10c3l1 [0:2];
	logic [3:0] v10c3l1_out [0:2];
	assign v10c3l1_out[0] = v10c3l0[0] + v10c3l0[1];
	assign v10c3l1_out[1] = v10c3l0[2] + v10c3l0[3];
	assign v10c3l1_out[2] = v10c3l0[4] + v10c3l0[5];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 3; i = i + 1)
            v10c3l1[i] <= v10c3l1_out[i];
    end

	reg [4:0] v10c3l2 [0:1];
	logic [4:0] v10c3l2_out [0:1];
	assign v10c3l2_out[0] = v10c3l1[0] + v10c3l1[1];
	assign v10c3l2_out[1] = v10c3l1[2];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 2; i = i + 1)
            v10c3l2[i] <= v10c3l2_out[i];
    end

	reg [5:0] v10c3l3 [0:0];
	logic [5:0] v10c3l3_out [0:0];
	assign v10c3l3_out[0] = v10c3l2[0] + v10c3l2[1];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 1; i = i + 1)
            v10c3l3[i] <= v10c3l3_out[i];
    end

	reg [6:0] v10c3l4 [0:0];
	logic [6:0] v10c3l4_out [0:0];
	assign v10c3l4_out[0] = v10c3l3[0];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 1; i = i + 1)
            v10c3l4[i] <= v10c3l4_out[i];
    end

	reg [7:0] v10c3l5 [0:0];
	logic [7:0] v10c3l5_out [0:0];
	assign v10c3l5_out[0] = v10c3l4[0];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 1; i = i + 1)
            v10c3l5[i] <= v10c3l5_out[i];
    end

	assign val[10] = v10c3l5[0];
	
	// 1.0
	logic [0:2] g11;
	reg [0:2] g11_reg;
	assign g11[0] = l[9];
	assign g11[1] = l[134];
	assign g11[2] = l[332];
	
    always_ff @(posedge clk) begin
        g11_reg <= g11;
    end
    
	logic [2:0] v11c3l0_out [0:0];
	logic [2:0] v11c3l0 [0:0];
	assign v11c3l0_out[0] = g11_reg[0] + g11_reg[1] + g11_reg[2];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 1; i = i + 1)
            v11c3l0[i] <= v11c3l0_out[i];
    end

	reg [3:0] v11c3l1 [0:0];
	logic [3:0] v11c3l1_out [0:0];
	assign v11c3l1_out[0] = v11c3l0[0];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 1; i = i + 1)
            v11c3l1[i] <= v11c3l1_out[i];
    end

	reg [4:0] v11c3l2 [0:0];
	logic [4:0] v11c3l2_out [0:0];
	assign v11c3l2_out[0] = v11c3l1[0];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 1; i = i + 1)
            v11c3l2[i] <= v11c3l2_out[i];
    end

	reg [5:0] v11c3l3 [0:0];
	logic [5:0] v11c3l3_out [0:0];
	assign v11c3l3_out[0] = v11c3l2[0];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 1; i = i + 1)
            v11c3l3[i] <= v11c3l3_out[i];
    end

	reg [6:0] v11c3l4 [0:0];
	logic [6:0] v11c3l4_out [0:0];
	assign v11c3l4_out[0] = v11c3l3[0];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 1; i = i + 1)
            v11c3l4[i] <= v11c3l4_out[i];
    end

	reg [7:0] v11c3l5 [0:0];
	logic [7:0] v11c3l5_out [0:0];
	assign v11c3l5_out[0] = v11c3l4[0];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 1; i = i + 1)
            v11c3l5[i] <= v11c3l5_out[i];
    end

	assign val[11] = v11c3l5[0];
	
	// 2.0
	assign val[12] = 0;
	
endmodule


module leaf_counter_4(input logic clk, input logic [0:1315] l, output logic [7:0] val [0:12]);
    integer i;
	// -0.25
	logic [0:64] g0;
	reg [0:64] g0_reg;
	assign g0[0] = l[8] || l[11];
	assign g0[1] = l[16] || l[27] || l[29];
	assign g0[2] = l[36] || l[47];
	assign g0[3] = l[60];
	assign g0[4] = l[69] || l[73] || l[79];
	assign g0[5] = l[81] || l[86] || l[91];
	assign g0[6] = l[103] || l[106];
	assign g0[7] = l[140];
	assign g0[8] = l[148];
	assign g0[9] = l[162] || l[164] || l[170];
	assign g0[10] = l[180];
	assign g0[11] = l[216];
	assign g0[12] = l[226] || l[234];
	assign g0[13] = l[265];
	assign g0[14] = l[270] || l[272] || l[280];
	assign g0[15] = l[290];
	assign g0[16] = l[296] || l[300] || l[309];
	assign g0[17] = l[316];
	assign g0[18] = l[327] || l[329] || l[332] || l[337];
	assign g0[19] = l[345];
	assign g0[20] = l[367];
	assign g0[21] = l[383];
	assign g0[22] = l[392];
	assign g0[23] = l[413];
	assign g0[24] = l[420] || l[422] || l[423];
	assign g0[25] = l[426];
	assign g0[26] = l[443] || l[447] || l[449] || l[450];
	assign g0[27] = l[462];
	assign g0[28] = l[485] || l[486] || l[494];
	assign g0[29] = l[519];
	assign g0[30] = l[529];
	assign g0[31] = l[531] || l[532] || l[535] || l[538];
	assign g0[32] = l[547] || l[549];
	assign g0[33] = l[556] || l[557];
	assign g0[34] = l[568];
	assign g0[35] = l[580];
	assign g0[36] = l[591] || l[593];
	assign g0[37] = l[603];
	assign g0[38] = l[621] || l[622];
	assign g0[39] = l[631] || l[632];
	assign g0[40] = l[640] || l[643] || l[645];
	assign g0[41] = l[670];
	assign g0[42] = l[687];
	assign g0[43] = l[695] || l[698] || l[704];
	assign g0[44] = l[717];
	assign g0[45] = l[731];
	assign g0[46] = l[740] || l[744];
	assign g0[47] = l[759];
	assign g0[48] = l[782];
	assign g0[49] = l[794];
	assign g0[50] = l[816] || l[822];
	assign g0[51] = l[834];
	assign g0[52] = l[846];
	assign g0[53] = l[862];
	assign g0[54] = l[892] || l[899];
	assign g0[55] = l[902] || l[906];
	assign g0[56] = l[919] || l[926];
	assign g0[57] = l[940];
	assign g0[58] = l[956];
	assign g0[59] = l[986];
	assign g0[60] = l[993];
	assign g0[61] = l[1007];
	assign g0[62] = l[1048];
	assign g0[63] = l[1058];
	assign g0[64] = l[1254];
	
    always_ff @(posedge clk) begin
        g0_reg <= g0;
    end
    
	logic [2:0] v0c4l0_out [0:16];
	logic [2:0] v0c4l0 [0:16];
	assign v0c4l0_out[0] = g0_reg[0] + g0_reg[1] + g0_reg[2] + g0_reg[3];
	assign v0c4l0_out[1] = g0_reg[4] + g0_reg[5] + g0_reg[6] + g0_reg[7];
	assign v0c4l0_out[2] = g0_reg[8] + g0_reg[9] + g0_reg[10] + g0_reg[11];
	assign v0c4l0_out[3] = g0_reg[12] + g0_reg[13] + g0_reg[14] + g0_reg[15];
	assign v0c4l0_out[4] = g0_reg[16] + g0_reg[17] + g0_reg[18] + g0_reg[19];
	assign v0c4l0_out[5] = g0_reg[20] + g0_reg[21] + g0_reg[22] + g0_reg[23];
	assign v0c4l0_out[6] = g0_reg[24] + g0_reg[25] + g0_reg[26] + g0_reg[27];
	assign v0c4l0_out[7] = g0_reg[28] + g0_reg[29] + g0_reg[30] + g0_reg[31];
	assign v0c4l0_out[8] = g0_reg[32] + g0_reg[33] + g0_reg[34] + g0_reg[35];
	assign v0c4l0_out[9] = g0_reg[36] + g0_reg[37] + g0_reg[38] + g0_reg[39];
	assign v0c4l0_out[10] = g0_reg[40] + g0_reg[41] + g0_reg[42] + g0_reg[43];
	assign v0c4l0_out[11] = g0_reg[44] + g0_reg[45] + g0_reg[46] + g0_reg[47];
	assign v0c4l0_out[12] = g0_reg[48] + g0_reg[49] + g0_reg[50] + g0_reg[51];
	assign v0c4l0_out[13] = g0_reg[52] + g0_reg[53] + g0_reg[54] + g0_reg[55];
	assign v0c4l0_out[14] = g0_reg[56] + g0_reg[57] + g0_reg[58] + g0_reg[59];
	assign v0c4l0_out[15] = g0_reg[60] + g0_reg[61] + g0_reg[62] + g0_reg[63];
	assign v0c4l0_out[16] = g0_reg[64];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 17; i = i + 1)
            v0c4l0[i] <= v0c4l0_out[i];
    end

	reg [3:0] v0c4l1 [0:8];
	logic [3:0] v0c4l1_out [0:8];
	assign v0c4l1_out[0] = v0c4l0[0] + v0c4l0[1];
	assign v0c4l1_out[1] = v0c4l0[2] + v0c4l0[3];
	assign v0c4l1_out[2] = v0c4l0[4] + v0c4l0[5];
	assign v0c4l1_out[3] = v0c4l0[6] + v0c4l0[7];
	assign v0c4l1_out[4] = v0c4l0[8] + v0c4l0[9];
	assign v0c4l1_out[5] = v0c4l0[10] + v0c4l0[11];
	assign v0c4l1_out[6] = v0c4l0[12] + v0c4l0[13];
	assign v0c4l1_out[7] = v0c4l0[14] + v0c4l0[15];
	assign v0c4l1_out[8] = v0c4l0[16];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 9; i = i + 1)
            v0c4l1[i] <= v0c4l1_out[i];
    end

	reg [4:0] v0c4l2 [0:4];
	logic [4:0] v0c4l2_out [0:4];
	assign v0c4l2_out[0] = v0c4l1[0] + v0c4l1[1];
	assign v0c4l2_out[1] = v0c4l1[2] + v0c4l1[3];
	assign v0c4l2_out[2] = v0c4l1[4] + v0c4l1[5];
	assign v0c4l2_out[3] = v0c4l1[6] + v0c4l1[7];
	assign v0c4l2_out[4] = v0c4l1[8];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 5; i = i + 1)
            v0c4l2[i] <= v0c4l2_out[i];
    end

	reg [5:0] v0c4l3 [0:2];
	logic [5:0] v0c4l3_out [0:2];
	assign v0c4l3_out[0] = v0c4l2[0] + v0c4l2[1];
	assign v0c4l3_out[1] = v0c4l2[2] + v0c4l2[3];
	assign v0c4l3_out[2] = v0c4l2[4];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 3; i = i + 1)
            v0c4l3[i] <= v0c4l3_out[i];
    end

	reg [6:0] v0c4l4 [0:1];
	logic [6:0] v0c4l4_out [0:1];
	assign v0c4l4_out[0] = v0c4l3[0] + v0c4l3[1];
	assign v0c4l4_out[1] = v0c4l3[2];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 2; i = i + 1)
            v0c4l4[i] <= v0c4l4_out[i];
    end

	reg [7:0] v0c4l5 [0:0];
	logic [7:0] v0c4l5_out [0:0];
	assign v0c4l5_out[0] = v0c4l4[0] + v0c4l4[1];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 1; i = i + 1)
            v0c4l5[i] <= v0c4l5_out[i];
    end

	assign val[0] = v0c4l5[0];
	
	// -0.125
	logic [0:99] g1;
	reg [0:99] g1_reg;
	assign g1[0] = l[0] || l[3] || l[6] || l[9] || l[10] || l[13] || l[15];
	assign g1[1] = l[17] || l[18] || l[21] || l[23] || l[28];
	assign g1[2] = l[32] || l[35] || l[37] || l[39] || l[40] || l[45] || l[46];
	assign g1[3] = l[48] || l[51] || l[52] || l[57] || l[63];
	assign g1[4] = l[66] || l[68] || l[72] || l[75] || l[77];
	assign g1[5] = l[80] || l[83] || l[84] || l[94];
	assign g1[6] = l[96] || l[99] || l[104] || l[109] || l[111];
	assign g1[7] = l[113] || l[114] || l[116] || l[117] || l[119] || l[121] || l[123] || l[124] || l[127];
	assign g1[8] = l[129] || l[131] || l[136] || l[139] || l[142];
	assign g1[9] = l[145] || l[146] || l[149] || l[151] || l[153] || l[154] || l[156] || l[159];
	assign g1[10] = l[161] || l[163] || l[165] || l[167] || l[172] || l[175];
	assign g1[11] = l[177] || l[178] || l[181] || l[183] || l[184] || l[187] || l[191];
	assign g1[12] = l[192] || l[195] || l[196] || l[198] || l[203] || l[207];
	assign g1[13] = l[208] || l[211] || l[214] || l[218] || l[221];
	assign g1[14] = l[222] || l[223] || l[230] || l[232] || l[235];
	assign g1[15] = l[238] || l[239] || l[241] || l[246] || l[247] || l[252];
	assign g1[16] = l[253] || l[256] || l[259] || l[261] || l[264] || l[267];
	assign g1[17] = l[269] || l[274];
	assign g1[18] = l[284] || l[287] || l[289] || l[292];
	assign g1[19] = l[295] || l[298] || l[303] || l[304];
	assign g1[20] = l[310] || l[312] || l[314] || l[319] || l[320] || l[324];
	assign g1[21] = l[330] || l[336];
	assign g1[22] = l[344] || l[346] || l[348] || l[350] || l[353] || l[356];
	assign g1[23] = l[358] || l[360] || l[361] || l[364] || l[371];
	assign g1[24] = l[373] || l[376] || l[381] || l[386] || l[388];
	assign g1[25] = l[393] || l[396] || l[398] || l[400] || l[404];
	assign g1[26] = l[406];
	assign g1[27] = l[416] || l[418];
	assign g1[28] = l[425] || l[427] || l[430] || l[432] || l[433] || l[437];
	assign g1[29] = l[451] || l[452];
	assign g1[30] = l[454];
	assign g1[31] = l[465] || l[469] || l[470] || l[475] || l[476] || l[478];
	assign g1[32] = l[481] || l[483] || l[487] || l[489] || l[490] || l[492];
	assign g1[33] = l[495] || l[498] || l[501] || l[503];
	assign g1[34] = l[512] || l[514];
	assign g1[35] = l[521] || l[524];
	assign g1[36] = l[537] || l[539];
	assign g1[37] = l[544] || l[546];
	assign g1[38] = l[554];
	assign g1[39] = l[562];
	assign g1[40] = l[570] || l[572] || l[573] || l[576] || l[578];
	assign g1[41] = l[587];
	assign g1[42] = l[597] || l[600] || l[605] || l[608];
	assign g1[43] = l[613] || l[615] || l[616] || l[625];
	assign g1[44] = l[629];
	assign g1[45] = l[635] || l[637] || l[642] || l[648];
	assign g1[46] = l[651] || l[656] || l[660];
	assign g1[47] = l[665] || l[667];
	assign g1[48] = l[675] || l[678];
	assign g1[49] = l[681] || l[686] || l[688];
	assign g1[50] = l[692] || l[700] || l[702];
	assign g1[51] = l[705] || l[714] || l[715];
	assign g1[52] = l[721] || l[726];
	assign g1[53] = l[739] || l[743] || l[745];
	assign g1[54] = l[747] || l[748] || l[751] || l[752];
	assign g1[55] = l[753] || l[756] || l[765] || l[768];
	assign g1[56] = l[773] || l[779] || l[781];
	assign g1[57] = l[787] || l[788] || l[791] || l[798];
	assign g1[58] = l[804] || l[809] || l[811];
	assign g1[59] = l[817];
	assign g1[60] = l[830] || l[833] || l[839];
	assign g1[61] = l[843] || l[845] || l[850] || l[854];
	assign g1[62] = l[856] || l[859] || l[861] || l[869];
	assign g1[63] = l[873] || l[874] || l[878] || l[881] || l[882];
	assign g1[64] = l[896] || l[897];
	assign g1[65] = l[904];
	assign g1[66] = l[910] || l[911] || l[913];
	assign g1[67] = l[915] || l[917] || l[920] || l[925] || l[929];
	assign g1[68] = l[931] || l[936] || l[939] || l[942];
	assign g1[69] = l[948] || l[949] || l[950];
	assign g1[70] = l[955] || l[959] || l[964];
	assign g1[71] = l[969] || l[972] || l[973];
	assign g1[72] = l[978] || l[985] || l[987];
	assign g1[73] = l[990] || l[991] || l[1001];
	assign g1[74] = l[1009] || l[1011] || l[1013] || l[1015];
	assign g1[75] = l[1023] || l[1024] || l[1025];
	assign g1[76] = l[1028] || l[1031] || l[1034];
	assign g1[77] = l[1038] || l[1040] || l[1042] || l[1046];
	assign g1[78] = l[1056];
	assign g1[79] = l[1071] || l[1073] || l[1074];
	assign g1[80] = l[1077] || l[1083] || l[1086] || l[1091];
	assign g1[81] = l[1096] || l[1101];
	assign g1[82] = l[1104] || l[1105] || l[1106];
	assign g1[83] = l[1108] || l[1114] || l[1121];
	assign g1[84] = l[1127] || l[1129] || l[1133];
	assign g1[85] = l[1138] || l[1140] || l[1141] || l[1148];
	assign g1[86] = l[1152] || l[1155] || l[1157] || l[1160] || l[1161];
	assign g1[87] = l[1172];
	assign g1[88] = l[1173] || l[1176] || l[1185];
	assign g1[89] = l[1189] || l[1196] || l[1197];
	assign g1[90] = l[1201] || l[1203] || l[1206];
	assign g1[91] = l[1208] || l[1212] || l[1215];
	assign g1[92] = l[1216] || l[1219] || l[1230];
	assign g1[93] = l[1237] || l[1238] || l[1243] || l[1244] || l[1247];
	assign g1[94] = l[1255] || l[1261];
	assign g1[95] = l[1266] || l[1267];
	assign g1[96] = l[1270] || l[1272] || l[1276] || l[1279] || l[1281];
	assign g1[97] = l[1287] || l[1294];
	assign g1[98] = l[1306];
	assign g1[99] = l[1314] || l[1315];
	
    always_ff @(posedge clk) begin
        g1_reg <= g1;
    end
    
	logic [2:0] v1c4l0_out [0:24];
	logic [2:0] v1c4l0 [0:24];
	assign v1c4l0_out[0] = g1_reg[0] + g1_reg[1] + g1_reg[2] + g1_reg[3];
	assign v1c4l0_out[1] = g1_reg[4] + g1_reg[5] + g1_reg[6] + g1_reg[7];
	assign v1c4l0_out[2] = g1_reg[8] + g1_reg[9] + g1_reg[10] + g1_reg[11];
	assign v1c4l0_out[3] = g1_reg[12] + g1_reg[13] + g1_reg[14] + g1_reg[15];
	assign v1c4l0_out[4] = g1_reg[16] + g1_reg[17] + g1_reg[18] + g1_reg[19];
	assign v1c4l0_out[5] = g1_reg[20] + g1_reg[21] + g1_reg[22] + g1_reg[23];
	assign v1c4l0_out[6] = g1_reg[24] + g1_reg[25] + g1_reg[26] + g1_reg[27];
	assign v1c4l0_out[7] = g1_reg[28] + g1_reg[29] + g1_reg[30] + g1_reg[31];
	assign v1c4l0_out[8] = g1_reg[32] + g1_reg[33] + g1_reg[34] + g1_reg[35];
	assign v1c4l0_out[9] = g1_reg[36] + g1_reg[37] + g1_reg[38] + g1_reg[39];
	assign v1c4l0_out[10] = g1_reg[40] + g1_reg[41] + g1_reg[42] + g1_reg[43];
	assign v1c4l0_out[11] = g1_reg[44] + g1_reg[45] + g1_reg[46] + g1_reg[47];
	assign v1c4l0_out[12] = g1_reg[48] + g1_reg[49] + g1_reg[50] + g1_reg[51];
	assign v1c4l0_out[13] = g1_reg[52] + g1_reg[53] + g1_reg[54] + g1_reg[55];
	assign v1c4l0_out[14] = g1_reg[56] + g1_reg[57] + g1_reg[58] + g1_reg[59];
	assign v1c4l0_out[15] = g1_reg[60] + g1_reg[61] + g1_reg[62] + g1_reg[63];
	assign v1c4l0_out[16] = g1_reg[64] + g1_reg[65] + g1_reg[66] + g1_reg[67];
	assign v1c4l0_out[17] = g1_reg[68] + g1_reg[69] + g1_reg[70] + g1_reg[71];
	assign v1c4l0_out[18] = g1_reg[72] + g1_reg[73] + g1_reg[74] + g1_reg[75];
	assign v1c4l0_out[19] = g1_reg[76] + g1_reg[77] + g1_reg[78] + g1_reg[79];
	assign v1c4l0_out[20] = g1_reg[80] + g1_reg[81] + g1_reg[82] + g1_reg[83];
	assign v1c4l0_out[21] = g1_reg[84] + g1_reg[85] + g1_reg[86] + g1_reg[87];
	assign v1c4l0_out[22] = g1_reg[88] + g1_reg[89] + g1_reg[90] + g1_reg[91];
	assign v1c4l0_out[23] = g1_reg[92] + g1_reg[93] + g1_reg[94] + g1_reg[95];
	assign v1c4l0_out[24] = g1_reg[96] + g1_reg[97] + g1_reg[98] + g1_reg[99];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 25; i = i + 1)
            v1c4l0[i] <= v1c4l0_out[i];
    end

	reg [3:0] v1c4l1 [0:12];
	logic [3:0] v1c4l1_out [0:12];
	assign v1c4l1_out[0] = v1c4l0[0] + v1c4l0[1];
	assign v1c4l1_out[1] = v1c4l0[2] + v1c4l0[3];
	assign v1c4l1_out[2] = v1c4l0[4] + v1c4l0[5];
	assign v1c4l1_out[3] = v1c4l0[6] + v1c4l0[7];
	assign v1c4l1_out[4] = v1c4l0[8] + v1c4l0[9];
	assign v1c4l1_out[5] = v1c4l0[10] + v1c4l0[11];
	assign v1c4l1_out[6] = v1c4l0[12] + v1c4l0[13];
	assign v1c4l1_out[7] = v1c4l0[14] + v1c4l0[15];
	assign v1c4l1_out[8] = v1c4l0[16] + v1c4l0[17];
	assign v1c4l1_out[9] = v1c4l0[18] + v1c4l0[19];
	assign v1c4l1_out[10] = v1c4l0[20] + v1c4l0[21];
	assign v1c4l1_out[11] = v1c4l0[22] + v1c4l0[23];
	assign v1c4l1_out[12] = v1c4l0[24];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 13; i = i + 1)
            v1c4l1[i] <= v1c4l1_out[i];
    end

	reg [4:0] v1c4l2 [0:6];
	logic [4:0] v1c4l2_out [0:6];
	assign v1c4l2_out[0] = v1c4l1[0] + v1c4l1[1];
	assign v1c4l2_out[1] = v1c4l1[2] + v1c4l1[3];
	assign v1c4l2_out[2] = v1c4l1[4] + v1c4l1[5];
	assign v1c4l2_out[3] = v1c4l1[6] + v1c4l1[7];
	assign v1c4l2_out[4] = v1c4l1[8] + v1c4l1[9];
	assign v1c4l2_out[5] = v1c4l1[10] + v1c4l1[11];
	assign v1c4l2_out[6] = v1c4l1[12];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 7; i = i + 1)
            v1c4l2[i] <= v1c4l2_out[i];
    end

	reg [5:0] v1c4l3 [0:3];
	logic [5:0] v1c4l3_out [0:3];
	assign v1c4l3_out[0] = v1c4l2[0] + v1c4l2[1];
	assign v1c4l3_out[1] = v1c4l2[2] + v1c4l2[3];
	assign v1c4l3_out[2] = v1c4l2[4] + v1c4l2[5];
	assign v1c4l3_out[3] = v1c4l2[6];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 4; i = i + 1)
            v1c4l3[i] <= v1c4l3_out[i];
    end

	reg [6:0] v1c4l4 [0:1];
	logic [6:0] v1c4l4_out [0:1];
	assign v1c4l4_out[0] = v1c4l3[0] + v1c4l3[1];
	assign v1c4l4_out[1] = v1c4l3[2] + v1c4l3[3];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 2; i = i + 1)
            v1c4l4[i] <= v1c4l4_out[i];
    end

	reg [7:0] v1c4l5 [0:0];
	logic [7:0] v1c4l5_out [0:0];
	assign v1c4l5_out[0] = v1c4l4[0] + v1c4l4[1];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 1; i = i + 1)
            v1c4l5[i] <= v1c4l5_out[i];
    end

	assign val[1] = v1c4l5[0];
	
	// -0.0625
	logic [0:77] g2;
	reg [0:77] g2_reg;
	assign g2[0] = l[31];
	assign g2[1] = l[43];
	assign g2[2] = l[55];
	assign g2[3] = l[65];
	assign g2[4] = l[87] || l[92];
	assign g2[5] = l[101] || l[107];
	assign g2[6] = l[125];
	assign g2[7] = l[133] || l[137] || l[141];
	assign g2[8] = l[147];
	assign g2[9] = l[171];
	assign g2[10] = l[179];
	assign g2[11] = l[205];
	assign g2[12] = l[213] || l[217] || l[219];
	assign g2[13] = l[228];
	assign g2[14] = l[262];
	assign g2[15] = l[271] || l[273] || l[278];
	assign g2[16] = l[283] || l[293];
	assign g2[17] = l[301];
	assign g2[18] = l[328] || l[334] || l[340];
	assign g2[19] = l[341];
	assign g2[20] = l[362] || l[370];
	assign g2[21] = l[378] || l[380];
	assign g2[22] = l[390] || l[391];
	assign g2[23] = l[405] || l[409] || l[414];
	assign g2[24] = l[419] || l[421];
	assign g2[25] = l[428] || l[435];
	assign g2[26] = l[439] || l[444] || l[448];
	assign g2[27] = l[461] || l[463];
	assign g2[28] = l[497] || l[509];
	assign g2[29] = l[511];
	assign g2[30] = l[523] || l[527] || l[528];
	assign g2[31] = l[533] || l[534] || l[540];
	assign g2[32] = l[548];
	assign g2[33] = l[555] || l[558];
	assign g2[34] = l[561] || l[564];
	assign g2[35] = l[574] || l[582];
	assign g2[36] = l[592] || l[594];
	assign g2[37] = l[595] || l[602] || l[607];
	assign g2[38] = l[623];
	assign g2[39] = l[633];
	assign g2[40] = l[661] || l[664];
	assign g2[41] = l[671] || l[677];
	assign g2[42] = l[682];
	assign g2[43] = l[690] || l[693] || l[696];
	assign g2[44] = l[707] || l[710];
	assign g2[45] = l[719] || l[729];
	assign g2[46] = l[736] || l[741];
	assign g2[47] = l[750];
	assign g2[48] = l[760] || l[764];
	assign g2[49] = l[771];
	assign g2[50] = l[793] || l[795];
	assign g2[51] = l[800];
	assign g2[52] = l[814] || l[821] || l[823];
	assign g2[53] = l[826] || l[829] || l[837];
	assign g2[54] = l[847] || l[853];
	assign g2[55] = l[863] || l[871];
	assign g2[56] = l[891] || l[893] || l[898];
	assign g2[57] = l[907];
	assign g2[58] = l[912];
	assign g2[59] = l[951];
	assign g2[60] = l[996];
	assign g2[61] = l[1005] || l[1008] || l[1016];
	assign g2[62] = l[1035] || l[1041];
	assign g2[63] = l[1050] || l[1053];
	assign g2[64] = l[1060] || l[1064] || l[1067];
	assign g2[65] = l[1078];
	assign g2[66] = l[1117] || l[1120];
	assign g2[67] = l[1135];
	assign g2[68] = l[1150];
	assign g2[69] = l[1164] || l[1167] || l[1170];
	assign g2[70] = l[1178] || l[1183];
	assign g2[71] = l[1187] || l[1192];
	assign g2[72] = l[1217] || l[1222] || l[1226];
	assign g2[73] = l[1232] || l[1245];
	assign g2[74] = l[1253];
	assign g2[75] = l[1262];
	assign g2[76] = l[1291];
	assign g2[77] = l[1295] || l[1298];
	
    always_ff @(posedge clk) begin
        g2_reg <= g2;
    end
    
	logic [2:0] v2c4l0_out [0:19];
	logic [2:0] v2c4l0 [0:19];
	assign v2c4l0_out[0] = g2_reg[0] + g2_reg[1] + g2_reg[2] + g2_reg[3];
	assign v2c4l0_out[1] = g2_reg[4] + g2_reg[5] + g2_reg[6] + g2_reg[7];
	assign v2c4l0_out[2] = g2_reg[8] + g2_reg[9] + g2_reg[10] + g2_reg[11];
	assign v2c4l0_out[3] = g2_reg[12] + g2_reg[13] + g2_reg[14] + g2_reg[15];
	assign v2c4l0_out[4] = g2_reg[16] + g2_reg[17] + g2_reg[18] + g2_reg[19];
	assign v2c4l0_out[5] = g2_reg[20] + g2_reg[21] + g2_reg[22] + g2_reg[23];
	assign v2c4l0_out[6] = g2_reg[24] + g2_reg[25] + g2_reg[26] + g2_reg[27];
	assign v2c4l0_out[7] = g2_reg[28] + g2_reg[29] + g2_reg[30] + g2_reg[31];
	assign v2c4l0_out[8] = g2_reg[32] + g2_reg[33] + g2_reg[34] + g2_reg[35];
	assign v2c4l0_out[9] = g2_reg[36] + g2_reg[37] + g2_reg[38] + g2_reg[39];
	assign v2c4l0_out[10] = g2_reg[40] + g2_reg[41] + g2_reg[42] + g2_reg[43];
	assign v2c4l0_out[11] = g2_reg[44] + g2_reg[45] + g2_reg[46] + g2_reg[47];
	assign v2c4l0_out[12] = g2_reg[48] + g2_reg[49] + g2_reg[50] + g2_reg[51];
	assign v2c4l0_out[13] = g2_reg[52] + g2_reg[53] + g2_reg[54] + g2_reg[55];
	assign v2c4l0_out[14] = g2_reg[56] + g2_reg[57] + g2_reg[58] + g2_reg[59];
	assign v2c4l0_out[15] = g2_reg[60] + g2_reg[61] + g2_reg[62] + g2_reg[63];
	assign v2c4l0_out[16] = g2_reg[64] + g2_reg[65] + g2_reg[66] + g2_reg[67];
	assign v2c4l0_out[17] = g2_reg[68] + g2_reg[69] + g2_reg[70] + g2_reg[71];
	assign v2c4l0_out[18] = g2_reg[72] + g2_reg[73] + g2_reg[74] + g2_reg[75];
	assign v2c4l0_out[19] = g2_reg[76] + g2_reg[77];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 20; i = i + 1)
            v2c4l0[i] <= v2c4l0_out[i];
    end

	reg [3:0] v2c4l1 [0:9];
	logic [3:0] v2c4l1_out [0:9];
	assign v2c4l1_out[0] = v2c4l0[0] + v2c4l0[1];
	assign v2c4l1_out[1] = v2c4l0[2] + v2c4l0[3];
	assign v2c4l1_out[2] = v2c4l0[4] + v2c4l0[5];
	assign v2c4l1_out[3] = v2c4l0[6] + v2c4l0[7];
	assign v2c4l1_out[4] = v2c4l0[8] + v2c4l0[9];
	assign v2c4l1_out[5] = v2c4l0[10] + v2c4l0[11];
	assign v2c4l1_out[6] = v2c4l0[12] + v2c4l0[13];
	assign v2c4l1_out[7] = v2c4l0[14] + v2c4l0[15];
	assign v2c4l1_out[8] = v2c4l0[16] + v2c4l0[17];
	assign v2c4l1_out[9] = v2c4l0[18] + v2c4l0[19];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 10; i = i + 1)
            v2c4l1[i] <= v2c4l1_out[i];
    end

	reg [4:0] v2c4l2 [0:4];
	logic [4:0] v2c4l2_out [0:4];
	assign v2c4l2_out[0] = v2c4l1[0] + v2c4l1[1];
	assign v2c4l2_out[1] = v2c4l1[2] + v2c4l1[3];
	assign v2c4l2_out[2] = v2c4l1[4] + v2c4l1[5];
	assign v2c4l2_out[3] = v2c4l1[6] + v2c4l1[7];
	assign v2c4l2_out[4] = v2c4l1[8] + v2c4l1[9];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 5; i = i + 1)
            v2c4l2[i] <= v2c4l2_out[i];
    end

	reg [5:0] v2c4l3 [0:2];
	logic [5:0] v2c4l3_out [0:2];
	assign v2c4l3_out[0] = v2c4l2[0] + v2c4l2[1];
	assign v2c4l3_out[1] = v2c4l2[2] + v2c4l2[3];
	assign v2c4l3_out[2] = v2c4l2[4];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 3; i = i + 1)
            v2c4l3[i] <= v2c4l3_out[i];
    end

	reg [6:0] v2c4l4 [0:1];
	logic [6:0] v2c4l4_out [0:1];
	assign v2c4l4_out[0] = v2c4l3[0] + v2c4l3[1];
	assign v2c4l4_out[1] = v2c4l3[2];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 2; i = i + 1)
            v2c4l4[i] <= v2c4l4_out[i];
    end

	reg [7:0] v2c4l5 [0:0];
	logic [7:0] v2c4l5_out [0:0];
	assign v2c4l5_out[0] = v2c4l4[0] + v2c4l4[1];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 1; i = i + 1)
            v2c4l5[i] <= v2c4l5_out[i];
    end

	assign val[2] = v2c4l5[0];
	
	// -0.03125
	logic [0:54] g3;
	reg [0:54] g3_reg;
	assign g3[0] = l[22];
	assign g3[1] = l[70];
	assign g3[2] = l[105];
	assign g3[3] = l[115];
	assign g3[4] = l[157];
	assign g3[5] = l[201] || l[202];
	assign g3[6] = l[225] || l[236];
	assign g3[7] = l[281];
	assign g3[8] = l[297];
	assign g3[9] = l[366];
	assign g3[10] = l[399];
	assign g3[11] = l[411];
	assign g3[12] = l[441];
	assign g3[13] = l[455] || l[457] || l[459];
	assign g3[14] = l[466];
	assign g3[15] = l[515];
	assign g3[16] = l[542];
	assign g3[17] = l[559];
	assign g3[18] = l[579] || l[584];
	assign g3[19] = l[585];
	assign g3[20] = l[610] || l[620];
	assign g3[21] = l[626];
	assign g3[22] = l[649] || l[655];
	assign g3[23] = l[697];
	assign g3[24] = l[718];
	assign g3[25] = l[722] || l[724] || l[732];
	assign g3[26] = l[734];
	assign g3[27] = l[785];
	assign g3[28] = l[803];
	assign g3[29] = l[819];
	assign g3[30] = l[824] || l[835];
	assign g3[31] = l[844];
	assign g3[32] = l[865] || l[866] || l[868];
	assign g3[33] = l[886];
	assign g3[34] = l[894];
	assign g3[35] = l[945];
	assign g3[36] = l[953] || l[957];
	assign g3[37] = l[968];
	assign g3[38] = l[975] || l[982];
	assign g3[39] = l[1027] || l[1033];
	assign g3[40] = l[1055] || l[1059];
	assign g3[41] = l[1063] || l[1069] || l[1072];
	assign g3[42] = l[1093] || l[1100];
	assign g3[43] = l[1107] || l[1110];
	assign g3[44] = l[1125];
	assign g3[45] = l[1146];
	assign g3[46] = l[1168];
	assign g3[47] = l[1194];
	assign g3[48] = l[1200] || l[1202];
	assign g3[49] = l[1207] || l[1209];
	assign g3[50] = l[1235];
	assign g3[51] = l[1251];
	assign g3[52] = l[1268];
	assign g3[53] = l[1283];
	assign g3[54] = l[1307] || l[1312];
	
    always_ff @(posedge clk) begin
        g3_reg <= g3;
    end
    
	logic [2:0] v3c4l0_out [0:13];
	logic [2:0] v3c4l0 [0:13];
	assign v3c4l0_out[0] = g3_reg[0] + g3_reg[1] + g3_reg[2] + g3_reg[3];
	assign v3c4l0_out[1] = g3_reg[4] + g3_reg[5] + g3_reg[6] + g3_reg[7];
	assign v3c4l0_out[2] = g3_reg[8] + g3_reg[9] + g3_reg[10] + g3_reg[11];
	assign v3c4l0_out[3] = g3_reg[12] + g3_reg[13] + g3_reg[14] + g3_reg[15];
	assign v3c4l0_out[4] = g3_reg[16] + g3_reg[17] + g3_reg[18] + g3_reg[19];
	assign v3c4l0_out[5] = g3_reg[20] + g3_reg[21] + g3_reg[22] + g3_reg[23];
	assign v3c4l0_out[6] = g3_reg[24] + g3_reg[25] + g3_reg[26] + g3_reg[27];
	assign v3c4l0_out[7] = g3_reg[28] + g3_reg[29] + g3_reg[30] + g3_reg[31];
	assign v3c4l0_out[8] = g3_reg[32] + g3_reg[33] + g3_reg[34] + g3_reg[35];
	assign v3c4l0_out[9] = g3_reg[36] + g3_reg[37] + g3_reg[38] + g3_reg[39];
	assign v3c4l0_out[10] = g3_reg[40] + g3_reg[41] + g3_reg[42] + g3_reg[43];
	assign v3c4l0_out[11] = g3_reg[44] + g3_reg[45] + g3_reg[46] + g3_reg[47];
	assign v3c4l0_out[12] = g3_reg[48] + g3_reg[49] + g3_reg[50] + g3_reg[51];
	assign v3c4l0_out[13] = g3_reg[52] + g3_reg[53] + g3_reg[54];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 14; i = i + 1)
            v3c4l0[i] <= v3c4l0_out[i];
    end

	reg [3:0] v3c4l1 [0:6];
	logic [3:0] v3c4l1_out [0:6];
	assign v3c4l1_out[0] = v3c4l0[0] + v3c4l0[1];
	assign v3c4l1_out[1] = v3c4l0[2] + v3c4l0[3];
	assign v3c4l1_out[2] = v3c4l0[4] + v3c4l0[5];
	assign v3c4l1_out[3] = v3c4l0[6] + v3c4l0[7];
	assign v3c4l1_out[4] = v3c4l0[8] + v3c4l0[9];
	assign v3c4l1_out[5] = v3c4l0[10] + v3c4l0[11];
	assign v3c4l1_out[6] = v3c4l0[12] + v3c4l0[13];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 7; i = i + 1)
            v3c4l1[i] <= v3c4l1_out[i];
    end

	reg [4:0] v3c4l2 [0:3];
	logic [4:0] v3c4l2_out [0:3];
	assign v3c4l2_out[0] = v3c4l1[0] + v3c4l1[1];
	assign v3c4l2_out[1] = v3c4l1[2] + v3c4l1[3];
	assign v3c4l2_out[2] = v3c4l1[4] + v3c4l1[5];
	assign v3c4l2_out[3] = v3c4l1[6];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 4; i = i + 1)
            v3c4l2[i] <= v3c4l2_out[i];
    end

	reg [5:0] v3c4l3 [0:1];
	logic [5:0] v3c4l3_out [0:1];
	assign v3c4l3_out[0] = v3c4l2[0] + v3c4l2[1];
	assign v3c4l3_out[1] = v3c4l2[2] + v3c4l2[3];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 2; i = i + 1)
            v3c4l3[i] <= v3c4l3_out[i];
    end

	reg [6:0] v3c4l4 [0:0];
	logic [6:0] v3c4l4_out [0:0];
	assign v3c4l4_out[0] = v3c4l3[0] + v3c4l3[1];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 1; i = i + 1)
            v3c4l4[i] <= v3c4l4_out[i];
    end

	reg [7:0] v3c4l5 [0:0];
	logic [7:0] v3c4l5_out [0:0];
	assign v3c4l5_out[0] = v3c4l4[0];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 1; i = i + 1)
            v3c4l5[i] <= v3c4l5_out[i];
    end

	assign val[3] = v3c4l5[0];
	
	// -0.015625
	logic [0:35] g4;
	reg [0:35] g4_reg;
	assign g4[0] = l[41];
	assign g4[1] = l[78];
	assign g4[2] = l[89];
	assign g4[3] = l[97];
	assign g4[4] = l[242] || l[244];
	assign g4[5] = l[254];
	assign g4[6] = l[277];
	assign g4[7] = l[291];
	assign g4[8] = l[315] || l[317];
	assign g4[9] = l[384];
	assign g4[10] = l[464];
	assign g4[11] = l[506];
	assign g4[12] = l[612];
	assign g4[13] = l[630];
	assign g4[14] = l[639];
	assign g4[15] = l[666] || l[669];
	assign g4[16] = l[679];
	assign g4[17] = l[706] || l[712];
	assign g4[18] = l[813];
	assign g4[19] = l[842] || l[849];
	assign g4[20] = l[888];
	assign g4[21] = l[901];
	assign g4[22] = l[916] || l[927];
	assign g4[23] = l[946];
	assign g4[24] = l[962] || l[963] || l[966];
	assign g4[25] = l[1018] || l[1021];
	assign g4[26] = l[1029];
	assign g4[27] = l[1047];
	assign g4[28] = l[1111];
	assign g4[29] = l[1180];
	assign g4[30] = l[1225] || l[1228];
	assign g4[31] = l[1240];
	assign g4[32] = l[1264];
	assign g4[33] = l[1274] || l[1282];
	assign g4[34] = l[1285];
	assign g4[35] = l[1301];
	
    always_ff @(posedge clk) begin
        g4_reg <= g4;
    end
    
	logic [2:0] v4c4l0_out [0:8];
	logic [2:0] v4c4l0 [0:8];
	assign v4c4l0_out[0] = g4_reg[0] + g4_reg[1] + g4_reg[2] + g4_reg[3];
	assign v4c4l0_out[1] = g4_reg[4] + g4_reg[5] + g4_reg[6] + g4_reg[7];
	assign v4c4l0_out[2] = g4_reg[8] + g4_reg[9] + g4_reg[10] + g4_reg[11];
	assign v4c4l0_out[3] = g4_reg[12] + g4_reg[13] + g4_reg[14] + g4_reg[15];
	assign v4c4l0_out[4] = g4_reg[16] + g4_reg[17] + g4_reg[18] + g4_reg[19];
	assign v4c4l0_out[5] = g4_reg[20] + g4_reg[21] + g4_reg[22] + g4_reg[23];
	assign v4c4l0_out[6] = g4_reg[24] + g4_reg[25] + g4_reg[26] + g4_reg[27];
	assign v4c4l0_out[7] = g4_reg[28] + g4_reg[29] + g4_reg[30] + g4_reg[31];
	assign v4c4l0_out[8] = g4_reg[32] + g4_reg[33] + g4_reg[34] + g4_reg[35];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 9; i = i + 1)
            v4c4l0[i] <= v4c4l0_out[i];
    end

	reg [3:0] v4c4l1 [0:4];
	logic [3:0] v4c4l1_out [0:4];
	assign v4c4l1_out[0] = v4c4l0[0] + v4c4l0[1];
	assign v4c4l1_out[1] = v4c4l0[2] + v4c4l0[3];
	assign v4c4l1_out[2] = v4c4l0[4] + v4c4l0[5];
	assign v4c4l1_out[3] = v4c4l0[6] + v4c4l0[7];
	assign v4c4l1_out[4] = v4c4l0[8];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 5; i = i + 1)
            v4c4l1[i] <= v4c4l1_out[i];
    end

	reg [4:0] v4c4l2 [0:2];
	logic [4:0] v4c4l2_out [0:2];
	assign v4c4l2_out[0] = v4c4l1[0] + v4c4l1[1];
	assign v4c4l2_out[1] = v4c4l1[2] + v4c4l1[3];
	assign v4c4l2_out[2] = v4c4l1[4];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 3; i = i + 1)
            v4c4l2[i] <= v4c4l2_out[i];
    end

	reg [5:0] v4c4l3 [0:1];
	logic [5:0] v4c4l3_out [0:1];
	assign v4c4l3_out[0] = v4c4l2[0] + v4c4l2[1];
	assign v4c4l3_out[1] = v4c4l2[2];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 2; i = i + 1)
            v4c4l3[i] <= v4c4l3_out[i];
    end

	reg [6:0] v4c4l4 [0:0];
	logic [6:0] v4c4l4_out [0:0];
	assign v4c4l4_out[0] = v4c4l3[0] + v4c4l3[1];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 1; i = i + 1)
            v4c4l4[i] <= v4c4l4_out[i];
    end

	reg [7:0] v4c4l5 [0:0];
	logic [7:0] v4c4l5_out [0:0];
	assign v4c4l5_out[0] = v4c4l4[0];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 1; i = i + 1)
            v4c4l5[i] <= v4c4l5_out[i];
    end

	assign val[4] = v4c4l5[0];
	
	// 0.015625
	logic [0:43] g5;
	reg [0:43] g5_reg;
	assign g5[0] = l[49];
	assign g5[1] = l[85];
	assign g5[2] = l[130];
	assign g5[3] = l[190];
	assign g5[4] = l[199];
	assign g5[5] = l[311] || l[321];
	assign g5[6] = l[326];
	assign g5[7] = l[349] || l[352];
	assign g5[8] = l[375];
	assign g5[9] = l[440];
	assign g5[10] = l[474];
	assign g5[11] = l[518];
	assign g5[12] = l[525];
	assign g5[13] = l[604];
	assign g5[14] = l[627];
	assign g5[15] = l[636] || l[647];
	assign g5[16] = l[650];
	assign g5[17] = l[709];
	assign g5[18] = l[725];
	assign g5[19] = l[783];
	assign g5[20] = l[792];
	assign g5[21] = l[801];
	assign g5[22] = l[851];
	assign g5[23] = l[872] || l[876] || l[880] || l[883] || l[884];
	assign g5[24] = l[900];
	assign g5[25] = l[924];
	assign g5[26] = l[932] || l[943];
	assign g5[27] = l[947];
	assign g5[28] = l[954] || l[960];
	assign g5[29] = l[970];
	assign g5[30] = l[992];
	assign g5[31] = l[1019];
	assign g5[32] = l[1043];
	assign g5[33] = l[1061];
	assign g5[34] = l[1103];
	assign g5[35] = l[1109] || l[1122];
	assign g5[36] = l[1147];
	assign g5[37] = l[1156] || l[1162];
	assign g5[38] = l[1169];
	assign g5[39] = l[1179];
	assign g5[40] = l[1186];
	assign g5[41] = l[1277];
	assign g5[42] = l[1288];
	assign g5[43] = l[1309];
	
    always_ff @(posedge clk) begin
        g5_reg <= g5;
    end
    
	logic [2:0] v5c4l0_out [0:10];
	logic [2:0] v5c4l0 [0:10];
	assign v5c4l0_out[0] = g5_reg[0] + g5_reg[1] + g5_reg[2] + g5_reg[3];
	assign v5c4l0_out[1] = g5_reg[4] + g5_reg[5] + g5_reg[6] + g5_reg[7];
	assign v5c4l0_out[2] = g5_reg[8] + g5_reg[9] + g5_reg[10] + g5_reg[11];
	assign v5c4l0_out[3] = g5_reg[12] + g5_reg[13] + g5_reg[14] + g5_reg[15];
	assign v5c4l0_out[4] = g5_reg[16] + g5_reg[17] + g5_reg[18] + g5_reg[19];
	assign v5c4l0_out[5] = g5_reg[20] + g5_reg[21] + g5_reg[22] + g5_reg[23];
	assign v5c4l0_out[6] = g5_reg[24] + g5_reg[25] + g5_reg[26] + g5_reg[27];
	assign v5c4l0_out[7] = g5_reg[28] + g5_reg[29] + g5_reg[30] + g5_reg[31];
	assign v5c4l0_out[8] = g5_reg[32] + g5_reg[33] + g5_reg[34] + g5_reg[35];
	assign v5c4l0_out[9] = g5_reg[36] + g5_reg[37] + g5_reg[38] + g5_reg[39];
	assign v5c4l0_out[10] = g5_reg[40] + g5_reg[41] + g5_reg[42] + g5_reg[43];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 11; i = i + 1)
            v5c4l0[i] <= v5c4l0_out[i];
    end

	reg [3:0] v5c4l1 [0:5];
	logic [3:0] v5c4l1_out [0:5];
	assign v5c4l1_out[0] = v5c4l0[0] + v5c4l0[1];
	assign v5c4l1_out[1] = v5c4l0[2] + v5c4l0[3];
	assign v5c4l1_out[2] = v5c4l0[4] + v5c4l0[5];
	assign v5c4l1_out[3] = v5c4l0[6] + v5c4l0[7];
	assign v5c4l1_out[4] = v5c4l0[8] + v5c4l0[9];
	assign v5c4l1_out[5] = v5c4l0[10];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 6; i = i + 1)
            v5c4l1[i] <= v5c4l1_out[i];
    end

	reg [4:0] v5c4l2 [0:2];
	logic [4:0] v5c4l2_out [0:2];
	assign v5c4l2_out[0] = v5c4l1[0] + v5c4l1[1];
	assign v5c4l2_out[1] = v5c4l1[2] + v5c4l1[3];
	assign v5c4l2_out[2] = v5c4l1[4] + v5c4l1[5];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 3; i = i + 1)
            v5c4l2[i] <= v5c4l2_out[i];
    end

	reg [5:0] v5c4l3 [0:1];
	logic [5:0] v5c4l3_out [0:1];
	assign v5c4l3_out[0] = v5c4l2[0] + v5c4l2[1];
	assign v5c4l3_out[1] = v5c4l2[2];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 2; i = i + 1)
            v5c4l3[i] <= v5c4l3_out[i];
    end

	reg [6:0] v5c4l4 [0:0];
	logic [6:0] v5c4l4_out [0:0];
	assign v5c4l4_out[0] = v5c4l3[0] + v5c4l3[1];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 1; i = i + 1)
            v5c4l4[i] <= v5c4l4_out[i];
    end

	reg [7:0] v5c4l5 [0:0];
	logic [7:0] v5c4l5_out [0:0];
	assign v5c4l5_out[0] = v5c4l4[0];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 1; i = i + 1)
            v5c4l5[i] <= v5c4l5_out[i];
    end

	assign val[5] = v5c4l5[0];
	
	// 0.03125
	logic [0:56] g6;
	reg [0:56] g6_reg;
	assign g6[0] = l[50] || l[53] || l[61];
	assign g6[1] = l[110];
	assign g6[2] = l[120];
	assign g6[3] = l[168];
	assign g6[4] = l[185] || l[189];
	assign g6[5] = l[249];
	assign g6[6] = l[266];
	assign g6[7] = l[307] || l[308];
	assign g6[8] = l[347];
	assign g6[9] = l[395] || l[397] || l[401];
	assign g6[10] = l[415];
	assign g6[11] = l[429];
	assign g6[12] = l[480] || l[484];
	assign g6[13] = l[499];
	assign g6[14] = l[516];
	assign g6[15] = l[520];
	assign g6[16] = l[543];
	assign g6[17] = l[553];
	assign g6[18] = l[571] || l[577] || l[581];
	assign g6[19] = l[601] || l[609];
	assign g6[20] = l[614] || l[617] || l[619];
	assign g6[21] = l[628];
	assign g6[22] = l[663];
	assign g6[23] = l[672] || l[674];
	assign g6[24] = l[685];
	assign g6[25] = l[735] || l[742];
	assign g6[26] = l[754] || l[758] || l[766];
	assign g6[27] = l[799];
	assign g6[28] = l[802];
	assign g6[29] = l[818];
	assign g6[30] = l[827] || l[836];
	assign g6[31] = l[858] || l[860];
	assign g6[32] = l[875];
	assign g6[33] = l[890];
	assign g6[34] = l[909];
	assign g6[35] = l[914] || l[921] || l[928];
	assign g6[36] = l[952];
	assign g6[37] = l[967];
	assign g6[38] = l[980] || l[984];
	assign g6[39] = l[997];
	assign g6[40] = l[1012];
	assign g6[41] = l[1026] || l[1030];
	assign g6[42] = l[1045];
	assign g6[43] = l[1052] || l[1054];
	assign g6[44] = l[1092] || l[1097];
	assign g6[45] = l[1139];
	assign g6[46] = l[1184];
	assign g6[47] = l[1188] || l[1190];
	assign g6[48] = l[1199];
	assign g6[49] = l[1210];
	assign g6[50] = l[1223];
	assign g6[51] = l[1246];
	assign g6[52] = l[1265];
	assign g6[53] = l[1269] || l[1280];
	assign g6[54] = l[1293];
	assign g6[55] = l[1296] || l[1305];
	assign g6[56] = l[1311];
	
    always_ff @(posedge clk) begin
        g6_reg <= g6;
    end
    
	logic [2:0] v6c4l0_out [0:14];
	logic [2:0] v6c4l0 [0:14];
	assign v6c4l0_out[0] = g6_reg[0] + g6_reg[1] + g6_reg[2] + g6_reg[3];
	assign v6c4l0_out[1] = g6_reg[4] + g6_reg[5] + g6_reg[6] + g6_reg[7];
	assign v6c4l0_out[2] = g6_reg[8] + g6_reg[9] + g6_reg[10] + g6_reg[11];
	assign v6c4l0_out[3] = g6_reg[12] + g6_reg[13] + g6_reg[14] + g6_reg[15];
	assign v6c4l0_out[4] = g6_reg[16] + g6_reg[17] + g6_reg[18] + g6_reg[19];
	assign v6c4l0_out[5] = g6_reg[20] + g6_reg[21] + g6_reg[22] + g6_reg[23];
	assign v6c4l0_out[6] = g6_reg[24] + g6_reg[25] + g6_reg[26] + g6_reg[27];
	assign v6c4l0_out[7] = g6_reg[28] + g6_reg[29] + g6_reg[30] + g6_reg[31];
	assign v6c4l0_out[8] = g6_reg[32] + g6_reg[33] + g6_reg[34] + g6_reg[35];
	assign v6c4l0_out[9] = g6_reg[36] + g6_reg[37] + g6_reg[38] + g6_reg[39];
	assign v6c4l0_out[10] = g6_reg[40] + g6_reg[41] + g6_reg[42] + g6_reg[43];
	assign v6c4l0_out[11] = g6_reg[44] + g6_reg[45] + g6_reg[46] + g6_reg[47];
	assign v6c4l0_out[12] = g6_reg[48] + g6_reg[49] + g6_reg[50] + g6_reg[51];
	assign v6c4l0_out[13] = g6_reg[52] + g6_reg[53] + g6_reg[54] + g6_reg[55];
	assign v6c4l0_out[14] = g6_reg[56];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 15; i = i + 1)
            v6c4l0[i] <= v6c4l0_out[i];
    end

	reg [3:0] v6c4l1 [0:7];
	logic [3:0] v6c4l1_out [0:7];
	assign v6c4l1_out[0] = v6c4l0[0] + v6c4l0[1];
	assign v6c4l1_out[1] = v6c4l0[2] + v6c4l0[3];
	assign v6c4l1_out[2] = v6c4l0[4] + v6c4l0[5];
	assign v6c4l1_out[3] = v6c4l0[6] + v6c4l0[7];
	assign v6c4l1_out[4] = v6c4l0[8] + v6c4l0[9];
	assign v6c4l1_out[5] = v6c4l0[10] + v6c4l0[11];
	assign v6c4l1_out[6] = v6c4l0[12] + v6c4l0[13];
	assign v6c4l1_out[7] = v6c4l0[14];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 8; i = i + 1)
            v6c4l1[i] <= v6c4l1_out[i];
    end

	reg [4:0] v6c4l2 [0:3];
	logic [4:0] v6c4l2_out [0:3];
	assign v6c4l2_out[0] = v6c4l1[0] + v6c4l1[1];
	assign v6c4l2_out[1] = v6c4l1[2] + v6c4l1[3];
	assign v6c4l2_out[2] = v6c4l1[4] + v6c4l1[5];
	assign v6c4l2_out[3] = v6c4l1[6] + v6c4l1[7];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 4; i = i + 1)
            v6c4l2[i] <= v6c4l2_out[i];
    end

	reg [5:0] v6c4l3 [0:1];
	logic [5:0] v6c4l3_out [0:1];
	assign v6c4l3_out[0] = v6c4l2[0] + v6c4l2[1];
	assign v6c4l3_out[1] = v6c4l2[2] + v6c4l2[3];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 2; i = i + 1)
            v6c4l3[i] <= v6c4l3_out[i];
    end

	reg [6:0] v6c4l4 [0:0];
	logic [6:0] v6c4l4_out [0:0];
	assign v6c4l4_out[0] = v6c4l3[0] + v6c4l3[1];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 1; i = i + 1)
            v6c4l4[i] <= v6c4l4_out[i];
    end

	reg [7:0] v6c4l5 [0:0];
	logic [7:0] v6c4l5_out [0:0];
	assign v6c4l5_out[0] = v6c4l4[0];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 1; i = i + 1)
            v6c4l5[i] <= v6c4l5_out[i];
    end

	assign val[6] = v6c4l5[0];
	
	// 0.0625
	logic [0:76] g7;
	reg [0:76] g7_reg;
	assign g7[0] = l[1];
	assign g7[1] = l[25];
	assign g7[2] = l[56] || l[62];
	assign g7[3] = l[90];
	assign g7[4] = l[112];
	assign g7[5] = l[134];
	assign g7[6] = l[144] || l[155];
	assign g7[7] = l[160];
	assign g7[8] = l[176] || l[186];
	assign g7[9] = l[194] || l[206];
	assign g7[10] = l[210] || l[215];
	assign g7[11] = l[224];
	assign g7[12] = l[245] || l[248];
	assign g7[13] = l[255] || l[257] || l[260];
	assign g7[14] = l[268] || l[276];
	assign g7[15] = l[286];
	assign g7[16] = l[294] || l[299] || l[302];
	assign g7[17] = l[313] || l[318];
	assign g7[18] = l[357] || l[363] || l[369];
	assign g7[19] = l[377] || l[387];
	assign g7[20] = l[389] || l[394] || l[403];
	assign g7[21] = l[410] || l[412];
	assign g7[22] = l[431];
	assign g7[23] = l[442] || l[445];
	assign g7[24] = l[456] || l[458] || l[460];
	assign g7[25] = l[468] || l[471];
	assign g7[26] = l[493];
	assign g7[27] = l[496] || l[505] || l[510];
	assign g7[28] = l[541];
	assign g7[29] = l[560] || l[565];
	assign g7[30] = l[569] || l[583];
	assign g7[31] = l[586] || l[588] || l[590];
	assign g7[32] = l[596] || l[599];
	assign g7[33] = l[611];
	assign g7[34] = l[634] || l[644];
	assign g7[35] = l[662];
	assign g7[36] = l[680] || l[683];
	assign g7[37] = l[691];
	assign g7[38] = l[708] || l[711] || l[716];
	assign g7[39] = l[727] || l[733];
	assign g7[40] = l[737] || l[738];
	assign g7[41] = l[749];
	assign g7[42] = l[755] || l[763] || l[767];
	assign g7[43] = l[775] || l[780];
	assign g7[44] = l[789];
	assign g7[45] = l[805] || l[807];
	assign g7[46] = l[820];
	assign g7[47] = l[832];
	assign g7[48] = l[848];
	assign g7[49] = l[857] || l[867];
	assign g7[50] = l[879];
	assign g7[51] = l[918];
	assign g7[52] = l[937] || l[938];
	assign g7[53] = l[958];
	assign g7[54] = l[979];
	assign g7[55] = l[995];
	assign g7[56] = l[1003] || l[1014];
	assign g7[57] = l[1020] || l[1022];
	assign g7[58] = l[1032];
	assign g7[59] = l[1036] || l[1039] || l[1049];
	assign g7[60] = l[1057];
	assign g7[61] = l[1062] || l[1065] || l[1075];
	assign g7[62] = l[1076] || l[1079] || l[1087];
	assign g7[63] = l[1112] || l[1115] || l[1118] || l[1119];
	assign g7[64] = l[1124] || l[1126];
	assign g7[65] = l[1142] || l[1143];
	assign g7[66] = l[1149] || l[1153] || l[1159] || l[1163];
	assign g7[67] = l[1165] || l[1166];
	assign g7[68] = l[1181] || l[1182];
	assign g7[69] = l[1195];
	assign g7[70] = l[1213];
	assign g7[71] = l[1221] || l[1229] || l[1231];
	assign g7[72] = l[1233] || l[1234] || l[1239];
	assign g7[73] = l[1249] || l[1252] || l[1257];
	assign g7[74] = l[1273] || l[1284];
	assign g7[75] = l[1300] || l[1304];
	assign g7[76] = l[1308];
	
    always_ff @(posedge clk) begin
        g7_reg <= g7;
    end
    
	logic [2:0] v7c4l0_out [0:19];
	logic [2:0] v7c4l0 [0:19];
	assign v7c4l0_out[0] = g7_reg[0] + g7_reg[1] + g7_reg[2] + g7_reg[3];
	assign v7c4l0_out[1] = g7_reg[4] + g7_reg[5] + g7_reg[6] + g7_reg[7];
	assign v7c4l0_out[2] = g7_reg[8] + g7_reg[9] + g7_reg[10] + g7_reg[11];
	assign v7c4l0_out[3] = g7_reg[12] + g7_reg[13] + g7_reg[14] + g7_reg[15];
	assign v7c4l0_out[4] = g7_reg[16] + g7_reg[17] + g7_reg[18] + g7_reg[19];
	assign v7c4l0_out[5] = g7_reg[20] + g7_reg[21] + g7_reg[22] + g7_reg[23];
	assign v7c4l0_out[6] = g7_reg[24] + g7_reg[25] + g7_reg[26] + g7_reg[27];
	assign v7c4l0_out[7] = g7_reg[28] + g7_reg[29] + g7_reg[30] + g7_reg[31];
	assign v7c4l0_out[8] = g7_reg[32] + g7_reg[33] + g7_reg[34] + g7_reg[35];
	assign v7c4l0_out[9] = g7_reg[36] + g7_reg[37] + g7_reg[38] + g7_reg[39];
	assign v7c4l0_out[10] = g7_reg[40] + g7_reg[41] + g7_reg[42] + g7_reg[43];
	assign v7c4l0_out[11] = g7_reg[44] + g7_reg[45] + g7_reg[46] + g7_reg[47];
	assign v7c4l0_out[12] = g7_reg[48] + g7_reg[49] + g7_reg[50] + g7_reg[51];
	assign v7c4l0_out[13] = g7_reg[52] + g7_reg[53] + g7_reg[54] + g7_reg[55];
	assign v7c4l0_out[14] = g7_reg[56] + g7_reg[57] + g7_reg[58] + g7_reg[59];
	assign v7c4l0_out[15] = g7_reg[60] + g7_reg[61] + g7_reg[62] + g7_reg[63];
	assign v7c4l0_out[16] = g7_reg[64] + g7_reg[65] + g7_reg[66] + g7_reg[67];
	assign v7c4l0_out[17] = g7_reg[68] + g7_reg[69] + g7_reg[70] + g7_reg[71];
	assign v7c4l0_out[18] = g7_reg[72] + g7_reg[73] + g7_reg[74] + g7_reg[75];
	assign v7c4l0_out[19] = g7_reg[76];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 20; i = i + 1)
            v7c4l0[i] <= v7c4l0_out[i];
    end

	reg [3:0] v7c4l1 [0:9];
	logic [3:0] v7c4l1_out [0:9];
	assign v7c4l1_out[0] = v7c4l0[0] + v7c4l0[1];
	assign v7c4l1_out[1] = v7c4l0[2] + v7c4l0[3];
	assign v7c4l1_out[2] = v7c4l0[4] + v7c4l0[5];
	assign v7c4l1_out[3] = v7c4l0[6] + v7c4l0[7];
	assign v7c4l1_out[4] = v7c4l0[8] + v7c4l0[9];
	assign v7c4l1_out[5] = v7c4l0[10] + v7c4l0[11];
	assign v7c4l1_out[6] = v7c4l0[12] + v7c4l0[13];
	assign v7c4l1_out[7] = v7c4l0[14] + v7c4l0[15];
	assign v7c4l1_out[8] = v7c4l0[16] + v7c4l0[17];
	assign v7c4l1_out[9] = v7c4l0[18] + v7c4l0[19];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 10; i = i + 1)
            v7c4l1[i] <= v7c4l1_out[i];
    end

	reg [4:0] v7c4l2 [0:4];
	logic [4:0] v7c4l2_out [0:4];
	assign v7c4l2_out[0] = v7c4l1[0] + v7c4l1[1];
	assign v7c4l2_out[1] = v7c4l1[2] + v7c4l1[3];
	assign v7c4l2_out[2] = v7c4l1[4] + v7c4l1[5];
	assign v7c4l2_out[3] = v7c4l1[6] + v7c4l1[7];
	assign v7c4l2_out[4] = v7c4l1[8] + v7c4l1[9];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 5; i = i + 1)
            v7c4l2[i] <= v7c4l2_out[i];
    end

	reg [5:0] v7c4l3 [0:2];
	logic [5:0] v7c4l3_out [0:2];
	assign v7c4l3_out[0] = v7c4l2[0] + v7c4l2[1];
	assign v7c4l3_out[1] = v7c4l2[2] + v7c4l2[3];
	assign v7c4l3_out[2] = v7c4l2[4];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 3; i = i + 1)
            v7c4l3[i] <= v7c4l3_out[i];
    end

	reg [6:0] v7c4l4 [0:1];
	logic [6:0] v7c4l4_out [0:1];
	assign v7c4l4_out[0] = v7c4l3[0] + v7c4l3[1];
	assign v7c4l4_out[1] = v7c4l3[2];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 2; i = i + 1)
            v7c4l4[i] <= v7c4l4_out[i];
    end

	reg [7:0] v7c4l5 [0:0];
	logic [7:0] v7c4l5_out [0:0];
	assign v7c4l5_out[0] = v7c4l4[0] + v7c4l4[1];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 1; i = i + 1)
            v7c4l5[i] <= v7c4l5_out[i];
    end

	assign val[7] = v7c4l5[0];
	
	// 0.125
	logic [0:71] g8;
	reg [0:71] g8_reg;
	assign g8[0] = l[5];
	assign g8[1] = l[33] || l[38] || l[44];
	assign g8[2] = l[59];
	assign g8[3] = l[82] || l[95];
	assign g8[4] = l[98] || l[100];
	assign g8[5] = l[122];
	assign g8[6] = l[128] || l[132];
	assign g8[7] = l[150] || l[152];
	assign g8[8] = l[166] || l[169] || l[173];
	assign g8[9] = l[182] || l[188];
	assign g8[10] = l[193] || l[197] || l[200] || l[204];
	assign g8[11] = l[212] || l[220];
	assign g8[12] = l[227] || l[229] || l[233];
	assign g8[13] = l[243] || l[251];
	assign g8[14] = l[258];
	assign g8[15] = l[279];
	assign g8[16] = l[282] || l[288];
	assign g8[17] = l[306];
	assign g8[18] = l[322] || l[325];
	assign g8[19] = l[333] || l[335] || l[339];
	assign g8[20] = l[343] || l[351] || l[355];
	assign g8[21] = l[365] || l[372];
	assign g8[22] = l[379] || l[382] || l[385];
	assign g8[23] = l[402];
	assign g8[24] = l[436] || l[438];
	assign g8[25] = l[446] || l[453];
	assign g8[26] = l[467] || l[473] || l[477] || l[479];
	assign g8[27] = l[500] || l[507];
	assign g8[28] = l[517];
	assign g8[29] = l[526];
	assign g8[30] = l[536];
	assign g8[31] = l[545];
	assign g8[32] = l[552];
	assign g8[33] = l[575];
	assign g8[34] = l[598] || l[606];
	assign g8[35] = l[618] || l[624];
	assign g8[36] = l[641];
	assign g8[37] = l[657] || l[659];
	assign g8[38] = l[689] || l[694] || l[699];
	assign g8[39] = l[720] || l[723];
	assign g8[40] = l[761];
	assign g8[41] = l[770] || l[772] || l[777] || l[778];
	assign g8[42] = l[784] || l[790] || l[797];
	assign g8[43] = l[806] || l[812];
	assign g8[44] = l[825] || l[828] || l[831] || l[838];
	assign g8[45] = l[855];
	assign g8[46] = l[864];
	assign g8[47] = l[885] || l[887];
	assign g8[48] = l[889] || l[895];
	assign g8[49] = l[923];
	assign g8[50] = l[934];
	assign g8[51] = l[961] || l[965];
	assign g8[52] = l[983];
	assign g8[53] = l[999] || l[1002];
	assign g8[54] = l[1006] || l[1017];
	assign g8[55] = l[1037] || l[1044];
	assign g8[56] = l[1051];
	assign g8[57] = l[1066] || l[1068] || l[1070];
	assign g8[58] = l[1081] || l[1085] || l[1088];
	assign g8[59] = l[1094] || l[1099];
	assign g8[60] = l[1145];
	assign g8[61] = l[1154];
	assign g8[62] = l[1171];
	assign g8[63] = l[1177];
	assign g8[64] = l[1193];
	assign g8[65] = l[1224] || l[1227];
	assign g8[66] = l[1236] || l[1241];
	assign g8[67] = l[1250];
	assign g8[68] = l[1278];
	assign g8[69] = l[1286] || l[1289] || l[1292];
	assign g8[70] = l[1297];
	assign g8[71] = l[1310];
	
    always_ff @(posedge clk) begin
        g8_reg <= g8;
    end
    
	logic [2:0] v8c4l0_out [0:17];
	logic [2:0] v8c4l0 [0:17];
	assign v8c4l0_out[0] = g8_reg[0] + g8_reg[1] + g8_reg[2] + g8_reg[3];
	assign v8c4l0_out[1] = g8_reg[4] + g8_reg[5] + g8_reg[6] + g8_reg[7];
	assign v8c4l0_out[2] = g8_reg[8] + g8_reg[9] + g8_reg[10] + g8_reg[11];
	assign v8c4l0_out[3] = g8_reg[12] + g8_reg[13] + g8_reg[14] + g8_reg[15];
	assign v8c4l0_out[4] = g8_reg[16] + g8_reg[17] + g8_reg[18] + g8_reg[19];
	assign v8c4l0_out[5] = g8_reg[20] + g8_reg[21] + g8_reg[22] + g8_reg[23];
	assign v8c4l0_out[6] = g8_reg[24] + g8_reg[25] + g8_reg[26] + g8_reg[27];
	assign v8c4l0_out[7] = g8_reg[28] + g8_reg[29] + g8_reg[30] + g8_reg[31];
	assign v8c4l0_out[8] = g8_reg[32] + g8_reg[33] + g8_reg[34] + g8_reg[35];
	assign v8c4l0_out[9] = g8_reg[36] + g8_reg[37] + g8_reg[38] + g8_reg[39];
	assign v8c4l0_out[10] = g8_reg[40] + g8_reg[41] + g8_reg[42] + g8_reg[43];
	assign v8c4l0_out[11] = g8_reg[44] + g8_reg[45] + g8_reg[46] + g8_reg[47];
	assign v8c4l0_out[12] = g8_reg[48] + g8_reg[49] + g8_reg[50] + g8_reg[51];
	assign v8c4l0_out[13] = g8_reg[52] + g8_reg[53] + g8_reg[54] + g8_reg[55];
	assign v8c4l0_out[14] = g8_reg[56] + g8_reg[57] + g8_reg[58] + g8_reg[59];
	assign v8c4l0_out[15] = g8_reg[60] + g8_reg[61] + g8_reg[62] + g8_reg[63];
	assign v8c4l0_out[16] = g8_reg[64] + g8_reg[65] + g8_reg[66] + g8_reg[67];
	assign v8c4l0_out[17] = g8_reg[68] + g8_reg[69] + g8_reg[70] + g8_reg[71];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 18; i = i + 1)
            v8c4l0[i] <= v8c4l0_out[i];
    end

	reg [3:0] v8c4l1 [0:8];
	logic [3:0] v8c4l1_out [0:8];
	assign v8c4l1_out[0] = v8c4l0[0] + v8c4l0[1];
	assign v8c4l1_out[1] = v8c4l0[2] + v8c4l0[3];
	assign v8c4l1_out[2] = v8c4l0[4] + v8c4l0[5];
	assign v8c4l1_out[3] = v8c4l0[6] + v8c4l0[7];
	assign v8c4l1_out[4] = v8c4l0[8] + v8c4l0[9];
	assign v8c4l1_out[5] = v8c4l0[10] + v8c4l0[11];
	assign v8c4l1_out[6] = v8c4l0[12] + v8c4l0[13];
	assign v8c4l1_out[7] = v8c4l0[14] + v8c4l0[15];
	assign v8c4l1_out[8] = v8c4l0[16] + v8c4l0[17];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 9; i = i + 1)
            v8c4l1[i] <= v8c4l1_out[i];
    end

	reg [4:0] v8c4l2 [0:4];
	logic [4:0] v8c4l2_out [0:4];
	assign v8c4l2_out[0] = v8c4l1[0] + v8c4l1[1];
	assign v8c4l2_out[1] = v8c4l1[2] + v8c4l1[3];
	assign v8c4l2_out[2] = v8c4l1[4] + v8c4l1[5];
	assign v8c4l2_out[3] = v8c4l1[6] + v8c4l1[7];
	assign v8c4l2_out[4] = v8c4l1[8];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 5; i = i + 1)
            v8c4l2[i] <= v8c4l2_out[i];
    end

	reg [5:0] v8c4l3 [0:2];
	logic [5:0] v8c4l3_out [0:2];
	assign v8c4l3_out[0] = v8c4l2[0] + v8c4l2[1];
	assign v8c4l3_out[1] = v8c4l2[2] + v8c4l2[3];
	assign v8c4l3_out[2] = v8c4l2[4];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 3; i = i + 1)
            v8c4l3[i] <= v8c4l3_out[i];
    end

	reg [6:0] v8c4l4 [0:1];
	logic [6:0] v8c4l4_out [0:1];
	assign v8c4l4_out[0] = v8c4l3[0] + v8c4l3[1];
	assign v8c4l4_out[1] = v8c4l3[2];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 2; i = i + 1)
            v8c4l4[i] <= v8c4l4_out[i];
    end

	reg [7:0] v8c4l5 [0:0];
	logic [7:0] v8c4l5_out [0:0];
	assign v8c4l5_out[0] = v8c4l4[0] + v8c4l4[1];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 1; i = i + 1)
            v8c4l5[i] <= v8c4l5_out[i];
    end

	assign val[8] = v8c4l5[0];
	
	// 0.25
	logic [0:35] g9;
	reg [0:35] g9_reg;
	assign g9[0] = l[20];
	assign g9[1] = l[54] || l[58];
	assign g9[2] = l[64] || l[67] || l[71] || l[74] || l[76];
	assign g9[3] = l[88] || l[93];
	assign g9[4] = l[102] || l[108];
	assign g9[5] = l[118] || l[126];
	assign g9[6] = l[135] || l[138];
	assign g9[7] = l[158];
	assign g9[8] = l[174];
	assign g9[9] = l[250];
	assign g9[10] = l[263];
	assign g9[11] = l[408];
	assign g9[12] = l[488];
	assign g9[13] = l[522];
	assign g9[14] = l[638];
	assign g9[15] = l[653] || l[658];
	assign g9[16] = l[668];
	assign g9[17] = l[701];
	assign g9[18] = l[713];
	assign g9[19] = l[730];
	assign g9[20] = l[757];
	assign g9[21] = l[808];
	assign g9[22] = l[841] || l[852];
	assign g9[23] = l[870];
	assign g9[24] = l[877];
	assign g9[25] = l[935] || l[944];
	assign g9[26] = l[977] || l[981];
	assign g9[27] = l[998];
	assign g9[28] = l[1082];
	assign g9[29] = l[1116];
	assign g9[30] = l[1131];
	assign g9[31] = l[1137] || l[1144];
	assign g9[32] = l[1191];
	assign g9[33] = l[1205];
	assign g9[34] = l[1259];
	assign g9[35] = l[1303];
	
    always_ff @(posedge clk) begin
        g9_reg <= g9;
    end
    
	logic [2:0] v9c4l0_out [0:8];
	logic [2:0] v9c4l0 [0:8];
	assign v9c4l0_out[0] = g9_reg[0] + g9_reg[1] + g9_reg[2] + g9_reg[3];
	assign v9c4l0_out[1] = g9_reg[4] + g9_reg[5] + g9_reg[6] + g9_reg[7];
	assign v9c4l0_out[2] = g9_reg[8] + g9_reg[9] + g9_reg[10] + g9_reg[11];
	assign v9c4l0_out[3] = g9_reg[12] + g9_reg[13] + g9_reg[14] + g9_reg[15];
	assign v9c4l0_out[4] = g9_reg[16] + g9_reg[17] + g9_reg[18] + g9_reg[19];
	assign v9c4l0_out[5] = g9_reg[20] + g9_reg[21] + g9_reg[22] + g9_reg[23];
	assign v9c4l0_out[6] = g9_reg[24] + g9_reg[25] + g9_reg[26] + g9_reg[27];
	assign v9c4l0_out[7] = g9_reg[28] + g9_reg[29] + g9_reg[30] + g9_reg[31];
	assign v9c4l0_out[8] = g9_reg[32] + g9_reg[33] + g9_reg[34] + g9_reg[35];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 9; i = i + 1)
            v9c4l0[i] <= v9c4l0_out[i];
    end

	reg [3:0] v9c4l1 [0:4];
	logic [3:0] v9c4l1_out [0:4];
	assign v9c4l1_out[0] = v9c4l0[0] + v9c4l0[1];
	assign v9c4l1_out[1] = v9c4l0[2] + v9c4l0[3];
	assign v9c4l1_out[2] = v9c4l0[4] + v9c4l0[5];
	assign v9c4l1_out[3] = v9c4l0[6] + v9c4l0[7];
	assign v9c4l1_out[4] = v9c4l0[8];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 5; i = i + 1)
            v9c4l1[i] <= v9c4l1_out[i];
    end

	reg [4:0] v9c4l2 [0:2];
	logic [4:0] v9c4l2_out [0:2];
	assign v9c4l2_out[0] = v9c4l1[0] + v9c4l1[1];
	assign v9c4l2_out[1] = v9c4l1[2] + v9c4l1[3];
	assign v9c4l2_out[2] = v9c4l1[4];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 3; i = i + 1)
            v9c4l2[i] <= v9c4l2_out[i];
    end

	reg [5:0] v9c4l3 [0:1];
	logic [5:0] v9c4l3_out [0:1];
	assign v9c4l3_out[0] = v9c4l2[0] + v9c4l2[1];
	assign v9c4l3_out[1] = v9c4l2[2];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 2; i = i + 1)
            v9c4l3[i] <= v9c4l3_out[i];
    end

	reg [6:0] v9c4l4 [0:0];
	logic [6:0] v9c4l4_out [0:0];
	assign v9c4l4_out[0] = v9c4l3[0] + v9c4l3[1];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 1; i = i + 1)
            v9c4l4[i] <= v9c4l4_out[i];
    end

	reg [7:0] v9c4l5 [0:0];
	logic [7:0] v9c4l5_out [0:0];
	assign v9c4l5_out[0] = v9c4l4[0];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 1; i = i + 1)
            v9c4l5[i] <= v9c4l5_out[i];
    end

	assign val[9] = v9c4l5[0];
	
	// 0.5
	logic [0:3] g10;
	reg [0:3] g10_reg;
	assign g10[0] = l[2] || l[12];
	assign g10[1] = l[19] || l[24] || l[30];
	assign g10[2] = l[34] || l[42];
	assign g10[3] = l[933];
	
    always_ff @(posedge clk) begin
        g10_reg <= g10;
    end
    
	logic [2:0] v10c4l0_out [0:0];
	logic [2:0] v10c4l0 [0:0];
	assign v10c4l0_out[0] = g10_reg[0] + g10_reg[1] + g10_reg[2] + g10_reg[3];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 1; i = i + 1)
            v10c4l0[i] <= v10c4l0_out[i];
    end

	reg [3:0] v10c4l1 [0:0];
	logic [3:0] v10c4l1_out [0:0];
	assign v10c4l1_out[0] = v10c4l0[0];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 1; i = i + 1)
            v10c4l1[i] <= v10c4l1_out[i];
    end

	reg [4:0] v10c4l2 [0:0];
	logic [4:0] v10c4l2_out [0:0];
	assign v10c4l2_out[0] = v10c4l1[0];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 1; i = i + 1)
            v10c4l2[i] <= v10c4l2_out[i];
    end

	reg [5:0] v10c4l3 [0:0];
	logic [5:0] v10c4l3_out [0:0];
	assign v10c4l3_out[0] = v10c4l2[0];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 1; i = i + 1)
            v10c4l3[i] <= v10c4l3_out[i];
    end

	reg [6:0] v10c4l4 [0:0];
	logic [6:0] v10c4l4_out [0:0];
	assign v10c4l4_out[0] = v10c4l3[0];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 1; i = i + 1)
            v10c4l4[i] <= v10c4l4_out[i];
    end

	reg [7:0] v10c4l5 [0:0];
	logic [7:0] v10c4l5_out [0:0];
	assign v10c4l5_out[0] = v10c4l4[0];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 1; i = i + 1)
            v10c4l5[i] <= v10c4l5_out[i];
    end

	assign val[10] = v10c4l5[0];
	
	// 1.0
	logic [0:0] g11;
	reg [0:0] g11_reg;
	assign g11[0] = l[4] || l[7];
	
    always_ff @(posedge clk) begin
        g11_reg <= g11;
    end
    
	logic [2:0] v11c4l0_out [0:0];
	logic [2:0] v11c4l0 [0:0];
	assign v11c4l0_out[0] = g11_reg[0];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 1; i = i + 1)
            v11c4l0[i] <= v11c4l0_out[i];
    end

	reg [3:0] v11c4l1 [0:0];
	logic [3:0] v11c4l1_out [0:0];
	assign v11c4l1_out[0] = v11c4l0[0];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 1; i = i + 1)
            v11c4l1[i] <= v11c4l1_out[i];
    end

	reg [4:0] v11c4l2 [0:0];
	logic [4:0] v11c4l2_out [0:0];
	assign v11c4l2_out[0] = v11c4l1[0];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 1; i = i + 1)
            v11c4l2[i] <= v11c4l2_out[i];
    end

	reg [5:0] v11c4l3 [0:0];
	logic [5:0] v11c4l3_out [0:0];
	assign v11c4l3_out[0] = v11c4l2[0];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 1; i = i + 1)
            v11c4l3[i] <= v11c4l3_out[i];
    end

	reg [6:0] v11c4l4 [0:0];
	logic [6:0] v11c4l4_out [0:0];
	assign v11c4l4_out[0] = v11c4l3[0];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 1; i = i + 1)
            v11c4l4[i] <= v11c4l4_out[i];
    end

	reg [7:0] v11c4l5 [0:0];
	logic [7:0] v11c4l5_out [0:0];
	assign v11c4l5_out[0] = v11c4l4[0];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 1; i = i + 1)
            v11c4l5[i] <= v11c4l5_out[i];
    end

	assign val[11] = v11c4l5[0];
	
	// 2.0
	assign val[12] = 0;
	
endmodule


module leaf_counter_5(input logic clk, input logic [0:1401] l, output logic [7:0] val [0:12]);
    integer i;
	// -0.25
	logic [0:53] g0;
	reg [0:53] g0_reg;
	assign g0[0] = l[5] || l[7] || l[10] || l[14];
	assign g0[1] = l[20] || l[21];
	assign g0[2] = l[32] || l[37] || l[38] || l[44];
	assign g0[3] = l[49] || l[56] || l[59] || l[60];
	assign g0[4] = l[85] || l[87];
	assign g0[5] = l[104] || l[106];
	assign g0[6] = l[124];
	assign g0[7] = l[131];
	assign g0[8] = l[149] || l[152] || l[154];
	assign g0[9] = l[172];
	assign g0[10] = l[179] || l[180] || l[184] || l[186];
	assign g0[11] = l[192];
	assign g0[12] = l[240] || l[242];
	assign g0[13] = l[263];
	assign g0[14] = l[273] || l[278];
	assign g0[15] = l[312];
	assign g0[16] = l[315];
	assign g0[17] = l[348];
	assign g0[18] = l[362] || l[370];
	assign g0[19] = l[379] || l[386];
	assign g0[20] = l[442];
	assign g0[21] = l[461];
	assign g0[22] = l[517];
	assign g0[23] = l[528] || l[529];
	assign g0[24] = l[537] || l[540] || l[541] || l[544];
	assign g0[25] = l[553];
	assign g0[26] = l[594];
	assign g0[27] = l[601] || l[603] || l[607];
	assign g0[28] = l[628];
	assign g0[29] = l[650];
	assign g0[30] = l[681];
	assign g0[31] = l[700];
	assign g0[32] = l[715];
	assign g0[33] = l[726] || l[732];
	assign g0[34] = l[742];
	assign g0[35] = l[770];
	assign g0[36] = l[792];
	assign g0[37] = l[798] || l[802] || l[803];
	assign g0[38] = l[836] || l[837] || l[839];
	assign g0[39] = l[852];
	assign g0[40] = l[863] || l[867];
	assign g0[41] = l[883];
	assign g0[42] = l[962] || l[969];
	assign g0[43] = l[987];
	assign g0[44] = l[1014];
	assign g0[45] = l[1023];
	assign g0[46] = l[1060];
	assign g0[47] = l[1121];
	assign g0[48] = l[1201];
	assign g0[49] = l[1212];
	assign g0[50] = l[1238];
	assign g0[51] = l[1262];
	assign g0[52] = l[1281];
	assign g0[53] = l[1331];
	
    always_ff @(posedge clk) begin
        g0_reg <= g0;
    end
    
	logic [2:0] v0c5l0_out [0:13];
	logic [2:0] v0c5l0 [0:13];
	assign v0c5l0_out[0] = g0_reg[0] + g0_reg[1] + g0_reg[2] + g0_reg[3];
	assign v0c5l0_out[1] = g0_reg[4] + g0_reg[5] + g0_reg[6] + g0_reg[7];
	assign v0c5l0_out[2] = g0_reg[8] + g0_reg[9] + g0_reg[10] + g0_reg[11];
	assign v0c5l0_out[3] = g0_reg[12] + g0_reg[13] + g0_reg[14] + g0_reg[15];
	assign v0c5l0_out[4] = g0_reg[16] + g0_reg[17] + g0_reg[18] + g0_reg[19];
	assign v0c5l0_out[5] = g0_reg[20] + g0_reg[21] + g0_reg[22] + g0_reg[23];
	assign v0c5l0_out[6] = g0_reg[24] + g0_reg[25] + g0_reg[26] + g0_reg[27];
	assign v0c5l0_out[7] = g0_reg[28] + g0_reg[29] + g0_reg[30] + g0_reg[31];
	assign v0c5l0_out[8] = g0_reg[32] + g0_reg[33] + g0_reg[34] + g0_reg[35];
	assign v0c5l0_out[9] = g0_reg[36] + g0_reg[37] + g0_reg[38] + g0_reg[39];
	assign v0c5l0_out[10] = g0_reg[40] + g0_reg[41] + g0_reg[42] + g0_reg[43];
	assign v0c5l0_out[11] = g0_reg[44] + g0_reg[45] + g0_reg[46] + g0_reg[47];
	assign v0c5l0_out[12] = g0_reg[48] + g0_reg[49] + g0_reg[50] + g0_reg[51];
	assign v0c5l0_out[13] = g0_reg[52] + g0_reg[53];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 14; i = i + 1)
            v0c5l0[i] <= v0c5l0_out[i];
    end

	reg [3:0] v0c5l1 [0:6];
	logic [3:0] v0c5l1_out [0:6];
	assign v0c5l1_out[0] = v0c5l0[0] + v0c5l0[1];
	assign v0c5l1_out[1] = v0c5l0[2] + v0c5l0[3];
	assign v0c5l1_out[2] = v0c5l0[4] + v0c5l0[5];
	assign v0c5l1_out[3] = v0c5l0[6] + v0c5l0[7];
	assign v0c5l1_out[4] = v0c5l0[8] + v0c5l0[9];
	assign v0c5l1_out[5] = v0c5l0[10] + v0c5l0[11];
	assign v0c5l1_out[6] = v0c5l0[12] + v0c5l0[13];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 7; i = i + 1)
            v0c5l1[i] <= v0c5l1_out[i];
    end

	reg [4:0] v0c5l2 [0:3];
	logic [4:0] v0c5l2_out [0:3];
	assign v0c5l2_out[0] = v0c5l1[0] + v0c5l1[1];
	assign v0c5l2_out[1] = v0c5l1[2] + v0c5l1[3];
	assign v0c5l2_out[2] = v0c5l1[4] + v0c5l1[5];
	assign v0c5l2_out[3] = v0c5l1[6];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 4; i = i + 1)
            v0c5l2[i] <= v0c5l2_out[i];
    end

	reg [5:0] v0c5l3 [0:1];
	logic [5:0] v0c5l3_out [0:1];
	assign v0c5l3_out[0] = v0c5l2[0] + v0c5l2[1];
	assign v0c5l3_out[1] = v0c5l2[2] + v0c5l2[3];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 2; i = i + 1)
            v0c5l3[i] <= v0c5l3_out[i];
    end

	reg [6:0] v0c5l4 [0:0];
	logic [6:0] v0c5l4_out [0:0];
	assign v0c5l4_out[0] = v0c5l3[0] + v0c5l3[1];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 1; i = i + 1)
            v0c5l4[i] <= v0c5l4_out[i];
    end

	reg [7:0] v0c5l5 [0:0];
	logic [7:0] v0c5l5_out [0:0];
	assign v0c5l5_out[0] = v0c5l4[0];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 1; i = i + 1)
            v0c5l5[i] <= v0c5l5_out[i];
    end

	assign val[0] = v0c5l5[0];
	
	// -0.125
	logic [0:95] g1;
	reg [0:95] g1_reg;
	assign g1[0] = l[0] || l[13];
	assign g1[1] = l[15] || l[18] || l[23] || l[24] || l[28];
	assign g1[2] = l[34] || l[41];
	assign g1[3] = l[48] || l[50] || l[53] || l[55];
	assign g1[4] = l[62] || l[65] || l[69] || l[71] || l[72] || l[75] || l[77];
	assign g1[5] = l[79] || l[80] || l[82] || l[86] || l[89] || l[92];
	assign g1[6] = l[95] || l[96] || l[98] || l[101] || l[103] || l[105] || l[109];
	assign g1[7] = l[112] || l[113] || l[114] || l[119] || l[121] || l[122];
	assign g1[8] = l[129] || l[132] || l[136] || l[138] || l[140] || l[141];
	assign g1[9] = l[143] || l[144] || l[146] || l[153] || l[155] || l[157];
	assign g1[10] = l[160] || l[165] || l[166] || l[169];
	assign g1[11] = l[176] || l[188];
	assign g1[12] = l[194] || l[195] || l[200] || l[202] || l[203];
	assign g1[13] = l[210] || l[212] || l[214] || l[216] || l[219];
	assign g1[14] = l[224] || l[226] || l[228] || l[233] || l[235] || l[236];
	assign g1[15] = l[243] || l[247] || l[249] || l[252];
	assign g1[16] = l[256] || l[259] || l[264] || l[265];
	assign g1[17] = l[271] || l[274] || l[280] || l[282];
	assign g1[18] = l[287] || l[289] || l[291] || l[294] || l[296];
	assign g1[19] = l[300] || l[308] || l[311];
	assign g1[20] = l[314] || l[320] || l[325];
	assign g1[21] = l[332] || l[337] || l[339] || l[340] || l[342];
	assign g1[22] = l[344] || l[347] || l[355] || l[356] || l[358];
	assign g1[23] = l[365] || l[366] || l[371] || l[372] || l[374];
	assign g1[24] = l[382] || l[388] || l[389];
	assign g1[25] = l[395] || l[398];
	assign g1[26] = l[409] || l[412] || l[416] || l[419] || l[420];
	assign g1[27] = l[425] || l[427] || l[432];
	assign g1[28] = l[440] || l[444] || l[448] || l[450] || l[451];
	assign g1[29] = l[456] || l[458];
	assign g1[30] = l[464] || l[465] || l[473] || l[475];
	assign g1[31] = l[481] || l[486];
	assign g1[32] = l[499] || l[500] || l[502];
	assign g1[33] = l[506] || l[509] || l[515];
	assign g1[34] = l[526];
	assign g1[35] = l[533] || l[536] || l[545];
	assign g1[36] = l[560];
	assign g1[37] = l[567] || l[569];
	assign g1[38] = l[575] || l[578] || l[584];
	assign g1[39] = l[587] || l[590] || l[592];
	assign g1[40] = l[599];
	assign g1[41] = l[615] || l[620];
	assign g1[42] = l[633] || l[635] || l[637] || l[639];
	assign g1[43] = l[649] || l[652] || l[655];
	assign g1[44] = l[662];
	assign g1[45] = l[677] || l[679] || l[682] || l[684];
	assign g1[46] = l[690] || l[698] || l[702];
	assign g1[47] = l[705] || l[706] || l[708] || l[712] || l[718];
	assign g1[48] = l[723] || l[728];
	assign g1[49] = l[739] || l[746];
	assign g1[50] = l[753] || l[755];
	assign g1[51] = l[758] || l[761] || l[762] || l[765] || l[769];
	assign g1[52] = l[778] || l[779];
	assign g1[53] = l[784] || l[787] || l[790] || l[795];
	assign g1[54] = l[811] || l[815] || l[816] || l[819] || l[821];
	assign g1[55] = l[831] || l[832];
	assign g1[56] = l[842] || l[848] || l[855];
	assign g1[57] = l[864];
	assign g1[58] = l[879];
	assign g1[59] = l[892] || l[893] || l[898];
	assign g1[60] = l[900] || l[906] || l[913] || l[914];
	assign g1[61] = l[917] || l[919];
	assign g1[62] = l[942] || l[947] || l[951] || l[953];
	assign g1[63] = l[966];
	assign g1[64] = l[975] || l[976] || l[978];
	assign g1[65] = l[985] || l[988];
	assign g1[66] = l[996] || l[1002];
	assign g1[67] = l[1013];
	assign g1[68] = l[1022] || l[1025];
	assign g1[69] = l[1036];
	assign g1[70] = l[1048] || l[1052];
	assign g1[71] = l[1055] || l[1067];
	assign g1[72] = l[1075] || l[1080] || l[1083];
	assign g1[73] = l[1087] || l[1092] || l[1093];
	assign g1[74] = l[1101] || l[1106] || l[1109];
	assign g1[75] = l[1116];
	assign g1[76] = l[1127] || l[1130] || l[1133] || l[1135];
	assign g1[77] = l[1145] || l[1147];
	assign g1[78] = l[1153] || l[1161];
	assign g1[79] = l[1165] || l[1168] || l[1176] || l[1178];
	assign g1[80] = l[1186] || l[1187];
	assign g1[81] = l[1196] || l[1197] || l[1203];
	assign g1[82] = l[1223] || l[1228] || l[1230];
	assign g1[83] = l[1235];
	assign g1[84] = l[1244] || l[1245] || l[1254];
	assign g1[85] = l[1258] || l[1268] || l[1269];
	assign g1[86] = l[1278];
	assign g1[87] = l[1292] || l[1295];
	assign g1[88] = l[1303] || l[1305] || l[1313];
	assign g1[89] = l[1321];
	assign g1[90] = l[1328];
	assign g1[91] = l[1337] || l[1339] || l[1345] || l[1348];
	assign g1[92] = l[1354] || l[1356];
	assign g1[93] = l[1370] || l[1371];
	assign g1[94] = l[1377] || l[1378] || l[1386];
	assign g1[95] = l[1394] || l[1395] || l[1401];
	
    always_ff @(posedge clk) begin
        g1_reg <= g1;
    end
    
	logic [2:0] v1c5l0_out [0:23];
	logic [2:0] v1c5l0 [0:23];
	assign v1c5l0_out[0] = g1_reg[0] + g1_reg[1] + g1_reg[2] + g1_reg[3];
	assign v1c5l0_out[1] = g1_reg[4] + g1_reg[5] + g1_reg[6] + g1_reg[7];
	assign v1c5l0_out[2] = g1_reg[8] + g1_reg[9] + g1_reg[10] + g1_reg[11];
	assign v1c5l0_out[3] = g1_reg[12] + g1_reg[13] + g1_reg[14] + g1_reg[15];
	assign v1c5l0_out[4] = g1_reg[16] + g1_reg[17] + g1_reg[18] + g1_reg[19];
	assign v1c5l0_out[5] = g1_reg[20] + g1_reg[21] + g1_reg[22] + g1_reg[23];
	assign v1c5l0_out[6] = g1_reg[24] + g1_reg[25] + g1_reg[26] + g1_reg[27];
	assign v1c5l0_out[7] = g1_reg[28] + g1_reg[29] + g1_reg[30] + g1_reg[31];
	assign v1c5l0_out[8] = g1_reg[32] + g1_reg[33] + g1_reg[34] + g1_reg[35];
	assign v1c5l0_out[9] = g1_reg[36] + g1_reg[37] + g1_reg[38] + g1_reg[39];
	assign v1c5l0_out[10] = g1_reg[40] + g1_reg[41] + g1_reg[42] + g1_reg[43];
	assign v1c5l0_out[11] = g1_reg[44] + g1_reg[45] + g1_reg[46] + g1_reg[47];
	assign v1c5l0_out[12] = g1_reg[48] + g1_reg[49] + g1_reg[50] + g1_reg[51];
	assign v1c5l0_out[13] = g1_reg[52] + g1_reg[53] + g1_reg[54] + g1_reg[55];
	assign v1c5l0_out[14] = g1_reg[56] + g1_reg[57] + g1_reg[58] + g1_reg[59];
	assign v1c5l0_out[15] = g1_reg[60] + g1_reg[61] + g1_reg[62] + g1_reg[63];
	assign v1c5l0_out[16] = g1_reg[64] + g1_reg[65] + g1_reg[66] + g1_reg[67];
	assign v1c5l0_out[17] = g1_reg[68] + g1_reg[69] + g1_reg[70] + g1_reg[71];
	assign v1c5l0_out[18] = g1_reg[72] + g1_reg[73] + g1_reg[74] + g1_reg[75];
	assign v1c5l0_out[19] = g1_reg[76] + g1_reg[77] + g1_reg[78] + g1_reg[79];
	assign v1c5l0_out[20] = g1_reg[80] + g1_reg[81] + g1_reg[82] + g1_reg[83];
	assign v1c5l0_out[21] = g1_reg[84] + g1_reg[85] + g1_reg[86] + g1_reg[87];
	assign v1c5l0_out[22] = g1_reg[88] + g1_reg[89] + g1_reg[90] + g1_reg[91];
	assign v1c5l0_out[23] = g1_reg[92] + g1_reg[93] + g1_reg[94] + g1_reg[95];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 24; i = i + 1)
            v1c5l0[i] <= v1c5l0_out[i];
    end

	reg [3:0] v1c5l1 [0:11];
	logic [3:0] v1c5l1_out [0:11];
	assign v1c5l1_out[0] = v1c5l0[0] + v1c5l0[1];
	assign v1c5l1_out[1] = v1c5l0[2] + v1c5l0[3];
	assign v1c5l1_out[2] = v1c5l0[4] + v1c5l0[5];
	assign v1c5l1_out[3] = v1c5l0[6] + v1c5l0[7];
	assign v1c5l1_out[4] = v1c5l0[8] + v1c5l0[9];
	assign v1c5l1_out[5] = v1c5l0[10] + v1c5l0[11];
	assign v1c5l1_out[6] = v1c5l0[12] + v1c5l0[13];
	assign v1c5l1_out[7] = v1c5l0[14] + v1c5l0[15];
	assign v1c5l1_out[8] = v1c5l0[16] + v1c5l0[17];
	assign v1c5l1_out[9] = v1c5l0[18] + v1c5l0[19];
	assign v1c5l1_out[10] = v1c5l0[20] + v1c5l0[21];
	assign v1c5l1_out[11] = v1c5l0[22] + v1c5l0[23];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 12; i = i + 1)
            v1c5l1[i] <= v1c5l1_out[i];
    end

	reg [4:0] v1c5l2 [0:5];
	logic [4:0] v1c5l2_out [0:5];
	assign v1c5l2_out[0] = v1c5l1[0] + v1c5l1[1];
	assign v1c5l2_out[1] = v1c5l1[2] + v1c5l1[3];
	assign v1c5l2_out[2] = v1c5l1[4] + v1c5l1[5];
	assign v1c5l2_out[3] = v1c5l1[6] + v1c5l1[7];
	assign v1c5l2_out[4] = v1c5l1[8] + v1c5l1[9];
	assign v1c5l2_out[5] = v1c5l1[10] + v1c5l1[11];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 6; i = i + 1)
            v1c5l2[i] <= v1c5l2_out[i];
    end

	reg [5:0] v1c5l3 [0:2];
	logic [5:0] v1c5l3_out [0:2];
	assign v1c5l3_out[0] = v1c5l2[0] + v1c5l2[1];
	assign v1c5l3_out[1] = v1c5l2[2] + v1c5l2[3];
	assign v1c5l3_out[2] = v1c5l2[4] + v1c5l2[5];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 3; i = i + 1)
            v1c5l3[i] <= v1c5l3_out[i];
    end

	reg [6:0] v1c5l4 [0:1];
	logic [6:0] v1c5l4_out [0:1];
	assign v1c5l4_out[0] = v1c5l3[0] + v1c5l3[1];
	assign v1c5l4_out[1] = v1c5l3[2];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 2; i = i + 1)
            v1c5l4[i] <= v1c5l4_out[i];
    end

	reg [7:0] v1c5l5 [0:0];
	logic [7:0] v1c5l5_out [0:0];
	assign v1c5l5_out[0] = v1c5l4[0] + v1c5l4[1];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 1; i = i + 1)
            v1c5l5[i] <= v1c5l5_out[i];
    end

	assign val[1] = v1c5l5[0];
	
	// -0.0625
	logic [0:82] g2;
	reg [0:82] g2_reg;
	assign g2[0] = l[11];
	assign g2[1] = l[27];
	assign g2[2] = l[45];
	assign g2[3] = l[61];
	assign g2[4] = l[126] || l[134];
	assign g2[5] = l[151];
	assign g2[6] = l[159] || l[173];
	assign g2[7] = l[175] || l[183] || l[185];
	assign g2[8] = l[190];
	assign g2[9] = l[205] || l[209];
	assign g2[10] = l[229] || l[232];
	assign g2[11] = l[237] || l[248] || l[250];
	assign g2[12] = l[262];
	assign g2[13] = l[279];
	assign g2[14] = l[290];
	assign g2[15] = l[297] || l[301] || l[304];
	assign g2[16] = l[317];
	assign g2[17] = l[378] || l[387] || l[391];
	assign g2[18] = l[400];
	assign g2[19] = l[407];
	assign g2[20] = l[436];
	assign g2[21] = l[452];
	assign g2[22] = l[453];
	assign g2[23] = l[470];
	assign g2[24] = l[487];
	assign g2[25] = l[497];
	assign g2[26] = l[519];
	assign g2[27] = l[559];
	assign g2[28] = l[564] || l[565];
	assign g2[29] = l[580];
	assign g2[30] = l[593] || l[597];
	assign g2[31] = l[602] || l[606];
	assign g2[32] = l[612] || l[617];
	assign g2[33] = l[641];
	assign g2[34] = l[645] || l[656] || l[659];
	assign g2[35] = l[665] || l[668];
	assign g2[36] = l[673] || l[675];
	assign g2[37] = l[693] || l[695];
	assign g2[38] = l[710];
	assign g2[39] = l[725] || l[733] || l[734];
	assign g2[40] = l[737];
	assign g2[41] = l[757] || l[767];
	assign g2[42] = l[775];
	assign g2[43] = l[782];
	assign g2[44] = l[800] || l[806];
	assign g2[45] = l[824];
	assign g2[46] = l[827] || l[828];
	assign g2[47] = l[857] || l[859] || l[861] || l[868];
	assign g2[48] = l[871] || l[877];
	assign g2[49] = l[889] || l[890] || l[894];
	assign g2[50] = l[903] || l[909];
	assign g2[51] = l[927];
	assign g2[52] = l[931] || l[937];
	assign g2[53] = l[941] || l[954];
	assign g2[54] = l[957] || l[961];
	assign g2[55] = l[973];
	assign g2[56] = l[993] || l[1000] || l[1003];
	assign g2[57] = l[1006] || l[1015];
	assign g2[58] = l[1020] || l[1024] || l[1027];
	assign g2[59] = l[1039] || l[1041];
	assign g2[60] = l[1046] || l[1049] || l[1050];
	assign g2[61] = l[1064];
	assign g2[62] = l[1069];
	assign g2[63] = l[1098];
	assign g2[64] = l[1118];
	assign g2[65] = l[1136] || l[1138];
	assign g2[66] = l[1143];
	assign g2[67] = l[1154] || l[1155] || l[1157] || l[1160];
	assign g2[68] = l[1170];
	assign g2[69] = l[1208];
	assign g2[70] = l[1218] || l[1221] || l[1226];
	assign g2[71] = l[1237];
	assign g2[72] = l[1247] || l[1249];
	assign g2[73] = l[1272];
	assign g2[74] = l[1274] || l[1275];
	assign g2[75] = l[1284] || l[1286] || l[1288];
	assign g2[76] = l[1298] || l[1300] || l[1307] || l[1311];
	assign g2[77] = l[1316] || l[1322];
	assign g2[78] = l[1330] || l[1332];
	assign g2[79] = l[1336] || l[1340] || l[1341] || l[1344];
	assign g2[80] = l[1359] || l[1361];
	assign g2[81] = l[1375] || l[1385];
	assign g2[82] = l[1389] || l[1392] || l[1399];
	
    always_ff @(posedge clk) begin
        g2_reg <= g2;
    end
    
	logic [2:0] v2c5l0_out [0:20];
	logic [2:0] v2c5l0 [0:20];
	assign v2c5l0_out[0] = g2_reg[0] + g2_reg[1] + g2_reg[2] + g2_reg[3];
	assign v2c5l0_out[1] = g2_reg[4] + g2_reg[5] + g2_reg[6] + g2_reg[7];
	assign v2c5l0_out[2] = g2_reg[8] + g2_reg[9] + g2_reg[10] + g2_reg[11];
	assign v2c5l0_out[3] = g2_reg[12] + g2_reg[13] + g2_reg[14] + g2_reg[15];
	assign v2c5l0_out[4] = g2_reg[16] + g2_reg[17] + g2_reg[18] + g2_reg[19];
	assign v2c5l0_out[5] = g2_reg[20] + g2_reg[21] + g2_reg[22] + g2_reg[23];
	assign v2c5l0_out[6] = g2_reg[24] + g2_reg[25] + g2_reg[26] + g2_reg[27];
	assign v2c5l0_out[7] = g2_reg[28] + g2_reg[29] + g2_reg[30] + g2_reg[31];
	assign v2c5l0_out[8] = g2_reg[32] + g2_reg[33] + g2_reg[34] + g2_reg[35];
	assign v2c5l0_out[9] = g2_reg[36] + g2_reg[37] + g2_reg[38] + g2_reg[39];
	assign v2c5l0_out[10] = g2_reg[40] + g2_reg[41] + g2_reg[42] + g2_reg[43];
	assign v2c5l0_out[11] = g2_reg[44] + g2_reg[45] + g2_reg[46] + g2_reg[47];
	assign v2c5l0_out[12] = g2_reg[48] + g2_reg[49] + g2_reg[50] + g2_reg[51];
	assign v2c5l0_out[13] = g2_reg[52] + g2_reg[53] + g2_reg[54] + g2_reg[55];
	assign v2c5l0_out[14] = g2_reg[56] + g2_reg[57] + g2_reg[58] + g2_reg[59];
	assign v2c5l0_out[15] = g2_reg[60] + g2_reg[61] + g2_reg[62] + g2_reg[63];
	assign v2c5l0_out[16] = g2_reg[64] + g2_reg[65] + g2_reg[66] + g2_reg[67];
	assign v2c5l0_out[17] = g2_reg[68] + g2_reg[69] + g2_reg[70] + g2_reg[71];
	assign v2c5l0_out[18] = g2_reg[72] + g2_reg[73] + g2_reg[74] + g2_reg[75];
	assign v2c5l0_out[19] = g2_reg[76] + g2_reg[77] + g2_reg[78] + g2_reg[79];
	assign v2c5l0_out[20] = g2_reg[80] + g2_reg[81] + g2_reg[82];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 21; i = i + 1)
            v2c5l0[i] <= v2c5l0_out[i];
    end

	reg [3:0] v2c5l1 [0:10];
	logic [3:0] v2c5l1_out [0:10];
	assign v2c5l1_out[0] = v2c5l0[0] + v2c5l0[1];
	assign v2c5l1_out[1] = v2c5l0[2] + v2c5l0[3];
	assign v2c5l1_out[2] = v2c5l0[4] + v2c5l0[5];
	assign v2c5l1_out[3] = v2c5l0[6] + v2c5l0[7];
	assign v2c5l1_out[4] = v2c5l0[8] + v2c5l0[9];
	assign v2c5l1_out[5] = v2c5l0[10] + v2c5l0[11];
	assign v2c5l1_out[6] = v2c5l0[12] + v2c5l0[13];
	assign v2c5l1_out[7] = v2c5l0[14] + v2c5l0[15];
	assign v2c5l1_out[8] = v2c5l0[16] + v2c5l0[17];
	assign v2c5l1_out[9] = v2c5l0[18] + v2c5l0[19];
	assign v2c5l1_out[10] = v2c5l0[20];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 11; i = i + 1)
            v2c5l1[i] <= v2c5l1_out[i];
    end

	reg [4:0] v2c5l2 [0:5];
	logic [4:0] v2c5l2_out [0:5];
	assign v2c5l2_out[0] = v2c5l1[0] + v2c5l1[1];
	assign v2c5l2_out[1] = v2c5l1[2] + v2c5l1[3];
	assign v2c5l2_out[2] = v2c5l1[4] + v2c5l1[5];
	assign v2c5l2_out[3] = v2c5l1[6] + v2c5l1[7];
	assign v2c5l2_out[4] = v2c5l1[8] + v2c5l1[9];
	assign v2c5l2_out[5] = v2c5l1[10];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 6; i = i + 1)
            v2c5l2[i] <= v2c5l2_out[i];
    end

	reg [5:0] v2c5l3 [0:2];
	logic [5:0] v2c5l3_out [0:2];
	assign v2c5l3_out[0] = v2c5l2[0] + v2c5l2[1];
	assign v2c5l3_out[1] = v2c5l2[2] + v2c5l2[3];
	assign v2c5l3_out[2] = v2c5l2[4] + v2c5l2[5];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 3; i = i + 1)
            v2c5l3[i] <= v2c5l3_out[i];
    end

	reg [6:0] v2c5l4 [0:1];
	logic [6:0] v2c5l4_out [0:1];
	assign v2c5l4_out[0] = v2c5l3[0] + v2c5l3[1];
	assign v2c5l4_out[1] = v2c5l3[2];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 2; i = i + 1)
            v2c5l4[i] <= v2c5l4_out[i];
    end

	reg [7:0] v2c5l5 [0:0];
	logic [7:0] v2c5l5_out [0:0];
	assign v2c5l5_out[0] = v2c5l4[0] + v2c5l4[1];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 1; i = i + 1)
            v2c5l5[i] <= v2c5l5_out[i];
    end

	assign val[2] = v2c5l5[0];
	
	// -0.03125
	logic [0:68] g3;
	reg [0:68] g3_reg;
	assign g3[0] = l[16];
	assign g3[1] = l[67];
	assign g3[2] = l[117];
	assign g3[3] = l[204];
	assign g3[4] = l[207] || l[218];
	assign g3[5] = l[254] || l[257] || l[266];
	assign g3[6] = l[275] || l[281];
	assign g3[7] = l[299] || l[309];
	assign g3[8] = l[313] || l[327];
	assign g3[9] = l[373];
	assign g3[10] = l[392];
	assign g3[11] = l[411] || l[414];
	assign g3[12] = l[429];
	assign g3[13] = l[446];
	assign g3[14] = l[462];
	assign g3[15] = l[466] || l[468] || l[471];
	assign g3[16] = l[490] || l[492];
	assign g3[17] = l[511] || l[514];
	assign g3[18] = l[522] || l[530];
	assign g3[19] = l[531] || l[534];
	assign g3[20] = l[547] || l[549];
	assign g3[21] = l[568];
	assign g3[22] = l[586];
	assign g3[23] = l[613] || l[616];
	assign g3[24] = l[621];
	assign g3[25] = l[638];
	assign g3[26] = l[647];
	assign g3[27] = l[660] || l[666];
	assign g3[28] = l[687];
	assign g3[29] = l[697] || l[701];
	assign g3[30] = l[709] || l[717];
	assign g3[31] = l[736];
	assign g3[32] = l[747] || l[749] || l[752];
	assign g3[33] = l[763];
	assign g3[34] = l[777];
	assign g3[35] = l[807];
	assign g3[36] = l[810] || l[822];
	assign g3[37] = l[840] || l[845] || l[849] || l[850];
	assign g3[38] = l[866];
	assign g3[39] = l[874] || l[876];
	assign g3[40] = l[887];
	assign g3[41] = l[904];
	assign g3[42] = l[916];
	assign g3[43] = l[936];
	assign g3[44] = l[945] || l[948] || l[952];
	assign g3[45] = l[958];
	assign g3[46] = l[979] || l[982];
	assign g3[47] = l[994] || l[998] || l[1004];
	assign g3[48] = l[1009] || l[1010];
	assign g3[49] = l[1018] || l[1029];
	assign g3[50] = l[1053] || l[1061];
	assign g3[51] = l[1072] || l[1074] || l[1082];
	assign g3[52] = l[1090] || l[1094];
	assign g3[53] = l[1096] || l[1103] || l[1105];
	assign g3[54] = l[1113] || l[1124];
	assign g3[55] = l[1129] || l[1132];
	assign g3[56] = l[1150] || l[1162];
	assign g3[57] = l[1163] || l[1172];
	assign g3[58] = l[1180];
	assign g3[59] = l[1191] || l[1199];
	assign g3[60] = l[1207] || l[1216];
	assign g3[61] = l[1232];
	assign g3[62] = l[1264] || l[1266] || l[1270];
	assign g3[63] = l[1279];
	assign g3[64] = l[1289];
	assign g3[65] = l[1318];
	assign g3[66] = l[1358];
	assign g3[67] = l[1368];
	assign g3[68] = l[1379] || l[1380] || l[1382];
	
    always_ff @(posedge clk) begin
        g3_reg <= g3;
    end
    
	logic [2:0] v3c5l0_out [0:17];
	logic [2:0] v3c5l0 [0:17];
	assign v3c5l0_out[0] = g3_reg[0] + g3_reg[1] + g3_reg[2] + g3_reg[3];
	assign v3c5l0_out[1] = g3_reg[4] + g3_reg[5] + g3_reg[6] + g3_reg[7];
	assign v3c5l0_out[2] = g3_reg[8] + g3_reg[9] + g3_reg[10] + g3_reg[11];
	assign v3c5l0_out[3] = g3_reg[12] + g3_reg[13] + g3_reg[14] + g3_reg[15];
	assign v3c5l0_out[4] = g3_reg[16] + g3_reg[17] + g3_reg[18] + g3_reg[19];
	assign v3c5l0_out[5] = g3_reg[20] + g3_reg[21] + g3_reg[22] + g3_reg[23];
	assign v3c5l0_out[6] = g3_reg[24] + g3_reg[25] + g3_reg[26] + g3_reg[27];
	assign v3c5l0_out[7] = g3_reg[28] + g3_reg[29] + g3_reg[30] + g3_reg[31];
	assign v3c5l0_out[8] = g3_reg[32] + g3_reg[33] + g3_reg[34] + g3_reg[35];
	assign v3c5l0_out[9] = g3_reg[36] + g3_reg[37] + g3_reg[38] + g3_reg[39];
	assign v3c5l0_out[10] = g3_reg[40] + g3_reg[41] + g3_reg[42] + g3_reg[43];
	assign v3c5l0_out[11] = g3_reg[44] + g3_reg[45] + g3_reg[46] + g3_reg[47];
	assign v3c5l0_out[12] = g3_reg[48] + g3_reg[49] + g3_reg[50] + g3_reg[51];
	assign v3c5l0_out[13] = g3_reg[52] + g3_reg[53] + g3_reg[54] + g3_reg[55];
	assign v3c5l0_out[14] = g3_reg[56] + g3_reg[57] + g3_reg[58] + g3_reg[59];
	assign v3c5l0_out[15] = g3_reg[60] + g3_reg[61] + g3_reg[62] + g3_reg[63];
	assign v3c5l0_out[16] = g3_reg[64] + g3_reg[65] + g3_reg[66] + g3_reg[67];
	assign v3c5l0_out[17] = g3_reg[68];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 18; i = i + 1)
            v3c5l0[i] <= v3c5l0_out[i];
    end

	reg [3:0] v3c5l1 [0:8];
	logic [3:0] v3c5l1_out [0:8];
	assign v3c5l1_out[0] = v3c5l0[0] + v3c5l0[1];
	assign v3c5l1_out[1] = v3c5l0[2] + v3c5l0[3];
	assign v3c5l1_out[2] = v3c5l0[4] + v3c5l0[5];
	assign v3c5l1_out[3] = v3c5l0[6] + v3c5l0[7];
	assign v3c5l1_out[4] = v3c5l0[8] + v3c5l0[9];
	assign v3c5l1_out[5] = v3c5l0[10] + v3c5l0[11];
	assign v3c5l1_out[6] = v3c5l0[12] + v3c5l0[13];
	assign v3c5l1_out[7] = v3c5l0[14] + v3c5l0[15];
	assign v3c5l1_out[8] = v3c5l0[16] + v3c5l0[17];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 9; i = i + 1)
            v3c5l1[i] <= v3c5l1_out[i];
    end

	reg [4:0] v3c5l2 [0:4];
	logic [4:0] v3c5l2_out [0:4];
	assign v3c5l2_out[0] = v3c5l1[0] + v3c5l1[1];
	assign v3c5l2_out[1] = v3c5l1[2] + v3c5l1[3];
	assign v3c5l2_out[2] = v3c5l1[4] + v3c5l1[5];
	assign v3c5l2_out[3] = v3c5l1[6] + v3c5l1[7];
	assign v3c5l2_out[4] = v3c5l1[8];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 5; i = i + 1)
            v3c5l2[i] <= v3c5l2_out[i];
    end

	reg [5:0] v3c5l3 [0:2];
	logic [5:0] v3c5l3_out [0:2];
	assign v3c5l3_out[0] = v3c5l2[0] + v3c5l2[1];
	assign v3c5l3_out[1] = v3c5l2[2] + v3c5l2[3];
	assign v3c5l3_out[2] = v3c5l2[4];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 3; i = i + 1)
            v3c5l3[i] <= v3c5l3_out[i];
    end

	reg [6:0] v3c5l4 [0:1];
	logic [6:0] v3c5l4_out [0:1];
	assign v3c5l4_out[0] = v3c5l3[0] + v3c5l3[1];
	assign v3c5l4_out[1] = v3c5l3[2];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 2; i = i + 1)
            v3c5l4[i] <= v3c5l4_out[i];
    end

	reg [7:0] v3c5l5 [0:0];
	logic [7:0] v3c5l5_out [0:0];
	assign v3c5l5_out[0] = v3c5l4[0] + v3c5l4[1];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 1; i = i + 1)
            v3c5l5[i] <= v3c5l5_out[i];
    end

	assign val[3] = v3c5l5[0];
	
	// -0.015625
	logic [0:39] g4;
	reg [0:39] g4_reg;
	assign g4[0] = l[91];
	assign g4[1] = l[125];
	assign g4[2] = l[215];
	assign g4[3] = l[221];
	assign g4[4] = l[246];
	assign g4[5] = l[284];
	assign g4[6] = l[321] || l[324];
	assign g4[7] = l[351];
	assign g4[8] = l[368];
	assign g4[9] = l[376] || l[384];
	assign g4[10] = l[402];
	assign g4[11] = l[501];
	assign g4[12] = l[561];
	assign g4[13] = l[576] || l[579];
	assign g4[14] = l[623] || l[625] || l[627];
	assign g4[15] = l[631];
	assign g4[16] = l[654];
	assign g4[17] = l[663];
	assign g4[18] = l[688];
	assign g4[19] = l[729];
	assign g4[20] = l[812];
	assign g4[21] = l[846];
	assign g4[22] = l[896];
	assign g4[23] = l[925];
	assign g4[24] = l[933];
	assign g4[25] = l[983];
	assign g4[26] = l[991];
	assign g4[27] = l[1033];
	assign g4[28] = l[1085];
	assign g4[29] = l[1111];
	assign g4[30] = l[1152];
	assign g4[31] = l[1183];
	assign g4[32] = l[1194] || l[1205];
	assign g4[33] = l[1213];
	assign g4[34] = l[1260];
	assign g4[35] = l[1277];
	assign g4[36] = l[1291];
	assign g4[37] = l[1309];
	assign g4[38] = l[1349];
	assign g4[39] = l[1396];
	
    always_ff @(posedge clk) begin
        g4_reg <= g4;
    end
    
	logic [2:0] v4c5l0_out [0:9];
	logic [2:0] v4c5l0 [0:9];
	assign v4c5l0_out[0] = g4_reg[0] + g4_reg[1] + g4_reg[2] + g4_reg[3];
	assign v4c5l0_out[1] = g4_reg[4] + g4_reg[5] + g4_reg[6] + g4_reg[7];
	assign v4c5l0_out[2] = g4_reg[8] + g4_reg[9] + g4_reg[10] + g4_reg[11];
	assign v4c5l0_out[3] = g4_reg[12] + g4_reg[13] + g4_reg[14] + g4_reg[15];
	assign v4c5l0_out[4] = g4_reg[16] + g4_reg[17] + g4_reg[18] + g4_reg[19];
	assign v4c5l0_out[5] = g4_reg[20] + g4_reg[21] + g4_reg[22] + g4_reg[23];
	assign v4c5l0_out[6] = g4_reg[24] + g4_reg[25] + g4_reg[26] + g4_reg[27];
	assign v4c5l0_out[7] = g4_reg[28] + g4_reg[29] + g4_reg[30] + g4_reg[31];
	assign v4c5l0_out[8] = g4_reg[32] + g4_reg[33] + g4_reg[34] + g4_reg[35];
	assign v4c5l0_out[9] = g4_reg[36] + g4_reg[37] + g4_reg[38] + g4_reg[39];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 10; i = i + 1)
            v4c5l0[i] <= v4c5l0_out[i];
    end

	reg [3:0] v4c5l1 [0:4];
	logic [3:0] v4c5l1_out [0:4];
	assign v4c5l1_out[0] = v4c5l0[0] + v4c5l0[1];
	assign v4c5l1_out[1] = v4c5l0[2] + v4c5l0[3];
	assign v4c5l1_out[2] = v4c5l0[4] + v4c5l0[5];
	assign v4c5l1_out[3] = v4c5l0[6] + v4c5l0[7];
	assign v4c5l1_out[4] = v4c5l0[8] + v4c5l0[9];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 5; i = i + 1)
            v4c5l1[i] <= v4c5l1_out[i];
    end

	reg [4:0] v4c5l2 [0:2];
	logic [4:0] v4c5l2_out [0:2];
	assign v4c5l2_out[0] = v4c5l1[0] + v4c5l1[1];
	assign v4c5l2_out[1] = v4c5l1[2] + v4c5l1[3];
	assign v4c5l2_out[2] = v4c5l1[4];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 3; i = i + 1)
            v4c5l2[i] <= v4c5l2_out[i];
    end

	reg [5:0] v4c5l3 [0:1];
	logic [5:0] v4c5l3_out [0:1];
	assign v4c5l3_out[0] = v4c5l2[0] + v4c5l2[1];
	assign v4c5l3_out[1] = v4c5l2[2];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 2; i = i + 1)
            v4c5l3[i] <= v4c5l3_out[i];
    end

	reg [6:0] v4c5l4 [0:0];
	logic [6:0] v4c5l4_out [0:0];
	assign v4c5l4_out[0] = v4c5l3[0] + v4c5l3[1];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 1; i = i + 1)
            v4c5l4[i] <= v4c5l4_out[i];
    end

	reg [7:0] v4c5l5 [0:0];
	logic [7:0] v4c5l5_out [0:0];
	assign v4c5l5_out[0] = v4c5l4[0];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 1; i = i + 1)
            v4c5l5[i] <= v4c5l5_out[i];
    end

	assign val[4] = v4c5l5[0];
	
	// 0.015625
	logic [0:32] g5;
	reg [0:32] g5_reg;
	assign g5[0] = l[1];
	assign g5[1] = l[329] || l[331] || l[336];
	assign g5[2] = l[352];
	assign g5[3] = l[408];
	assign g5[4] = l[431];
	assign g5[5] = l[447];
	assign g5[6] = l[489];
	assign g5[7] = l[498];
	assign g5[8] = l[510];
	assign g5[9] = l[551] || l[554];
	assign g5[10] = l[572];
	assign g5[11] = l[644] || l[653];
	assign g5[12] = l[713];
	assign g5[13] = l[760];
	assign g5[14] = l[785];
	assign g5[15] = l[799];
	assign g5[16] = l[833];
	assign g5[17] = l[872];
	assign g5[18] = l[974];
	assign g5[19] = l[1021] || l[1028] || l[1032];
	assign g5[20] = l[1037];
	assign g5[21] = l[1047];
	assign g5[22] = l[1091];
	assign g5[23] = l[1125];
	assign g5[24] = l[1146];
	assign g5[25] = l[1222];
	assign g5[26] = l[1252];
	assign g5[27] = l[1317];
	assign g5[28] = l[1326];
	assign g5[29] = l[1335];
	assign g5[30] = l[1365];
	assign g5[31] = l[1384];
	assign g5[32] = l[1400];
	
    always_ff @(posedge clk) begin
        g5_reg <= g5;
    end
    
	logic [2:0] v5c5l0_out [0:8];
	logic [2:0] v5c5l0 [0:8];
	assign v5c5l0_out[0] = g5_reg[0] + g5_reg[1] + g5_reg[2] + g5_reg[3];
	assign v5c5l0_out[1] = g5_reg[4] + g5_reg[5] + g5_reg[6] + g5_reg[7];
	assign v5c5l0_out[2] = g5_reg[8] + g5_reg[9] + g5_reg[10] + g5_reg[11];
	assign v5c5l0_out[3] = g5_reg[12] + g5_reg[13] + g5_reg[14] + g5_reg[15];
	assign v5c5l0_out[4] = g5_reg[16] + g5_reg[17] + g5_reg[18] + g5_reg[19];
	assign v5c5l0_out[5] = g5_reg[20] + g5_reg[21] + g5_reg[22] + g5_reg[23];
	assign v5c5l0_out[6] = g5_reg[24] + g5_reg[25] + g5_reg[26] + g5_reg[27];
	assign v5c5l0_out[7] = g5_reg[28] + g5_reg[29] + g5_reg[30] + g5_reg[31];
	assign v5c5l0_out[8] = g5_reg[32];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 9; i = i + 1)
            v5c5l0[i] <= v5c5l0_out[i];
    end

	reg [3:0] v5c5l1 [0:4];
	logic [3:0] v5c5l1_out [0:4];
	assign v5c5l1_out[0] = v5c5l0[0] + v5c5l0[1];
	assign v5c5l1_out[1] = v5c5l0[2] + v5c5l0[3];
	assign v5c5l1_out[2] = v5c5l0[4] + v5c5l0[5];
	assign v5c5l1_out[3] = v5c5l0[6] + v5c5l0[7];
	assign v5c5l1_out[4] = v5c5l0[8];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 5; i = i + 1)
            v5c5l1[i] <= v5c5l1_out[i];
    end

	reg [4:0] v5c5l2 [0:2];
	logic [4:0] v5c5l2_out [0:2];
	assign v5c5l2_out[0] = v5c5l1[0] + v5c5l1[1];
	assign v5c5l2_out[1] = v5c5l1[2] + v5c5l1[3];
	assign v5c5l2_out[2] = v5c5l1[4];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 3; i = i + 1)
            v5c5l2[i] <= v5c5l2_out[i];
    end

	reg [5:0] v5c5l3 [0:1];
	logic [5:0] v5c5l3_out [0:1];
	assign v5c5l3_out[0] = v5c5l2[0] + v5c5l2[1];
	assign v5c5l3_out[1] = v5c5l2[2];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 2; i = i + 1)
            v5c5l3[i] <= v5c5l3_out[i];
    end

	reg [6:0] v5c5l4 [0:0];
	logic [6:0] v5c5l4_out [0:0];
	assign v5c5l4_out[0] = v5c5l3[0] + v5c5l3[1];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 1; i = i + 1)
            v5c5l4[i] <= v5c5l4_out[i];
    end

	reg [7:0] v5c5l5 [0:0];
	logic [7:0] v5c5l5_out [0:0];
	assign v5c5l5_out[0] = v5c5l4[0];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 1; i = i + 1)
            v5c5l5[i] <= v5c5l5_out[i];
    end

	assign val[5] = v5c5l5[0];
	
	// 0.03125
	logic [0:65] g6;
	reg [0:65] g6_reg;
	assign g6[0] = l[3];
	assign g6[1] = l[57];
	assign g6[2] = l[68] || l[76];
	assign g6[3] = l[93];
	assign g6[4] = l[110] || l[118];
	assign g6[5] = l[189] || l[201];
	assign g6[6] = l[227];
	assign g6[7] = l[268] || l[270];
	assign g6[8] = l[288];
	assign g6[9] = l[307];
	assign g6[10] = l[354];
	assign g6[11] = l[360];
	assign g6[12] = l[405];
	assign g6[13] = l[421];
	assign g6[14] = l[424] || l[433];
	assign g6[15] = l[439] || l[449];
	assign g6[16] = l[463];
	assign g6[17] = l[491];
	assign g6[18] = l[505];
	assign g6[19] = l[585] || l[588] || l[589];
	assign g6[20] = l[611];
	assign g6[21] = l[630] || l[640];
	assign g6[22] = l[669];
	assign g6[23] = l[672] || l[680];
	assign g6[24] = l[691] || l[699];
	assign g6[25] = l[727];
	assign g6[26] = l[735] || l[738];
	assign g6[27] = l[748] || l[750];
	assign g6[28] = l[780] || l[791] || l[794];
	assign g6[29] = l[843];
	assign g6[30] = l[862] || l[869];
	assign g6[31] = l[878];
	assign g6[32] = l[888] || l[891];
	assign g6[33] = l[908] || l[910];
	assign g6[34] = l[929];
	assign g6[35] = l[935];
	assign g6[36] = l[940] || l[943] || l[946];
	assign g6[37] = l[972];
	assign g6[38] = l[981];
	assign g6[39] = l[997];
	assign g6[40] = l[1007] || l[1011];
	assign g6[41] = l[1017];
	assign g6[42] = l[1034] || l[1043];
	assign g6[43] = l[1056] || l[1068];
	assign g6[44] = l[1071] || l[1076] || l[1084];
	assign g6[45] = l[1095];
	assign g6[46] = l[1112] || l[1119];
	assign g6[47] = l[1128];
	assign g6[48] = l[1141];
	assign g6[49] = l[1149];
	assign g6[50] = l[1167] || l[1171] || l[1175];
	assign g6[51] = l[1179] || l[1181];
	assign g6[52] = l[1192] || l[1195] || l[1202];
	assign g6[53] = l[1206] || l[1215];
	assign g6[54] = l[1217] || l[1224] || l[1231];
	assign g6[55] = l[1233] || l[1234] || l[1236];
	assign g6[56] = l[1243] || l[1256];
	assign g6[57] = l[1257] || l[1267];
	assign g6[58] = l[1273];
	assign g6[59] = l[1287] || l[1294];
	assign g6[60] = l[1302] || l[1310];
	assign g6[61] = l[1319] || l[1325];
	assign g6[62] = l[1329];
	assign g6[63] = l[1338];
	assign g6[64] = l[1364];
	assign g6[65] = l[1372] || l[1374] || l[1376];
	
    always_ff @(posedge clk) begin
        g6_reg <= g6;
    end
    
	logic [2:0] v6c5l0_out [0:16];
	logic [2:0] v6c5l0 [0:16];
	assign v6c5l0_out[0] = g6_reg[0] + g6_reg[1] + g6_reg[2] + g6_reg[3];
	assign v6c5l0_out[1] = g6_reg[4] + g6_reg[5] + g6_reg[6] + g6_reg[7];
	assign v6c5l0_out[2] = g6_reg[8] + g6_reg[9] + g6_reg[10] + g6_reg[11];
	assign v6c5l0_out[3] = g6_reg[12] + g6_reg[13] + g6_reg[14] + g6_reg[15];
	assign v6c5l0_out[4] = g6_reg[16] + g6_reg[17] + g6_reg[18] + g6_reg[19];
	assign v6c5l0_out[5] = g6_reg[20] + g6_reg[21] + g6_reg[22] + g6_reg[23];
	assign v6c5l0_out[6] = g6_reg[24] + g6_reg[25] + g6_reg[26] + g6_reg[27];
	assign v6c5l0_out[7] = g6_reg[28] + g6_reg[29] + g6_reg[30] + g6_reg[31];
	assign v6c5l0_out[8] = g6_reg[32] + g6_reg[33] + g6_reg[34] + g6_reg[35];
	assign v6c5l0_out[9] = g6_reg[36] + g6_reg[37] + g6_reg[38] + g6_reg[39];
	assign v6c5l0_out[10] = g6_reg[40] + g6_reg[41] + g6_reg[42] + g6_reg[43];
	assign v6c5l0_out[11] = g6_reg[44] + g6_reg[45] + g6_reg[46] + g6_reg[47];
	assign v6c5l0_out[12] = g6_reg[48] + g6_reg[49] + g6_reg[50] + g6_reg[51];
	assign v6c5l0_out[13] = g6_reg[52] + g6_reg[53] + g6_reg[54] + g6_reg[55];
	assign v6c5l0_out[14] = g6_reg[56] + g6_reg[57] + g6_reg[58] + g6_reg[59];
	assign v6c5l0_out[15] = g6_reg[60] + g6_reg[61] + g6_reg[62] + g6_reg[63];
	assign v6c5l0_out[16] = g6_reg[64] + g6_reg[65];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 17; i = i + 1)
            v6c5l0[i] <= v6c5l0_out[i];
    end

	reg [3:0] v6c5l1 [0:8];
	logic [3:0] v6c5l1_out [0:8];
	assign v6c5l1_out[0] = v6c5l0[0] + v6c5l0[1];
	assign v6c5l1_out[1] = v6c5l0[2] + v6c5l0[3];
	assign v6c5l1_out[2] = v6c5l0[4] + v6c5l0[5];
	assign v6c5l1_out[3] = v6c5l0[6] + v6c5l0[7];
	assign v6c5l1_out[4] = v6c5l0[8] + v6c5l0[9];
	assign v6c5l1_out[5] = v6c5l0[10] + v6c5l0[11];
	assign v6c5l1_out[6] = v6c5l0[12] + v6c5l0[13];
	assign v6c5l1_out[7] = v6c5l0[14] + v6c5l0[15];
	assign v6c5l1_out[8] = v6c5l0[16];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 9; i = i + 1)
            v6c5l1[i] <= v6c5l1_out[i];
    end

	reg [4:0] v6c5l2 [0:4];
	logic [4:0] v6c5l2_out [0:4];
	assign v6c5l2_out[0] = v6c5l1[0] + v6c5l1[1];
	assign v6c5l2_out[1] = v6c5l1[2] + v6c5l1[3];
	assign v6c5l2_out[2] = v6c5l1[4] + v6c5l1[5];
	assign v6c5l2_out[3] = v6c5l1[6] + v6c5l1[7];
	assign v6c5l2_out[4] = v6c5l1[8];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 5; i = i + 1)
            v6c5l2[i] <= v6c5l2_out[i];
    end

	reg [5:0] v6c5l3 [0:2];
	logic [5:0] v6c5l3_out [0:2];
	assign v6c5l3_out[0] = v6c5l2[0] + v6c5l2[1];
	assign v6c5l3_out[1] = v6c5l2[2] + v6c5l2[3];
	assign v6c5l3_out[2] = v6c5l2[4];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 3; i = i + 1)
            v6c5l3[i] <= v6c5l3_out[i];
    end

	reg [6:0] v6c5l4 [0:1];
	logic [6:0] v6c5l4_out [0:1];
	assign v6c5l4_out[0] = v6c5l3[0] + v6c5l3[1];
	assign v6c5l4_out[1] = v6c5l3[2];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 2; i = i + 1)
            v6c5l4[i] <= v6c5l4_out[i];
    end

	reg [7:0] v6c5l5 [0:0];
	logic [7:0] v6c5l5_out [0:0];
	assign v6c5l5_out[0] = v6c5l4[0] + v6c5l4[1];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 1; i = i + 1)
            v6c5l5[i] <= v6c5l5_out[i];
    end

	assign val[6] = v6c5l5[0];
	
	// 0.0625
	logic [0:76] g7;
	reg [0:76] g7_reg;
	assign g7[0] = l[39] || l[43];
	assign g7[1] = l[123];
	assign g7[2] = l[158] || l[161] || l[164] || l[168];
	assign g7[3] = l[174] || l[181];
	assign g7[4] = l[225] || l[234];
	assign g7[5] = l[238] || l[244];
	assign g7[6] = l[253];
	assign g7[7] = l[285];
	assign g7[8] = l[298] || l[302];
	assign g7[9] = l[318] || l[322];
	assign g7[10] = l[341] || l[343];
	assign g7[11] = l[357] || l[359];
	assign g7[12] = l[364];
	assign g7[13] = l[381] || l[383];
	assign g7[14] = l[394];
	assign g7[15] = l[406] || l[418];
	assign g7[16] = l[423];
	assign g7[17] = l[445];
	assign g7[18] = l[467] || l[469] || l[476] || l[477];
	assign g7[19] = l[482] || l[484] || l[485];
	assign g7[20] = l[504];
	assign g7[21] = l[513];
	assign g7[22] = l[538] || l[542];
	assign g7[23] = l[550] || l[558];
	assign g7[24] = l[566] || l[571];
	assign g7[25] = l[577];
	assign g7[26] = l[596];
	assign g7[27] = l[610] || l[614];
	assign g7[28] = l[624];
	assign g7[29] = l[651] || l[657];
	assign g7[30] = l[661] || l[664] || l[667];
	assign g7[31] = l[683];
	assign g7[32] = l[689] || l[692] || l[696];
	assign g7[33] = l[704] || l[707] || l[714] || l[719];
	assign g7[34] = l[721] || l[722];
	assign g7[35] = l[743] || l[745];
	assign g7[36] = l[756] || l[759] || l[766] || l[768];
	assign g7[37] = l[801];
	assign g7[38] = l[818] || l[820];
	assign g7[39] = l[830] || l[838];
	assign g7[40] = l[841] || l[847] || l[851] || l[853];
	assign g7[41] = l[873] || l[875];
	assign g7[42] = l[886] || l[895] || l[897];
	assign g7[43] = l[901] || l[905] || l[912];
	assign g7[44] = l[918] || l[921] || l[924];
	assign g7[45] = l[932] || l[934];
	assign g7[46] = l[949] || l[955];
	assign g7[47] = l[968];
	assign g7[48] = l[971];
	assign g7[49] = l[980] || l[984] || l[986];
	assign g7[50] = l[990] || l[992] || l[995] || l[999] || l[1001];
	assign g7[51] = l[1012] || l[1016];
	assign g7[52] = l[1026] || l[1030];
	assign g7[53] = l[1035];
	assign g7[54] = l[1045];
	assign g7[55] = l[1054] || l[1057] || l[1062];
	assign g7[56] = l[1078] || l[1079] || l[1081];
	assign g7[57] = l[1086] || l[1089];
	assign g7[58] = l[1102] || l[1104] || l[1108] || l[1110];
	assign g7[59] = l[1117] || l[1122];
	assign g7[60] = l[1134] || l[1137];
	assign g7[61] = l[1144];
	assign g7[62] = l[1158] || l[1159];
	assign g7[63] = l[1164] || l[1166] || l[1169];
	assign g7[64] = l[1184] || l[1188];
	assign g7[65] = l[1193] || l[1198] || l[1200];
	assign g7[66] = l[1209] || l[1211];
	assign g7[67] = l[1225];
	assign g7[68] = l[1246] || l[1250] || l[1253];
	assign g7[69] = l[1265];
	assign g7[70] = l[1276] || l[1280];
	assign g7[71] = l[1285] || l[1290];
	assign g7[72] = l[1301] || l[1308];
	assign g7[73] = l[1314] || l[1320] || l[1323];
	assign g7[74] = l[1352] || l[1355];
	assign g7[75] = l[1381];
	assign g7[76] = l[1388] || l[1391] || l[1397] || l[1398];
	
    always_ff @(posedge clk) begin
        g7_reg <= g7;
    end
    
	logic [2:0] v7c5l0_out [0:19];
	logic [2:0] v7c5l0 [0:19];
	assign v7c5l0_out[0] = g7_reg[0] + g7_reg[1] + g7_reg[2] + g7_reg[3];
	assign v7c5l0_out[1] = g7_reg[4] + g7_reg[5] + g7_reg[6] + g7_reg[7];
	assign v7c5l0_out[2] = g7_reg[8] + g7_reg[9] + g7_reg[10] + g7_reg[11];
	assign v7c5l0_out[3] = g7_reg[12] + g7_reg[13] + g7_reg[14] + g7_reg[15];
	assign v7c5l0_out[4] = g7_reg[16] + g7_reg[17] + g7_reg[18] + g7_reg[19];
	assign v7c5l0_out[5] = g7_reg[20] + g7_reg[21] + g7_reg[22] + g7_reg[23];
	assign v7c5l0_out[6] = g7_reg[24] + g7_reg[25] + g7_reg[26] + g7_reg[27];
	assign v7c5l0_out[7] = g7_reg[28] + g7_reg[29] + g7_reg[30] + g7_reg[31];
	assign v7c5l0_out[8] = g7_reg[32] + g7_reg[33] + g7_reg[34] + g7_reg[35];
	assign v7c5l0_out[9] = g7_reg[36] + g7_reg[37] + g7_reg[38] + g7_reg[39];
	assign v7c5l0_out[10] = g7_reg[40] + g7_reg[41] + g7_reg[42] + g7_reg[43];
	assign v7c5l0_out[11] = g7_reg[44] + g7_reg[45] + g7_reg[46] + g7_reg[47];
	assign v7c5l0_out[12] = g7_reg[48] + g7_reg[49] + g7_reg[50] + g7_reg[51];
	assign v7c5l0_out[13] = g7_reg[52] + g7_reg[53] + g7_reg[54] + g7_reg[55];
	assign v7c5l0_out[14] = g7_reg[56] + g7_reg[57] + g7_reg[58] + g7_reg[59];
	assign v7c5l0_out[15] = g7_reg[60] + g7_reg[61] + g7_reg[62] + g7_reg[63];
	assign v7c5l0_out[16] = g7_reg[64] + g7_reg[65] + g7_reg[66] + g7_reg[67];
	assign v7c5l0_out[17] = g7_reg[68] + g7_reg[69] + g7_reg[70] + g7_reg[71];
	assign v7c5l0_out[18] = g7_reg[72] + g7_reg[73] + g7_reg[74] + g7_reg[75];
	assign v7c5l0_out[19] = g7_reg[76];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 20; i = i + 1)
            v7c5l0[i] <= v7c5l0_out[i];
    end

	reg [3:0] v7c5l1 [0:9];
	logic [3:0] v7c5l1_out [0:9];
	assign v7c5l1_out[0] = v7c5l0[0] + v7c5l0[1];
	assign v7c5l1_out[1] = v7c5l0[2] + v7c5l0[3];
	assign v7c5l1_out[2] = v7c5l0[4] + v7c5l0[5];
	assign v7c5l1_out[3] = v7c5l0[6] + v7c5l0[7];
	assign v7c5l1_out[4] = v7c5l0[8] + v7c5l0[9];
	assign v7c5l1_out[5] = v7c5l0[10] + v7c5l0[11];
	assign v7c5l1_out[6] = v7c5l0[12] + v7c5l0[13];
	assign v7c5l1_out[7] = v7c5l0[14] + v7c5l0[15];
	assign v7c5l1_out[8] = v7c5l0[16] + v7c5l0[17];
	assign v7c5l1_out[9] = v7c5l0[18] + v7c5l0[19];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 10; i = i + 1)
            v7c5l1[i] <= v7c5l1_out[i];
    end

	reg [4:0] v7c5l2 [0:4];
	logic [4:0] v7c5l2_out [0:4];
	assign v7c5l2_out[0] = v7c5l1[0] + v7c5l1[1];
	assign v7c5l2_out[1] = v7c5l1[2] + v7c5l1[3];
	assign v7c5l2_out[2] = v7c5l1[4] + v7c5l1[5];
	assign v7c5l2_out[3] = v7c5l1[6] + v7c5l1[7];
	assign v7c5l2_out[4] = v7c5l1[8] + v7c5l1[9];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 5; i = i + 1)
            v7c5l2[i] <= v7c5l2_out[i];
    end

	reg [5:0] v7c5l3 [0:2];
	logic [5:0] v7c5l3_out [0:2];
	assign v7c5l3_out[0] = v7c5l2[0] + v7c5l2[1];
	assign v7c5l3_out[1] = v7c5l2[2] + v7c5l2[3];
	assign v7c5l3_out[2] = v7c5l2[4];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 3; i = i + 1)
            v7c5l3[i] <= v7c5l3_out[i];
    end

	reg [6:0] v7c5l4 [0:1];
	logic [6:0] v7c5l4_out [0:1];
	assign v7c5l4_out[0] = v7c5l3[0] + v7c5l3[1];
	assign v7c5l4_out[1] = v7c5l3[2];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 2; i = i + 1)
            v7c5l4[i] <= v7c5l4_out[i];
    end

	reg [7:0] v7c5l5 [0:0];
	logic [7:0] v7c5l5_out [0:0];
	assign v7c5l5_out[0] = v7c5l4[0] + v7c5l4[1];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 1; i = i + 1)
            v7c5l5[i] <= v7c5l5_out[i];
    end

	assign val[7] = v7c5l5[0];
	
	// 0.125
	logic [0:89] g8;
	reg [0:89] g8_reg;
	assign g8[0] = l[29];
	assign g8[1] = l[30] || l[33];
	assign g8[2] = l[51] || l[54];
	assign g8[3] = l[63] || l[74];
	assign g8[4] = l[81];
	assign g8[5] = l[108];
	assign g8[6] = l[127] || l[133] || l[135] || l[137];
	assign g8[7] = l[145] || l[150];
	assign g8[8] = l[162] || l[167];
	assign g8[9] = l[187];
	assign g8[10] = l[196] || l[199];
	assign g8[11] = l[206] || l[211] || l[213] || l[220];
	assign g8[12] = l[222] || l[230];
	assign g8[13] = l[239] || l[241] || l[245];
	assign g8[14] = l[255] || l[258] || l[260] || l[261] || l[267];
	assign g8[15] = l[269] || l[277] || l[283];
	assign g8[16] = l[286] || l[292] || l[295];
	assign g8[17] = l[303] || l[305] || l[310];
	assign g8[18] = l[323] || l[328];
	assign g8[19] = l[330] || l[335] || l[338];
	assign g8[20] = l[345] || l[346] || l[353];
	assign g8[21] = l[361] || l[369];
	assign g8[22] = l[377] || l[385];
	assign g8[23] = l[393] || l[399];
	assign g8[24] = l[410] || l[413] || l[415] || l[417];
	assign g8[25] = l[426];
	assign g8[26] = l[437];
	assign g8[27] = l[455] || l[459];
	assign g8[28] = l[472];
	assign g8[29] = l[493] || l[496];
	assign g8[30] = l[512] || l[516] || l[520];
	assign g8[31] = l[524] || l[525];
	assign g8[32] = l[532] || l[535] || l[539] || l[543] || l[546];
	assign g8[33] = l[548] || l[552];
	assign g8[34] = l[562] || l[563];
	assign g8[35] = l[573] || l[581] || l[582];
	assign g8[36] = l[591];
	assign g8[37] = l[604];
	assign g8[38] = l[619];
	assign g8[39] = l[622] || l[626];
	assign g8[40] = l[634] || l[643];
	assign g8[41] = l[646] || l[658];
	assign g8[42] = l[671];
	assign g8[43] = l[674] || l[678];
	assign g8[44] = l[694] || l[703];
	assign g8[45] = l[711] || l[716];
	assign g8[46] = l[731];
	assign g8[47] = l[740];
	assign g8[48] = l[754];
	assign g8[49] = l[771];
	assign g8[50] = l[773] || l[774];
	assign g8[51] = l[781] || l[783] || l[786] || l[789];
	assign g8[52] = l[797] || l[809];
	assign g8[53] = l[813] || l[814] || l[817] || l[823] || l[825];
	assign g8[54] = l[829] || l[835];
	assign g8[55] = l[844] || l[854];
	assign g8[56] = l[858] || l[860] || l[870];
	assign g8[57] = l[880] || l[882] || l[885];
	assign g8[58] = l[902] || l[911];
	assign g8[59] = l[926] || l[928];
	assign g8[60] = l[938] || l[939];
	assign g8[61] = l[944] || l[950];
	assign g8[62] = l[959] || l[960] || l[967];
	assign g8[63] = l[1005];
	assign g8[64] = l[1008];
	assign g8[65] = l[1019];
	assign g8[66] = l[1040];
	assign g8[67] = l[1051];
	assign g8[68] = l[1058] || l[1063];
	assign g8[69] = l[1073];
	assign g8[70] = l[1100] || l[1107];
	assign g8[71] = l[1120];
	assign g8[72] = l[1126] || l[1131] || l[1139];
	assign g8[73] = l[1142] || l[1148];
	assign g8[74] = l[1151] || l[1156];
	assign g8[75] = l[1174];
	assign g8[76] = l[1182] || l[1189];
	assign g8[77] = l[1204];
	assign g8[78] = l[1219] || l[1227] || l[1229];
	assign g8[79] = l[1240];
	assign g8[80] = l[1242] || l[1248] || l[1251] || l[1255];
	assign g8[81] = l[1259] || l[1263] || l[1271];
	assign g8[82] = l[1293] || l[1297];
	assign g8[83] = l[1304] || l[1312];
	assign g8[84] = l[1333] || l[1334];
	assign g8[85] = l[1342] || l[1343] || l[1347] || l[1350];
	assign g8[86] = l[1357] || l[1362] || l[1363];
	assign g8[87] = l[1367];
	assign g8[88] = l[1373] || l[1383];
	assign g8[89] = l[1390];
	
    always_ff @(posedge clk) begin
        g8_reg <= g8;
    end
    
	logic [2:0] v8c5l0_out [0:22];
	logic [2:0] v8c5l0 [0:22];
	assign v8c5l0_out[0] = g8_reg[0] + g8_reg[1] + g8_reg[2] + g8_reg[3];
	assign v8c5l0_out[1] = g8_reg[4] + g8_reg[5] + g8_reg[6] + g8_reg[7];
	assign v8c5l0_out[2] = g8_reg[8] + g8_reg[9] + g8_reg[10] + g8_reg[11];
	assign v8c5l0_out[3] = g8_reg[12] + g8_reg[13] + g8_reg[14] + g8_reg[15];
	assign v8c5l0_out[4] = g8_reg[16] + g8_reg[17] + g8_reg[18] + g8_reg[19];
	assign v8c5l0_out[5] = g8_reg[20] + g8_reg[21] + g8_reg[22] + g8_reg[23];
	assign v8c5l0_out[6] = g8_reg[24] + g8_reg[25] + g8_reg[26] + g8_reg[27];
	assign v8c5l0_out[7] = g8_reg[28] + g8_reg[29] + g8_reg[30] + g8_reg[31];
	assign v8c5l0_out[8] = g8_reg[32] + g8_reg[33] + g8_reg[34] + g8_reg[35];
	assign v8c5l0_out[9] = g8_reg[36] + g8_reg[37] + g8_reg[38] + g8_reg[39];
	assign v8c5l0_out[10] = g8_reg[40] + g8_reg[41] + g8_reg[42] + g8_reg[43];
	assign v8c5l0_out[11] = g8_reg[44] + g8_reg[45] + g8_reg[46] + g8_reg[47];
	assign v8c5l0_out[12] = g8_reg[48] + g8_reg[49] + g8_reg[50] + g8_reg[51];
	assign v8c5l0_out[13] = g8_reg[52] + g8_reg[53] + g8_reg[54] + g8_reg[55];
	assign v8c5l0_out[14] = g8_reg[56] + g8_reg[57] + g8_reg[58] + g8_reg[59];
	assign v8c5l0_out[15] = g8_reg[60] + g8_reg[61] + g8_reg[62] + g8_reg[63];
	assign v8c5l0_out[16] = g8_reg[64] + g8_reg[65] + g8_reg[66] + g8_reg[67];
	assign v8c5l0_out[17] = g8_reg[68] + g8_reg[69] + g8_reg[70] + g8_reg[71];
	assign v8c5l0_out[18] = g8_reg[72] + g8_reg[73] + g8_reg[74] + g8_reg[75];
	assign v8c5l0_out[19] = g8_reg[76] + g8_reg[77] + g8_reg[78] + g8_reg[79];
	assign v8c5l0_out[20] = g8_reg[80] + g8_reg[81] + g8_reg[82] + g8_reg[83];
	assign v8c5l0_out[21] = g8_reg[84] + g8_reg[85] + g8_reg[86] + g8_reg[87];
	assign v8c5l0_out[22] = g8_reg[88] + g8_reg[89];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 23; i = i + 1)
            v8c5l0[i] <= v8c5l0_out[i];
    end

	reg [3:0] v8c5l1 [0:11];
	logic [3:0] v8c5l1_out [0:11];
	assign v8c5l1_out[0] = v8c5l0[0] + v8c5l0[1];
	assign v8c5l1_out[1] = v8c5l0[2] + v8c5l0[3];
	assign v8c5l1_out[2] = v8c5l0[4] + v8c5l0[5];
	assign v8c5l1_out[3] = v8c5l0[6] + v8c5l0[7];
	assign v8c5l1_out[4] = v8c5l0[8] + v8c5l0[9];
	assign v8c5l1_out[5] = v8c5l0[10] + v8c5l0[11];
	assign v8c5l1_out[6] = v8c5l0[12] + v8c5l0[13];
	assign v8c5l1_out[7] = v8c5l0[14] + v8c5l0[15];
	assign v8c5l1_out[8] = v8c5l0[16] + v8c5l0[17];
	assign v8c5l1_out[9] = v8c5l0[18] + v8c5l0[19];
	assign v8c5l1_out[10] = v8c5l0[20] + v8c5l0[21];
	assign v8c5l1_out[11] = v8c5l0[22];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 12; i = i + 1)
            v8c5l1[i] <= v8c5l1_out[i];
    end

	reg [4:0] v8c5l2 [0:5];
	logic [4:0] v8c5l2_out [0:5];
	assign v8c5l2_out[0] = v8c5l1[0] + v8c5l1[1];
	assign v8c5l2_out[1] = v8c5l1[2] + v8c5l1[3];
	assign v8c5l2_out[2] = v8c5l1[4] + v8c5l1[5];
	assign v8c5l2_out[3] = v8c5l1[6] + v8c5l1[7];
	assign v8c5l2_out[4] = v8c5l1[8] + v8c5l1[9];
	assign v8c5l2_out[5] = v8c5l1[10] + v8c5l1[11];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 6; i = i + 1)
            v8c5l2[i] <= v8c5l2_out[i];
    end

	reg [5:0] v8c5l3 [0:2];
	logic [5:0] v8c5l3_out [0:2];
	assign v8c5l3_out[0] = v8c5l2[0] + v8c5l2[1];
	assign v8c5l3_out[1] = v8c5l2[2] + v8c5l2[3];
	assign v8c5l3_out[2] = v8c5l2[4] + v8c5l2[5];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 3; i = i + 1)
            v8c5l3[i] <= v8c5l3_out[i];
    end

	reg [6:0] v8c5l4 [0:1];
	logic [6:0] v8c5l4_out [0:1];
	assign v8c5l4_out[0] = v8c5l3[0] + v8c5l3[1];
	assign v8c5l4_out[1] = v8c5l3[2];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 2; i = i + 1)
            v8c5l4[i] <= v8c5l4_out[i];
    end

	reg [7:0] v8c5l5 [0:0];
	logic [7:0] v8c5l5_out [0:0];
	assign v8c5l5_out[0] = v8c5l4[0] + v8c5l4[1];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 1; i = i + 1)
            v8c5l5[i] <= v8c5l5_out[i];
    end

	assign val[8] = v8c5l5[0];
	
	// 0.25
	logic [0:52] g9;
	reg [0:52] g9_reg;
	assign g9[0] = l[6];
	assign g9[1] = l[25];
	assign g9[2] = l[40];
	assign g9[3] = l[46] || l[58];
	assign g9[4] = l[64] || l[66] || l[70] || l[73];
	assign g9[5] = l[78] || l[83] || l[84] || l[90];
	assign g9[6] = l[94] || l[97] || l[100] || l[102];
	assign g9[7] = l[111] || l[115] || l[116] || l[120];
	assign g9[8] = l[128] || l[130] || l[139];
	assign g9[9] = l[142] || l[147] || l[148] || l[156];
	assign g9[10] = l[163] || l[171];
	assign g9[11] = l[177] || l[178] || l[182];
	assign g9[12] = l[191] || l[193] || l[198];
	assign g9[13] = l[208] || l[217];
	assign g9[14] = l[223] || l[231];
	assign g9[15] = l[251];
	assign g9[16] = l[293];
	assign g9[17] = l[319] || l[326];
	assign g9[18] = l[334];
	assign g9[19] = l[350];
	assign g9[20] = l[367] || l[375];
	assign g9[21] = l[380] || l[390];
	assign g9[22] = l[396] || l[403];
	assign g9[23] = l[428] || l[430] || l[435];
	assign g9[24] = l[443];
	assign g9[25] = l[454];
	assign g9[26] = l[474] || l[478];
	assign g9[27] = l[480] || l[488];
	assign g9[28] = l[495] || l[503];
	assign g9[29] = l[507];
	assign g9[30] = l[556];
	assign g9[31] = l[570];
	assign g9[32] = l[595];
	assign g9[33] = l[600];
	assign g9[34] = l[618];
	assign g9[35] = l[629];
	assign g9[36] = l[632] || l[642];
	assign g9[37] = l[648];
	assign g9[38] = l[686];
	assign g9[39] = l[724];
	assign g9[40] = l[741] || l[744];
	assign g9[41] = l[751];
	assign g9[42] = l[776];
	assign g9[43] = l[805] || l[808];
	assign g9[44] = l[881];
	assign g9[45] = l[920] || l[930];
	assign g9[46] = l[964];
	assign g9[47] = l[1031];
	assign g9[48] = l[1038] || l[1042];
	assign g9[49] = l[1065];
	assign g9[50] = l[1114] || l[1123];
	assign g9[51] = l[1214];
	assign g9[52] = l[1324];
	
    always_ff @(posedge clk) begin
        g9_reg <= g9;
    end
    
	logic [2:0] v9c5l0_out [0:13];
	logic [2:0] v9c5l0 [0:13];
	assign v9c5l0_out[0] = g9_reg[0] + g9_reg[1] + g9_reg[2] + g9_reg[3];
	assign v9c5l0_out[1] = g9_reg[4] + g9_reg[5] + g9_reg[6] + g9_reg[7];
	assign v9c5l0_out[2] = g9_reg[8] + g9_reg[9] + g9_reg[10] + g9_reg[11];
	assign v9c5l0_out[3] = g9_reg[12] + g9_reg[13] + g9_reg[14] + g9_reg[15];
	assign v9c5l0_out[4] = g9_reg[16] + g9_reg[17] + g9_reg[18] + g9_reg[19];
	assign v9c5l0_out[5] = g9_reg[20] + g9_reg[21] + g9_reg[22] + g9_reg[23];
	assign v9c5l0_out[6] = g9_reg[24] + g9_reg[25] + g9_reg[26] + g9_reg[27];
	assign v9c5l0_out[7] = g9_reg[28] + g9_reg[29] + g9_reg[30] + g9_reg[31];
	assign v9c5l0_out[8] = g9_reg[32] + g9_reg[33] + g9_reg[34] + g9_reg[35];
	assign v9c5l0_out[9] = g9_reg[36] + g9_reg[37] + g9_reg[38] + g9_reg[39];
	assign v9c5l0_out[10] = g9_reg[40] + g9_reg[41] + g9_reg[42] + g9_reg[43];
	assign v9c5l0_out[11] = g9_reg[44] + g9_reg[45] + g9_reg[46] + g9_reg[47];
	assign v9c5l0_out[12] = g9_reg[48] + g9_reg[49] + g9_reg[50] + g9_reg[51];
	assign v9c5l0_out[13] = g9_reg[52];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 14; i = i + 1)
            v9c5l0[i] <= v9c5l0_out[i];
    end

	reg [3:0] v9c5l1 [0:6];
	logic [3:0] v9c5l1_out [0:6];
	assign v9c5l1_out[0] = v9c5l0[0] + v9c5l0[1];
	assign v9c5l1_out[1] = v9c5l0[2] + v9c5l0[3];
	assign v9c5l1_out[2] = v9c5l0[4] + v9c5l0[5];
	assign v9c5l1_out[3] = v9c5l0[6] + v9c5l0[7];
	assign v9c5l1_out[4] = v9c5l0[8] + v9c5l0[9];
	assign v9c5l1_out[5] = v9c5l0[10] + v9c5l0[11];
	assign v9c5l1_out[6] = v9c5l0[12] + v9c5l0[13];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 7; i = i + 1)
            v9c5l1[i] <= v9c5l1_out[i];
    end

	reg [4:0] v9c5l2 [0:3];
	logic [4:0] v9c5l2_out [0:3];
	assign v9c5l2_out[0] = v9c5l1[0] + v9c5l1[1];
	assign v9c5l2_out[1] = v9c5l1[2] + v9c5l1[3];
	assign v9c5l2_out[2] = v9c5l1[4] + v9c5l1[5];
	assign v9c5l2_out[3] = v9c5l1[6];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 4; i = i + 1)
            v9c5l2[i] <= v9c5l2_out[i];
    end

	reg [5:0] v9c5l3 [0:1];
	logic [5:0] v9c5l3_out [0:1];
	assign v9c5l3_out[0] = v9c5l2[0] + v9c5l2[1];
	assign v9c5l3_out[1] = v9c5l2[2] + v9c5l2[3];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 2; i = i + 1)
            v9c5l3[i] <= v9c5l3_out[i];
    end

	reg [6:0] v9c5l4 [0:0];
	logic [6:0] v9c5l4_out [0:0];
	assign v9c5l4_out[0] = v9c5l3[0] + v9c5l3[1];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 1; i = i + 1)
            v9c5l4[i] <= v9c5l4_out[i];
    end

	reg [7:0] v9c5l5 [0:0];
	logic [7:0] v9c5l5_out [0:0];
	assign v9c5l5_out[0] = v9c5l4[0];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 1; i = i + 1)
            v9c5l5[i] <= v9c5l5_out[i];
    end

	assign val[9] = v9c5l5[0];
	
	// 0.5
	logic [0:10] g10;
	reg [0:10] g10_reg;
	assign g10[0] = l[9];
	assign g10[1] = l[17] || l[19] || l[22] || l[26];
	assign g10[2] = l[31] || l[35] || l[36];
	assign g10[3] = l[52];
	assign g10[4] = l[88];
	assign g10[5] = l[99];
	assign g10[6] = l[401] || l[404];
	assign g10[7] = l[434];
	assign g10[8] = l[557];
	assign g10[9] = l[583];
	assign g10[10] = l[670];
	
    always_ff @(posedge clk) begin
        g10_reg <= g10;
    end
    
	logic [2:0] v10c5l0_out [0:2];
	logic [2:0] v10c5l0 [0:2];
	assign v10c5l0_out[0] = g10_reg[0] + g10_reg[1] + g10_reg[2] + g10_reg[3];
	assign v10c5l0_out[1] = g10_reg[4] + g10_reg[5] + g10_reg[6] + g10_reg[7];
	assign v10c5l0_out[2] = g10_reg[8] + g10_reg[9] + g10_reg[10];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 3; i = i + 1)
            v10c5l0[i] <= v10c5l0_out[i];
    end

	reg [3:0] v10c5l1 [0:1];
	logic [3:0] v10c5l1_out [0:1];
	assign v10c5l1_out[0] = v10c5l0[0] + v10c5l0[1];
	assign v10c5l1_out[1] = v10c5l0[2];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 2; i = i + 1)
            v10c5l1[i] <= v10c5l1_out[i];
    end

	reg [4:0] v10c5l2 [0:0];
	logic [4:0] v10c5l2_out [0:0];
	assign v10c5l2_out[0] = v10c5l1[0] + v10c5l1[1];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 1; i = i + 1)
            v10c5l2[i] <= v10c5l2_out[i];
    end

	reg [5:0] v10c5l3 [0:0];
	logic [5:0] v10c5l3_out [0:0];
	assign v10c5l3_out[0] = v10c5l2[0];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 1; i = i + 1)
            v10c5l3[i] <= v10c5l3_out[i];
    end

	reg [6:0] v10c5l4 [0:0];
	logic [6:0] v10c5l4_out [0:0];
	assign v10c5l4_out[0] = v10c5l3[0];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 1; i = i + 1)
            v10c5l4[i] <= v10c5l4_out[i];
    end

	reg [7:0] v10c5l5 [0:0];
	logic [7:0] v10c5l5_out [0:0];
	assign v10c5l5_out[0] = v10c5l4[0];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 1; i = i + 1)
            v10c5l5[i] <= v10c5l5_out[i];
    end

	assign val[10] = v10c5l5[0];
	
	// 1.0
	logic [0:1] g11;
	reg [0:1] g11_reg;
	assign g11[0] = l[2] || l[12];
	assign g11[1] = l[42];
	
    always_ff @(posedge clk) begin
        g11_reg <= g11;
    end
    
	logic [2:0] v11c5l0_out [0:0];
	logic [2:0] v11c5l0 [0:0];
	assign v11c5l0_out[0] = g11_reg[0] + g11_reg[1];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 1; i = i + 1)
            v11c5l0[i] <= v11c5l0_out[i];
    end

	reg [3:0] v11c5l1 [0:0];
	logic [3:0] v11c5l1_out [0:0];
	assign v11c5l1_out[0] = v11c5l0[0];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 1; i = i + 1)
            v11c5l1[i] <= v11c5l1_out[i];
    end

	reg [4:0] v11c5l2 [0:0];
	logic [4:0] v11c5l2_out [0:0];
	assign v11c5l2_out[0] = v11c5l1[0];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 1; i = i + 1)
            v11c5l2[i] <= v11c5l2_out[i];
    end

	reg [5:0] v11c5l3 [0:0];
	logic [5:0] v11c5l3_out [0:0];
	assign v11c5l3_out[0] = v11c5l2[0];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 1; i = i + 1)
            v11c5l3[i] <= v11c5l3_out[i];
    end

	reg [6:0] v11c5l4 [0:0];
	logic [6:0] v11c5l4_out [0:0];
	assign v11c5l4_out[0] = v11c5l3[0];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 1; i = i + 1)
            v11c5l4[i] <= v11c5l4_out[i];
    end

	reg [7:0] v11c5l5 [0:0];
	logic [7:0] v11c5l5_out [0:0];
	assign v11c5l5_out[0] = v11c5l4[0];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 1; i = i + 1)
            v11c5l5[i] <= v11c5l5_out[i];
    end

	assign val[11] = v11c5l5[0];
	
	// 2.0
	logic [0:0] g12;
	reg [0:0] g12_reg;
	assign g12[0] = l[4] || l[8];
	
    always_ff @(posedge clk) begin
        g12_reg <= g12;
    end
    
	logic [2:0] v12c5l0_out [0:0];
	logic [2:0] v12c5l0 [0:0];
	assign v12c5l0_out[0] = g12_reg[0];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 1; i = i + 1)
            v12c5l0[i] <= v12c5l0_out[i];
    end

	reg [3:0] v12c5l1 [0:0];
	logic [3:0] v12c5l1_out [0:0];
	assign v12c5l1_out[0] = v12c5l0[0];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 1; i = i + 1)
            v12c5l1[i] <= v12c5l1_out[i];
    end

	reg [4:0] v12c5l2 [0:0];
	logic [4:0] v12c5l2_out [0:0];
	assign v12c5l2_out[0] = v12c5l1[0];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 1; i = i + 1)
            v12c5l2[i] <= v12c5l2_out[i];
    end

	reg [5:0] v12c5l3 [0:0];
	logic [5:0] v12c5l3_out [0:0];
	assign v12c5l3_out[0] = v12c5l2[0];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 1; i = i + 1)
            v12c5l3[i] <= v12c5l3_out[i];
    end

	reg [6:0] v12c5l4 [0:0];
	logic [6:0] v12c5l4_out [0:0];
	assign v12c5l4_out[0] = v12c5l3[0];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 1; i = i + 1)
            v12c5l4[i] <= v12c5l4_out[i];
    end

	reg [7:0] v12c5l5 [0:0];
	logic [7:0] v12c5l5_out [0:0];
	assign v12c5l5_out[0] = v12c5l4[0];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 1; i = i + 1)
            v12c5l5[i] <= v12c5l5_out[i];
    end

	assign val[12] = v12c5l5[0];
	
endmodule


module leaf_counter_6(input logic clk, input logic [0:1336] l, output logic [7:0] val [0:12]);
    integer i;
	// -0.25
	logic [0:56] g0;
	reg [0:56] g0_reg;
	assign g0[0] = l[6] || l[12];
	assign g0[1] = l[36];
	assign g0[2] = l[48] || l[59];
	assign g0[3] = l[63];
	assign g0[4] = l[120];
	assign g0[5] = l[125] || l[140];
	assign g0[6] = l[147] || l[155];
	assign g0[7] = l[163];
	assign g0[8] = l[215];
	assign g0[9] = l[267];
	assign g0[10] = l[276] || l[281];
	assign g0[11] = l[294] || l[297];
	assign g0[12] = l[303] || l[312];
	assign g0[13] = l[337] || l[339] || l[343];
	assign g0[14] = l[363];
	assign g0[15] = l[384];
	assign g0[16] = l[392];
	assign g0[17] = l[402] || l[410];
	assign g0[18] = l[419];
	assign g0[19] = l[432];
	assign g0[20] = l[468] || l[476];
	assign g0[21] = l[484];
	assign g0[22] = l[492];
	assign g0[23] = l[514] || l[517];
	assign g0[24] = l[525];
	assign g0[25] = l[559];
	assign g0[26] = l[568];
	assign g0[27] = l[583];
	assign g0[28] = l[595];
	assign g0[29] = l[600] || l[605];
	assign g0[30] = l[627];
	assign g0[31] = l[639];
	assign g0[32] = l[661] || l[669];
	assign g0[33] = l[683];
	assign g0[34] = l[703];
	assign g0[35] = l[717];
	assign g0[36] = l[729] || l[732];
	assign g0[37] = l[743];
	assign g0[38] = l[777] || l[781];
	assign g0[39] = l[807];
	assign g0[40] = l[811] || l[821] || l[824];
	assign g0[41] = l[835];
	assign g0[42] = l[849] || l[854];
	assign g0[43] = l[869];
	assign g0[44] = l[874];
	assign g0[45] = l[898];
	assign g0[46] = l[948];
	assign g0[47] = l[968] || l[977];
	assign g0[48] = l[982];
	assign g0[49] = l[1009];
	assign g0[50] = l[1028];
	assign g0[51] = l[1036];
	assign g0[52] = l[1063] || l[1065] || l[1073];
	assign g0[53] = l[1093];
	assign g0[54] = l[1199];
	assign g0[55] = l[1291];
	assign g0[56] = l[1328];
	
    always_ff @(posedge clk) begin
        g0_reg <= g0;
    end
    
	logic [2:0] v0c6l0_out [0:14];
	logic [2:0] v0c6l0 [0:14];
	assign v0c6l0_out[0] = g0_reg[0] + g0_reg[1] + g0_reg[2] + g0_reg[3];
	assign v0c6l0_out[1] = g0_reg[4] + g0_reg[5] + g0_reg[6] + g0_reg[7];
	assign v0c6l0_out[2] = g0_reg[8] + g0_reg[9] + g0_reg[10] + g0_reg[11];
	assign v0c6l0_out[3] = g0_reg[12] + g0_reg[13] + g0_reg[14] + g0_reg[15];
	assign v0c6l0_out[4] = g0_reg[16] + g0_reg[17] + g0_reg[18] + g0_reg[19];
	assign v0c6l0_out[5] = g0_reg[20] + g0_reg[21] + g0_reg[22] + g0_reg[23];
	assign v0c6l0_out[6] = g0_reg[24] + g0_reg[25] + g0_reg[26] + g0_reg[27];
	assign v0c6l0_out[7] = g0_reg[28] + g0_reg[29] + g0_reg[30] + g0_reg[31];
	assign v0c6l0_out[8] = g0_reg[32] + g0_reg[33] + g0_reg[34] + g0_reg[35];
	assign v0c6l0_out[9] = g0_reg[36] + g0_reg[37] + g0_reg[38] + g0_reg[39];
	assign v0c6l0_out[10] = g0_reg[40] + g0_reg[41] + g0_reg[42] + g0_reg[43];
	assign v0c6l0_out[11] = g0_reg[44] + g0_reg[45] + g0_reg[46] + g0_reg[47];
	assign v0c6l0_out[12] = g0_reg[48] + g0_reg[49] + g0_reg[50] + g0_reg[51];
	assign v0c6l0_out[13] = g0_reg[52] + g0_reg[53] + g0_reg[54] + g0_reg[55];
	assign v0c6l0_out[14] = g0_reg[56];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 15; i = i + 1)
            v0c6l0[i] <= v0c6l0_out[i];
    end

	reg [3:0] v0c6l1 [0:7];
	logic [3:0] v0c6l1_out [0:7];
	assign v0c6l1_out[0] = v0c6l0[0] + v0c6l0[1];
	assign v0c6l1_out[1] = v0c6l0[2] + v0c6l0[3];
	assign v0c6l1_out[2] = v0c6l0[4] + v0c6l0[5];
	assign v0c6l1_out[3] = v0c6l0[6] + v0c6l0[7];
	assign v0c6l1_out[4] = v0c6l0[8] + v0c6l0[9];
	assign v0c6l1_out[5] = v0c6l0[10] + v0c6l0[11];
	assign v0c6l1_out[6] = v0c6l0[12] + v0c6l0[13];
	assign v0c6l1_out[7] = v0c6l0[14];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 8; i = i + 1)
            v0c6l1[i] <= v0c6l1_out[i];
    end

	reg [4:0] v0c6l2 [0:3];
	logic [4:0] v0c6l2_out [0:3];
	assign v0c6l2_out[0] = v0c6l1[0] + v0c6l1[1];
	assign v0c6l2_out[1] = v0c6l1[2] + v0c6l1[3];
	assign v0c6l2_out[2] = v0c6l1[4] + v0c6l1[5];
	assign v0c6l2_out[3] = v0c6l1[6] + v0c6l1[7];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 4; i = i + 1)
            v0c6l2[i] <= v0c6l2_out[i];
    end

	reg [5:0] v0c6l3 [0:1];
	logic [5:0] v0c6l3_out [0:1];
	assign v0c6l3_out[0] = v0c6l2[0] + v0c6l2[1];
	assign v0c6l3_out[1] = v0c6l2[2] + v0c6l2[3];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 2; i = i + 1)
            v0c6l3[i] <= v0c6l3_out[i];
    end

	reg [6:0] v0c6l4 [0:0];
	logic [6:0] v0c6l4_out [0:0];
	assign v0c6l4_out[0] = v0c6l3[0] + v0c6l3[1];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 1; i = i + 1)
            v0c6l4[i] <= v0c6l4_out[i];
    end

	reg [7:0] v0c6l5 [0:0];
	logic [7:0] v0c6l5_out [0:0];
	assign v0c6l5_out[0] = v0c6l4[0];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 1; i = i + 1)
            v0c6l5[i] <= v0c6l5_out[i];
    end

	assign val[0] = v0c6l5[0];
	
	// -0.125
	logic [0:98] g1;
	reg [0:98] g1_reg;
	assign g1[0] = l[0] || l[3] || l[10] || l[13] || l[14];
	assign g1[1] = l[16] || l[22] || l[26] || l[28];
	assign g1[2] = l[32] || l[41] || l[42] || l[44] || l[47];
	assign g1[3] = l[51] || l[53] || l[56] || l[60] || l[62];
	assign g1[4] = l[65] || l[68] || l[69] || l[73] || l[75] || l[78];
	assign g1[5] = l[79] || l[82] || l[83] || l[86] || l[87] || l[93];
	assign g1[6] = l[94] || l[97] || l[100] || l[102] || l[105] || l[108];
	assign g1[7] = l[109] || l[115] || l[117] || l[124];
	assign g1[8] = l[128] || l[130] || l[131] || l[136] || l[137];
	assign g1[9] = l[142] || l[143] || l[145] || l[148] || l[149] || l[152] || l[154];
	assign g1[10] = l[158] || l[161] || l[165] || l[167] || l[169] || l[171];
	assign g1[11] = l[172] || l[174] || l[176] || l[179] || l[182] || l[184] || l[187];
	assign g1[12] = l[192] || l[195] || l[196] || l[199] || l[200];
	assign g1[13] = l[203] || l[207] || l[210] || l[211] || l[213] || l[218];
	assign g1[14] = l[221] || l[223] || l[227] || l[229] || l[233];
	assign g1[15] = l[234] || l[239] || l[241] || l[243] || l[244] || l[246] || l[247];
	assign g1[16] = l[250] || l[257];
	assign g1[17] = l[260] || l[263] || l[266] || l[268] || l[270];
	assign g1[18] = l[271] || l[273] || l[283] || l[286];
	assign g1[19] = l[287] || l[289] || l[296] || l[299] || l[302];
	assign g1[20] = l[309] || l[314];
	assign g1[21] = l[320] || l[321] || l[324] || l[327] || l[331];
	assign g1[22] = l[336] || l[340];
	assign g1[23] = l[345] || l[346] || l[348] || l[352] || l[357] || l[358];
	assign g1[24] = l[360] || l[369] || l[370] || l[373];
	assign g1[25] = l[378] || l[380] || l[386] || l[387];
	assign g1[26] = l[393] || l[395] || l[396];
	assign g1[27] = l[397] || l[405];
	assign g1[28] = l[415] || l[418] || l[421] || l[423];
	assign g1[29] = l[424] || l[431] || l[435];
	assign g1[30] = l[440] || l[442] || l[444];
	assign g1[31] = l[445] || l[448] || l[450] || l[451] || l[453];
	assign g1[32] = l[461] || l[466] || l[470];
	assign g1[33] = l[477] || l[482] || l[485];
	assign g1[34] = l[488] || l[494];
	assign g1[35] = l[496] || l[497] || l[500] || l[505] || l[506];
	assign g1[36] = l[510] || l[516] || l[518] || l[519];
	assign g1[37] = l[522] || l[527] || l[529] || l[532];
	assign g1[38] = l[535] || l[538] || l[539] || l[541];
	assign g1[39] = l[546];
	assign g1[40] = l[550] || l[551] || l[557] || l[560] || l[561];
	assign g1[41] = l[569] || l[572] || l[573];
	assign g1[42] = l[575] || l[576] || l[578] || l[580] || l[582] || l[586];
	assign g1[43] = l[592] || l[597];
	assign g1[44] = l[604] || l[611];
	assign g1[45] = l[612] || l[620];
	assign g1[46] = l[624] || l[626] || l[629];
	assign g1[47] = l[631] || l[632] || l[634] || l[637] || l[642];
	assign g1[48] = l[646] || l[648] || l[656];
	assign g1[49] = l[664] || l[668];
	assign g1[50] = l[673] || l[674] || l[678] || l[679];
	assign g1[51] = l[682] || l[685] || l[691] || l[694];
	assign g1[52] = l[698] || l[706] || l[707] || l[711];
	assign g1[53] = l[722] || l[724] || l[733];
	assign g1[54] = l[736];
	assign g1[55] = l[750] || l[752];
	assign g1[56] = l[760] || l[762] || l[767] || l[768];
	assign g1[57] = l[771] || l[774];
	assign g1[58] = l[782] || l[793];
	assign g1[59] = l[796] || l[797] || l[802] || l[804] || l[805] || l[808] || l[809];
	assign g1[60] = l[813] || l[815] || l[820] || l[826];
	assign g1[61] = l[829] || l[833] || l[838];
	assign g1[62] = l[845] || l[851] || l[857];
	assign g1[63] = l[861] || l[862] || l[867];
	assign g1[64] = l[875] || l[876] || l[882];
	assign g1[65] = l[885] || l[889] || l[890];
	assign g1[66] = l[894] || l[903] || l[908];
	assign g1[67] = l[912] || l[914] || l[918] || l[920] || l[924];
	assign g1[68] = l[925] || l[928] || l[929] || l[930] || l[935] || l[938];
	assign g1[69] = l[941] || l[944] || l[947] || l[950] || l[952];
	assign g1[70] = l[960] || l[964];
	assign g1[71] = l[969] || l[973];
	assign g1[72] = l[980] || l[984] || l[986] || l[991] || l[993];
	assign g1[73] = l[998] || l[1002];
	assign g1[74] = l[1014] || l[1016];
	assign g1[75] = l[1021] || l[1022];
	assign g1[76] = l[1024] || l[1027] || l[1033];
	assign g1[77] = l[1038] || l[1044] || l[1047] || l[1049];
	assign g1[78] = l[1052] || l[1053] || l[1055];
	assign g1[79] = l[1066] || l[1070];
	assign g1[80] = l[1080] || l[1086];
	assign g1[81] = l[1090] || l[1096] || l[1097];
	assign g1[82] = l[1102] || l[1104] || l[1109] || l[1111];
	assign g1[83] = l[1113] || l[1118] || l[1119] || l[1122] || l[1123];
	assign g1[84] = l[1136];
	assign g1[85] = l[1142];
	assign g1[86] = l[1148] || l[1151] || l[1154] || l[1156];
	assign g1[87] = l[1161] || l[1167] || l[1174];
	assign g1[88] = l[1176] || l[1187] || l[1188] || l[1191];
	assign g1[89] = l[1193] || l[1194];
	assign g1[90] = l[1207] || l[1212] || l[1218] || l[1219];
	assign g1[91] = l[1221] || l[1231] || l[1234];
	assign g1[92] = l[1236] || l[1239] || l[1240] || l[1249];
	assign g1[93] = l[1258] || l[1261];
	assign g1[94] = l[1268] || l[1272] || l[1274] || l[1277];
	assign g1[95] = l[1284] || l[1289];
	assign g1[96] = l[1297] || l[1302] || l[1305];
	assign g1[97] = l[1309] || l[1311] || l[1314] || l[1317];
	assign g1[98] = l[1323] || l[1333];
	
    always_ff @(posedge clk) begin
        g1_reg <= g1;
    end
    
	logic [2:0] v1c6l0_out [0:24];
	logic [2:0] v1c6l0 [0:24];
	assign v1c6l0_out[0] = g1_reg[0] + g1_reg[1] + g1_reg[2] + g1_reg[3];
	assign v1c6l0_out[1] = g1_reg[4] + g1_reg[5] + g1_reg[6] + g1_reg[7];
	assign v1c6l0_out[2] = g1_reg[8] + g1_reg[9] + g1_reg[10] + g1_reg[11];
	assign v1c6l0_out[3] = g1_reg[12] + g1_reg[13] + g1_reg[14] + g1_reg[15];
	assign v1c6l0_out[4] = g1_reg[16] + g1_reg[17] + g1_reg[18] + g1_reg[19];
	assign v1c6l0_out[5] = g1_reg[20] + g1_reg[21] + g1_reg[22] + g1_reg[23];
	assign v1c6l0_out[6] = g1_reg[24] + g1_reg[25] + g1_reg[26] + g1_reg[27];
	assign v1c6l0_out[7] = g1_reg[28] + g1_reg[29] + g1_reg[30] + g1_reg[31];
	assign v1c6l0_out[8] = g1_reg[32] + g1_reg[33] + g1_reg[34] + g1_reg[35];
	assign v1c6l0_out[9] = g1_reg[36] + g1_reg[37] + g1_reg[38] + g1_reg[39];
	assign v1c6l0_out[10] = g1_reg[40] + g1_reg[41] + g1_reg[42] + g1_reg[43];
	assign v1c6l0_out[11] = g1_reg[44] + g1_reg[45] + g1_reg[46] + g1_reg[47];
	assign v1c6l0_out[12] = g1_reg[48] + g1_reg[49] + g1_reg[50] + g1_reg[51];
	assign v1c6l0_out[13] = g1_reg[52] + g1_reg[53] + g1_reg[54] + g1_reg[55];
	assign v1c6l0_out[14] = g1_reg[56] + g1_reg[57] + g1_reg[58] + g1_reg[59];
	assign v1c6l0_out[15] = g1_reg[60] + g1_reg[61] + g1_reg[62] + g1_reg[63];
	assign v1c6l0_out[16] = g1_reg[64] + g1_reg[65] + g1_reg[66] + g1_reg[67];
	assign v1c6l0_out[17] = g1_reg[68] + g1_reg[69] + g1_reg[70] + g1_reg[71];
	assign v1c6l0_out[18] = g1_reg[72] + g1_reg[73] + g1_reg[74] + g1_reg[75];
	assign v1c6l0_out[19] = g1_reg[76] + g1_reg[77] + g1_reg[78] + g1_reg[79];
	assign v1c6l0_out[20] = g1_reg[80] + g1_reg[81] + g1_reg[82] + g1_reg[83];
	assign v1c6l0_out[21] = g1_reg[84] + g1_reg[85] + g1_reg[86] + g1_reg[87];
	assign v1c6l0_out[22] = g1_reg[88] + g1_reg[89] + g1_reg[90] + g1_reg[91];
	assign v1c6l0_out[23] = g1_reg[92] + g1_reg[93] + g1_reg[94] + g1_reg[95];
	assign v1c6l0_out[24] = g1_reg[96] + g1_reg[97] + g1_reg[98];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 25; i = i + 1)
            v1c6l0[i] <= v1c6l0_out[i];
    end

	reg [3:0] v1c6l1 [0:12];
	logic [3:0] v1c6l1_out [0:12];
	assign v1c6l1_out[0] = v1c6l0[0] + v1c6l0[1];
	assign v1c6l1_out[1] = v1c6l0[2] + v1c6l0[3];
	assign v1c6l1_out[2] = v1c6l0[4] + v1c6l0[5];
	assign v1c6l1_out[3] = v1c6l0[6] + v1c6l0[7];
	assign v1c6l1_out[4] = v1c6l0[8] + v1c6l0[9];
	assign v1c6l1_out[5] = v1c6l0[10] + v1c6l0[11];
	assign v1c6l1_out[6] = v1c6l0[12] + v1c6l0[13];
	assign v1c6l1_out[7] = v1c6l0[14] + v1c6l0[15];
	assign v1c6l1_out[8] = v1c6l0[16] + v1c6l0[17];
	assign v1c6l1_out[9] = v1c6l0[18] + v1c6l0[19];
	assign v1c6l1_out[10] = v1c6l0[20] + v1c6l0[21];
	assign v1c6l1_out[11] = v1c6l0[22] + v1c6l0[23];
	assign v1c6l1_out[12] = v1c6l0[24];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 13; i = i + 1)
            v1c6l1[i] <= v1c6l1_out[i];
    end

	reg [4:0] v1c6l2 [0:6];
	logic [4:0] v1c6l2_out [0:6];
	assign v1c6l2_out[0] = v1c6l1[0] + v1c6l1[1];
	assign v1c6l2_out[1] = v1c6l1[2] + v1c6l1[3];
	assign v1c6l2_out[2] = v1c6l1[4] + v1c6l1[5];
	assign v1c6l2_out[3] = v1c6l1[6] + v1c6l1[7];
	assign v1c6l2_out[4] = v1c6l1[8] + v1c6l1[9];
	assign v1c6l2_out[5] = v1c6l1[10] + v1c6l1[11];
	assign v1c6l2_out[6] = v1c6l1[12];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 7; i = i + 1)
            v1c6l2[i] <= v1c6l2_out[i];
    end

	reg [5:0] v1c6l3 [0:3];
	logic [5:0] v1c6l3_out [0:3];
	assign v1c6l3_out[0] = v1c6l2[0] + v1c6l2[1];
	assign v1c6l3_out[1] = v1c6l2[2] + v1c6l2[3];
	assign v1c6l3_out[2] = v1c6l2[4] + v1c6l2[5];
	assign v1c6l3_out[3] = v1c6l2[6];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 4; i = i + 1)
            v1c6l3[i] <= v1c6l3_out[i];
    end

	reg [6:0] v1c6l4 [0:1];
	logic [6:0] v1c6l4_out [0:1];
	assign v1c6l4_out[0] = v1c6l3[0] + v1c6l3[1];
	assign v1c6l4_out[1] = v1c6l3[2] + v1c6l3[3];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 2; i = i + 1)
            v1c6l4[i] <= v1c6l4_out[i];
    end

	reg [7:0] v1c6l5 [0:0];
	logic [7:0] v1c6l5_out [0:0];
	assign v1c6l5_out[0] = v1c6l4[0] + v1c6l4[1];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 1; i = i + 1)
            v1c6l5[i] <= v1c6l5_out[i];
    end

	assign val[1] = v1c6l5[0];
	
	// -0.0625
	logic [0:74] g2;
	reg [0:74] g2_reg;
	assign g2[0] = l[19] || l[31];
	assign g2[1] = l[34];
	assign g2[2] = l[64];
	assign g2[3] = l[116];
	assign g2[4] = l[126] || l[133];
	assign g2[5] = l[164];
	assign g2[6] = l[188] || l[191] || l[193] || l[202];
	assign g2[7] = l[212];
	assign g2[8] = l[225];
	assign g2[9] = l[249] || l[251] || l[254] || l[255] || l[258];
	assign g2[10] = l[284];
	assign g2[11] = l[305] || l[308] || l[311] || l[315];
	assign g2[12] = l[334];
	assign g2[13] = l[338] || l[341];
	assign g2[14] = l[383];
	assign g2[15] = l[388];
	assign g2[16] = l[411];
	assign g2[17] = l[414] || l[417];
	assign g2[18] = l[429] || l[433];
	assign g2[19] = l[456] || l[459];
	assign g2[20] = l[464] || l[465] || l[472] || l[474];
	assign g2[21] = l[490];
	assign g2[22] = l[509];
	assign g2[23] = l[530];
	assign g2[24] = l[533];
	assign g2[25] = l[542] || l[544];
	assign g2[26] = l[555];
	assign g2[27] = l[584];
	assign g2[28] = l[590];
	assign g2[29] = l[599] || l[606] || l[607];
	assign g2[30] = l[616] || l[618];
	assign g2[31] = l[622];
	assign g2[32] = l[635];
	assign g2[33] = l[651] || l[654];
	assign g2[34] = l[658] || l[663] || l[666] || l[671];
	assign g2[35] = l[677];
	assign g2[36] = l[689];
	assign g2[37] = l[704];
	assign g2[38] = l[714];
	assign g2[39] = l[727] || l[731];
	assign g2[40] = l[737] || l[740];
	assign g2[41] = l[745] || l[748];
	assign g2[42] = l[754];
	assign g2[43] = l[784] || l[791];
	assign g2[44] = l[832] || l[836];
	assign g2[45] = l[843] || l[844] || l[846] || l[855];
	assign g2[46] = l[864] || l[865];
	assign g2[47] = l[880];
	assign g2[48] = l[897] || l[899];
	assign g2[49] = l[915] || l[917] || l[923];
	assign g2[50] = l[937];
	assign g2[51] = l[958] || l[963];
	assign g2[52] = l[972];
	assign g2[53] = l[989];
	assign g2[54] = l[997] || l[1001] || l[1003] || l[1005];
	assign g2[55] = l[1026] || l[1030];
	assign g2[56] = l[1035] || l[1041];
	assign g2[57] = l[1057];
	assign g2[58] = l[1061] || l[1064] || l[1074];
	assign g2[59] = l[1076] || l[1081];
	assign g2[60] = l[1105] || l[1110];
	assign g2[61] = l[1128] || l[1131] || l[1134];
	assign g2[62] = l[1140] || l[1145];
	assign g2[63] = l[1152] || l[1158];
	assign g2[64] = l[1164] || l[1165] || l[1172];
	assign g2[65] = l[1183];
	assign g2[66] = l[1200] || l[1204] || l[1205];
	assign g2[67] = l[1220] || l[1223] || l[1226] || l[1232];
	assign g2[68] = l[1246];
	assign g2[69] = l[1253] || l[1255];
	assign g2[70] = l[1265] || l[1271];
	assign g2[71] = l[1280];
	assign g2[72] = l[1292] || l[1294] || l[1296];
	assign g2[73] = l[1308] || l[1316] || l[1322];
	assign g2[74] = l[1326] || l[1329] || l[1332] || l[1334];
	
    always_ff @(posedge clk) begin
        g2_reg <= g2;
    end
    
	logic [2:0] v2c6l0_out [0:18];
	logic [2:0] v2c6l0 [0:18];
	assign v2c6l0_out[0] = g2_reg[0] + g2_reg[1] + g2_reg[2] + g2_reg[3];
	assign v2c6l0_out[1] = g2_reg[4] + g2_reg[5] + g2_reg[6] + g2_reg[7];
	assign v2c6l0_out[2] = g2_reg[8] + g2_reg[9] + g2_reg[10] + g2_reg[11];
	assign v2c6l0_out[3] = g2_reg[12] + g2_reg[13] + g2_reg[14] + g2_reg[15];
	assign v2c6l0_out[4] = g2_reg[16] + g2_reg[17] + g2_reg[18] + g2_reg[19];
	assign v2c6l0_out[5] = g2_reg[20] + g2_reg[21] + g2_reg[22] + g2_reg[23];
	assign v2c6l0_out[6] = g2_reg[24] + g2_reg[25] + g2_reg[26] + g2_reg[27];
	assign v2c6l0_out[7] = g2_reg[28] + g2_reg[29] + g2_reg[30] + g2_reg[31];
	assign v2c6l0_out[8] = g2_reg[32] + g2_reg[33] + g2_reg[34] + g2_reg[35];
	assign v2c6l0_out[9] = g2_reg[36] + g2_reg[37] + g2_reg[38] + g2_reg[39];
	assign v2c6l0_out[10] = g2_reg[40] + g2_reg[41] + g2_reg[42] + g2_reg[43];
	assign v2c6l0_out[11] = g2_reg[44] + g2_reg[45] + g2_reg[46] + g2_reg[47];
	assign v2c6l0_out[12] = g2_reg[48] + g2_reg[49] + g2_reg[50] + g2_reg[51];
	assign v2c6l0_out[13] = g2_reg[52] + g2_reg[53] + g2_reg[54] + g2_reg[55];
	assign v2c6l0_out[14] = g2_reg[56] + g2_reg[57] + g2_reg[58] + g2_reg[59];
	assign v2c6l0_out[15] = g2_reg[60] + g2_reg[61] + g2_reg[62] + g2_reg[63];
	assign v2c6l0_out[16] = g2_reg[64] + g2_reg[65] + g2_reg[66] + g2_reg[67];
	assign v2c6l0_out[17] = g2_reg[68] + g2_reg[69] + g2_reg[70] + g2_reg[71];
	assign v2c6l0_out[18] = g2_reg[72] + g2_reg[73] + g2_reg[74];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 19; i = i + 1)
            v2c6l0[i] <= v2c6l0_out[i];
    end

	reg [3:0] v2c6l1 [0:9];
	logic [3:0] v2c6l1_out [0:9];
	assign v2c6l1_out[0] = v2c6l0[0] + v2c6l0[1];
	assign v2c6l1_out[1] = v2c6l0[2] + v2c6l0[3];
	assign v2c6l1_out[2] = v2c6l0[4] + v2c6l0[5];
	assign v2c6l1_out[3] = v2c6l0[6] + v2c6l0[7];
	assign v2c6l1_out[4] = v2c6l0[8] + v2c6l0[9];
	assign v2c6l1_out[5] = v2c6l0[10] + v2c6l0[11];
	assign v2c6l1_out[6] = v2c6l0[12] + v2c6l0[13];
	assign v2c6l1_out[7] = v2c6l0[14] + v2c6l0[15];
	assign v2c6l1_out[8] = v2c6l0[16] + v2c6l0[17];
	assign v2c6l1_out[9] = v2c6l0[18];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 10; i = i + 1)
            v2c6l1[i] <= v2c6l1_out[i];
    end

	reg [4:0] v2c6l2 [0:4];
	logic [4:0] v2c6l2_out [0:4];
	assign v2c6l2_out[0] = v2c6l1[0] + v2c6l1[1];
	assign v2c6l2_out[1] = v2c6l1[2] + v2c6l1[3];
	assign v2c6l2_out[2] = v2c6l1[4] + v2c6l1[5];
	assign v2c6l2_out[3] = v2c6l1[6] + v2c6l1[7];
	assign v2c6l2_out[4] = v2c6l1[8] + v2c6l1[9];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 5; i = i + 1)
            v2c6l2[i] <= v2c6l2_out[i];
    end

	reg [5:0] v2c6l3 [0:2];
	logic [5:0] v2c6l3_out [0:2];
	assign v2c6l3_out[0] = v2c6l2[0] + v2c6l2[1];
	assign v2c6l3_out[1] = v2c6l2[2] + v2c6l2[3];
	assign v2c6l3_out[2] = v2c6l2[4];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 3; i = i + 1)
            v2c6l3[i] <= v2c6l3_out[i];
    end

	reg [6:0] v2c6l4 [0:1];
	logic [6:0] v2c6l4_out [0:1];
	assign v2c6l4_out[0] = v2c6l3[0] + v2c6l3[1];
	assign v2c6l4_out[1] = v2c6l3[2];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 2; i = i + 1)
            v2c6l4[i] <= v2c6l4_out[i];
    end

	reg [7:0] v2c6l5 [0:0];
	logic [7:0] v2c6l5_out [0:0];
	assign v2c6l5_out[0] = v2c6l4[0] + v2c6l4[1];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 1; i = i + 1)
            v2c6l5[i] <= v2c6l5_out[i];
    end

	assign val[2] = v2c6l5[0];
	
	// -0.03125
	logic [0:42] g3;
	reg [0:42] g3_reg;
	assign g3[0] = l[58];
	assign g3[1] = l[160];
	assign g3[2] = l[280];
	assign g3[3] = l[293];
	assign g3[4] = l[304];
	assign g3[5] = l[323];
	assign g3[6] = l[350];
	assign g3[7] = l[364];
	assign g3[8] = l[377];
	assign g3[9] = l[390];
	assign g3[10] = l[401];
	assign g3[11] = l[436] || l[441];
	assign g3[12] = l[487];
	assign g3[13] = l[588] || l[596];
	assign g3[14] = l[602];
	assign g3[15] = l[710];
	assign g3[16] = l[751];
	assign g3[17] = l[757];
	assign g3[18] = l[778];
	assign g3[19] = l[789];
	assign g3[20] = l[799];
	assign g3[21] = l[812] || l[818];
	assign g3[22] = l[828] || l[841];
	assign g3[23] = l[870];
	assign g3[24] = l[878];
	assign g3[25] = l[887];
	assign g3[26] = l[922];
	assign g3[27] = l[979];
	assign g3[28] = l[994];
	assign g3[29] = l[1011];
	assign g3[30] = l[1040] || l[1046];
	assign g3[31] = l[1062] || l[1072];
	assign g3[32] = l[1082];
	assign g3[33] = l[1092] || l[1094];
	assign g3[34] = l[1116] || l[1120] || l[1126];
	assign g3[35] = l[1179] || l[1181];
	assign g3[36] = l[1197] || l[1202];
	assign g3[37] = l[1209];
	assign g3[38] = l[1229];
	assign g3[39] = l[1245];
	assign g3[40] = l[1278];
	assign g3[41] = l[1285] || l[1287];
	assign g3[42] = l[1299];
	
    always_ff @(posedge clk) begin
        g3_reg <= g3;
    end
    
	logic [2:0] v3c6l0_out [0:10];
	logic [2:0] v3c6l0 [0:10];
	assign v3c6l0_out[0] = g3_reg[0] + g3_reg[1] + g3_reg[2] + g3_reg[3];
	assign v3c6l0_out[1] = g3_reg[4] + g3_reg[5] + g3_reg[6] + g3_reg[7];
	assign v3c6l0_out[2] = g3_reg[8] + g3_reg[9] + g3_reg[10] + g3_reg[11];
	assign v3c6l0_out[3] = g3_reg[12] + g3_reg[13] + g3_reg[14] + g3_reg[15];
	assign v3c6l0_out[4] = g3_reg[16] + g3_reg[17] + g3_reg[18] + g3_reg[19];
	assign v3c6l0_out[5] = g3_reg[20] + g3_reg[21] + g3_reg[22] + g3_reg[23];
	assign v3c6l0_out[6] = g3_reg[24] + g3_reg[25] + g3_reg[26] + g3_reg[27];
	assign v3c6l0_out[7] = g3_reg[28] + g3_reg[29] + g3_reg[30] + g3_reg[31];
	assign v3c6l0_out[8] = g3_reg[32] + g3_reg[33] + g3_reg[34] + g3_reg[35];
	assign v3c6l0_out[9] = g3_reg[36] + g3_reg[37] + g3_reg[38] + g3_reg[39];
	assign v3c6l0_out[10] = g3_reg[40] + g3_reg[41] + g3_reg[42];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 11; i = i + 1)
            v3c6l0[i] <= v3c6l0_out[i];
    end

	reg [3:0] v3c6l1 [0:5];
	logic [3:0] v3c6l1_out [0:5];
	assign v3c6l1_out[0] = v3c6l0[0] + v3c6l0[1];
	assign v3c6l1_out[1] = v3c6l0[2] + v3c6l0[3];
	assign v3c6l1_out[2] = v3c6l0[4] + v3c6l0[5];
	assign v3c6l1_out[3] = v3c6l0[6] + v3c6l0[7];
	assign v3c6l1_out[4] = v3c6l0[8] + v3c6l0[9];
	assign v3c6l1_out[5] = v3c6l0[10];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 6; i = i + 1)
            v3c6l1[i] <= v3c6l1_out[i];
    end

	reg [4:0] v3c6l2 [0:2];
	logic [4:0] v3c6l2_out [0:2];
	assign v3c6l2_out[0] = v3c6l1[0] + v3c6l1[1];
	assign v3c6l2_out[1] = v3c6l1[2] + v3c6l1[3];
	assign v3c6l2_out[2] = v3c6l1[4] + v3c6l1[5];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 3; i = i + 1)
            v3c6l2[i] <= v3c6l2_out[i];
    end

	reg [5:0] v3c6l3 [0:1];
	logic [5:0] v3c6l3_out [0:1];
	assign v3c6l3_out[0] = v3c6l2[0] + v3c6l2[1];
	assign v3c6l3_out[1] = v3c6l2[2];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 2; i = i + 1)
            v3c6l3[i] <= v3c6l3_out[i];
    end

	reg [6:0] v3c6l4 [0:0];
	logic [6:0] v3c6l4_out [0:0];
	assign v3c6l4_out[0] = v3c6l3[0] + v3c6l3[1];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 1; i = i + 1)
            v3c6l4[i] <= v3c6l4_out[i];
    end

	reg [7:0] v3c6l5 [0:0];
	logic [7:0] v3c6l5_out [0:0];
	assign v3c6l5_out[0] = v3c6l4[0];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 1; i = i + 1)
            v3c6l5[i] <= v3c6l5_out[i];
    end

	assign val[3] = v3c6l5[0];
	
	// -0.015625
	logic [0:36] g4;
	reg [0:36] g4_reg;
	assign g4[0] = l[80];
	assign g4[1] = l[206];
	assign g4[2] = l[230];
	assign g4[3] = l[235] || l[238];
	assign g4[4] = l[264];
	assign g4[5] = l[328];
	assign g4[6] = l[426];
	assign g4[7] = l[469];
	assign g4[8] = l[479];
	assign g4[9] = l[493];
	assign g4[10] = l[524];
	assign g4[11] = l[623] || l[628];
	assign g4[12] = l[645];
	assign g4[13] = l[659];
	assign g4[14] = l[680];
	assign g4[15] = l[701];
	assign g4[16] = l[715];
	assign g4[17] = l[721];
	assign g4[18] = l[758] || l[765];
	assign g4[19] = l[776] || l[780];
	assign g4[20] = l[783];
	assign g4[21] = l[806];
	assign g4[22] = l[852];
	assign g4[23] = l[901];
	assign g4[24] = l[910];
	assign g4[25] = l[983];
	assign g4[26] = l[1007] || l[1010];
	assign g4[27] = l[1018];
	assign g4[28] = l[1139];
	assign g4[29] = l[1155];
	assign g4[30] = l[1162] || l[1175];
	assign g4[31] = l[1214];
	assign g4[32] = l[1263];
	assign g4[33] = l[1266];
	assign g4[34] = l[1290];
	assign g4[35] = l[1312];
	assign g4[36] = l[1327];
	
    always_ff @(posedge clk) begin
        g4_reg <= g4;
    end
    
	logic [2:0] v4c6l0_out [0:9];
	logic [2:0] v4c6l0 [0:9];
	assign v4c6l0_out[0] = g4_reg[0] + g4_reg[1] + g4_reg[2] + g4_reg[3];
	assign v4c6l0_out[1] = g4_reg[4] + g4_reg[5] + g4_reg[6] + g4_reg[7];
	assign v4c6l0_out[2] = g4_reg[8] + g4_reg[9] + g4_reg[10] + g4_reg[11];
	assign v4c6l0_out[3] = g4_reg[12] + g4_reg[13] + g4_reg[14] + g4_reg[15];
	assign v4c6l0_out[4] = g4_reg[16] + g4_reg[17] + g4_reg[18] + g4_reg[19];
	assign v4c6l0_out[5] = g4_reg[20] + g4_reg[21] + g4_reg[22] + g4_reg[23];
	assign v4c6l0_out[6] = g4_reg[24] + g4_reg[25] + g4_reg[26] + g4_reg[27];
	assign v4c6l0_out[7] = g4_reg[28] + g4_reg[29] + g4_reg[30] + g4_reg[31];
	assign v4c6l0_out[8] = g4_reg[32] + g4_reg[33] + g4_reg[34] + g4_reg[35];
	assign v4c6l0_out[9] = g4_reg[36];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 10; i = i + 1)
            v4c6l0[i] <= v4c6l0_out[i];
    end

	reg [3:0] v4c6l1 [0:4];
	logic [3:0] v4c6l1_out [0:4];
	assign v4c6l1_out[0] = v4c6l0[0] + v4c6l0[1];
	assign v4c6l1_out[1] = v4c6l0[2] + v4c6l0[3];
	assign v4c6l1_out[2] = v4c6l0[4] + v4c6l0[5];
	assign v4c6l1_out[3] = v4c6l0[6] + v4c6l0[7];
	assign v4c6l1_out[4] = v4c6l0[8] + v4c6l0[9];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 5; i = i + 1)
            v4c6l1[i] <= v4c6l1_out[i];
    end

	reg [4:0] v4c6l2 [0:2];
	logic [4:0] v4c6l2_out [0:2];
	assign v4c6l2_out[0] = v4c6l1[0] + v4c6l1[1];
	assign v4c6l2_out[1] = v4c6l1[2] + v4c6l1[3];
	assign v4c6l2_out[2] = v4c6l1[4];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 3; i = i + 1)
            v4c6l2[i] <= v4c6l2_out[i];
    end

	reg [5:0] v4c6l3 [0:1];
	logic [5:0] v4c6l3_out [0:1];
	assign v4c6l3_out[0] = v4c6l2[0] + v4c6l2[1];
	assign v4c6l3_out[1] = v4c6l2[2];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 2; i = i + 1)
            v4c6l3[i] <= v4c6l3_out[i];
    end

	reg [6:0] v4c6l4 [0:0];
	logic [6:0] v4c6l4_out [0:0];
	assign v4c6l4_out[0] = v4c6l3[0] + v4c6l3[1];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 1; i = i + 1)
            v4c6l4[i] <= v4c6l4_out[i];
    end

	reg [7:0] v4c6l5 [0:0];
	logic [7:0] v4c6l5_out [0:0];
	assign v4c6l5_out[0] = v4c6l4[0];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 1; i = i + 1)
            v4c6l5[i] <= v4c6l5_out[i];
    end

	assign val[4] = v4c6l5[0];
	
	// 0.015625
	logic [0:37] g5;
	reg [0:37] g5_reg;
	assign g5[0] = l[72];
	assign g5[1] = l[111];
	assign g5[2] = l[157];
	assign g5[3] = l[275];
	assign g5[4] = l[443];
	assign g5[5] = l[481];
	assign g5[6] = l[495] || l[501];
	assign g5[7] = l[552];
	assign g5[8] = l[577];
	assign g5[9] = l[613] || l[614];
	assign g5[10] = l[649];
	assign g5[11] = l[693];
	assign g5[12] = l[718];
	assign g5[13] = l[755];
	assign g5[14] = l[830];
	assign g5[15] = l[871];
	assign g5[16] = l[888];
	assign g5[17] = l[893];
	assign g5[18] = l[959];
	assign g5[19] = l[967] || l[974];
	assign g5[20] = l[981];
	assign g5[21] = l[999] || l[1004];
	assign g5[22] = l[1017];
	assign g5[23] = l[1032];
	assign g5[24] = l[1068];
	assign g5[25] = l[1114];
	assign g5[26] = l[1137];
	assign g5[27] = l[1143];
	assign g5[28] = l[1147] || l[1150];
	assign g5[29] = l[1186];
	assign g5[30] = l[1230];
	assign g5[31] = l[1237] || l[1247];
	assign g5[32] = l[1252];
	assign g5[33] = l[1269] || l[1273];
	assign g5[34] = l[1279] || l[1286];
	assign g5[35] = l[1298];
	assign g5[36] = l[1313] || l[1318];
	assign g5[37] = l[1335];
	
    always_ff @(posedge clk) begin
        g5_reg <= g5;
    end
    
	logic [2:0] v5c6l0_out [0:9];
	logic [2:0] v5c6l0 [0:9];
	assign v5c6l0_out[0] = g5_reg[0] + g5_reg[1] + g5_reg[2] + g5_reg[3];
	assign v5c6l0_out[1] = g5_reg[4] + g5_reg[5] + g5_reg[6] + g5_reg[7];
	assign v5c6l0_out[2] = g5_reg[8] + g5_reg[9] + g5_reg[10] + g5_reg[11];
	assign v5c6l0_out[3] = g5_reg[12] + g5_reg[13] + g5_reg[14] + g5_reg[15];
	assign v5c6l0_out[4] = g5_reg[16] + g5_reg[17] + g5_reg[18] + g5_reg[19];
	assign v5c6l0_out[5] = g5_reg[20] + g5_reg[21] + g5_reg[22] + g5_reg[23];
	assign v5c6l0_out[6] = g5_reg[24] + g5_reg[25] + g5_reg[26] + g5_reg[27];
	assign v5c6l0_out[7] = g5_reg[28] + g5_reg[29] + g5_reg[30] + g5_reg[31];
	assign v5c6l0_out[8] = g5_reg[32] + g5_reg[33] + g5_reg[34] + g5_reg[35];
	assign v5c6l0_out[9] = g5_reg[36] + g5_reg[37];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 10; i = i + 1)
            v5c6l0[i] <= v5c6l0_out[i];
    end

	reg [3:0] v5c6l1 [0:4];
	logic [3:0] v5c6l1_out [0:4];
	assign v5c6l1_out[0] = v5c6l0[0] + v5c6l0[1];
	assign v5c6l1_out[1] = v5c6l0[2] + v5c6l0[3];
	assign v5c6l1_out[2] = v5c6l0[4] + v5c6l0[5];
	assign v5c6l1_out[3] = v5c6l0[6] + v5c6l0[7];
	assign v5c6l1_out[4] = v5c6l0[8] + v5c6l0[9];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 5; i = i + 1)
            v5c6l1[i] <= v5c6l1_out[i];
    end

	reg [4:0] v5c6l2 [0:2];
	logic [4:0] v5c6l2_out [0:2];
	assign v5c6l2_out[0] = v5c6l1[0] + v5c6l1[1];
	assign v5c6l2_out[1] = v5c6l1[2] + v5c6l1[3];
	assign v5c6l2_out[2] = v5c6l1[4];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 3; i = i + 1)
            v5c6l2[i] <= v5c6l2_out[i];
    end

	reg [5:0] v5c6l3 [0:1];
	logic [5:0] v5c6l3_out [0:1];
	assign v5c6l3_out[0] = v5c6l2[0] + v5c6l2[1];
	assign v5c6l3_out[1] = v5c6l2[2];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 2; i = i + 1)
            v5c6l3[i] <= v5c6l3_out[i];
    end

	reg [6:0] v5c6l4 [0:0];
	logic [6:0] v5c6l4_out [0:0];
	assign v5c6l4_out[0] = v5c6l3[0] + v5c6l3[1];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 1; i = i + 1)
            v5c6l4[i] <= v5c6l4_out[i];
    end

	reg [7:0] v5c6l5 [0:0];
	logic [7:0] v5c6l5_out [0:0];
	assign v5c6l5_out[0] = v5c6l4[0];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 1; i = i + 1)
            v5c6l5[i] <= v5c6l5_out[i];
    end

	assign val[5] = v5c6l5[0];
	
	// 0.03125
	logic [0:67] g6;
	reg [0:67] g6_reg;
	assign g6[0] = l[9];
	assign g6[1] = l[156];
	assign g6[2] = l[162];
	assign g6[3] = l[197];
	assign g6[4] = l[224];
	assign g6[5] = l[269];
	assign g6[6] = l[277];
	assign g6[7] = l[298];
	assign g6[8] = l[318];
	assign g6[9] = l[329];
	assign g6[10] = l[347] || l[354];
	assign g6[11] = l[362];
	assign g6[12] = l[400];
	assign g6[13] = l[413] || l[420];
	assign g6[14] = l[430];
	assign g6[15] = l[437];
	assign g6[16] = l[462];
	assign g6[17] = l[502];
	assign g6[18] = l[543] || l[547];
	assign g6[19] = l[549];
	assign g6[20] = l[571];
	assign g6[21] = l[574];
	assign g6[22] = l[587];
	assign g6[23] = l[603];
	assign g6[24] = l[621];
	assign g6[25] = l[630];
	assign g6[26] = l[647];
	assign g6[27] = l[657];
	assign g6[28] = l[672] || l[675];
	assign g6[29] = l[686];
	assign g6[30] = l[697] || l[699] || l[708] || l[712];
	assign g6[31] = l[723];
	assign g6[32] = l[744];
	assign g6[33] = l[770];
	assign g6[34] = l[795] || l[810];
	assign g6[35] = l[816];
	assign g6[36] = l[827] || l[834] || l[837];
	assign g6[37] = l[847] || l[848];
	assign g6[38] = l[860];
	assign g6[39] = l[877];
	assign g6[40] = l[904];
	assign g6[41] = l[911];
	assign g6[42] = l[939];
	assign g6[43] = l[940] || l[942] || l[949] || l[951];
	assign g6[44] = l[961];
	assign g6[45] = l[965];
	assign g6[46] = l[995];
	assign g6[47] = l[1008];
	assign g6[48] = l[1020];
	assign g6[49] = l[1023] || l[1025];
	assign g6[50] = l[1051];
	assign g6[51] = l[1060];
	assign g6[52] = l[1077];
	assign g6[53] = l[1089] || l[1095];
	assign g6[54] = l[1121] || l[1124] || l[1125];
	assign g6[55] = l[1129];
	assign g6[56] = l[1141];
	assign g6[57] = l[1157];
	assign g6[58] = l[1163];
	assign g6[59] = l[1189];
	assign g6[60] = l[1192] || l[1195] || l[1206];
	assign g6[61] = l[1217];
	assign g6[62] = l[1235];
	assign g6[63] = l[1248];
	assign g6[64] = l[1264] || l[1275];
	assign g6[65] = l[1304] || l[1306];
	assign g6[66] = l[1321];
	assign g6[67] = l[1324] || l[1331];
	
    always_ff @(posedge clk) begin
        g6_reg <= g6;
    end
    
	logic [2:0] v6c6l0_out [0:16];
	logic [2:0] v6c6l0 [0:16];
	assign v6c6l0_out[0] = g6_reg[0] + g6_reg[1] + g6_reg[2] + g6_reg[3];
	assign v6c6l0_out[1] = g6_reg[4] + g6_reg[5] + g6_reg[6] + g6_reg[7];
	assign v6c6l0_out[2] = g6_reg[8] + g6_reg[9] + g6_reg[10] + g6_reg[11];
	assign v6c6l0_out[3] = g6_reg[12] + g6_reg[13] + g6_reg[14] + g6_reg[15];
	assign v6c6l0_out[4] = g6_reg[16] + g6_reg[17] + g6_reg[18] + g6_reg[19];
	assign v6c6l0_out[5] = g6_reg[20] + g6_reg[21] + g6_reg[22] + g6_reg[23];
	assign v6c6l0_out[6] = g6_reg[24] + g6_reg[25] + g6_reg[26] + g6_reg[27];
	assign v6c6l0_out[7] = g6_reg[28] + g6_reg[29] + g6_reg[30] + g6_reg[31];
	assign v6c6l0_out[8] = g6_reg[32] + g6_reg[33] + g6_reg[34] + g6_reg[35];
	assign v6c6l0_out[9] = g6_reg[36] + g6_reg[37] + g6_reg[38] + g6_reg[39];
	assign v6c6l0_out[10] = g6_reg[40] + g6_reg[41] + g6_reg[42] + g6_reg[43];
	assign v6c6l0_out[11] = g6_reg[44] + g6_reg[45] + g6_reg[46] + g6_reg[47];
	assign v6c6l0_out[12] = g6_reg[48] + g6_reg[49] + g6_reg[50] + g6_reg[51];
	assign v6c6l0_out[13] = g6_reg[52] + g6_reg[53] + g6_reg[54] + g6_reg[55];
	assign v6c6l0_out[14] = g6_reg[56] + g6_reg[57] + g6_reg[58] + g6_reg[59];
	assign v6c6l0_out[15] = g6_reg[60] + g6_reg[61] + g6_reg[62] + g6_reg[63];
	assign v6c6l0_out[16] = g6_reg[64] + g6_reg[65] + g6_reg[66] + g6_reg[67];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 17; i = i + 1)
            v6c6l0[i] <= v6c6l0_out[i];
    end

	reg [3:0] v6c6l1 [0:8];
	logic [3:0] v6c6l1_out [0:8];
	assign v6c6l1_out[0] = v6c6l0[0] + v6c6l0[1];
	assign v6c6l1_out[1] = v6c6l0[2] + v6c6l0[3];
	assign v6c6l1_out[2] = v6c6l0[4] + v6c6l0[5];
	assign v6c6l1_out[3] = v6c6l0[6] + v6c6l0[7];
	assign v6c6l1_out[4] = v6c6l0[8] + v6c6l0[9];
	assign v6c6l1_out[5] = v6c6l0[10] + v6c6l0[11];
	assign v6c6l1_out[6] = v6c6l0[12] + v6c6l0[13];
	assign v6c6l1_out[7] = v6c6l0[14] + v6c6l0[15];
	assign v6c6l1_out[8] = v6c6l0[16];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 9; i = i + 1)
            v6c6l1[i] <= v6c6l1_out[i];
    end

	reg [4:0] v6c6l2 [0:4];
	logic [4:0] v6c6l2_out [0:4];
	assign v6c6l2_out[0] = v6c6l1[0] + v6c6l1[1];
	assign v6c6l2_out[1] = v6c6l1[2] + v6c6l1[3];
	assign v6c6l2_out[2] = v6c6l1[4] + v6c6l1[5];
	assign v6c6l2_out[3] = v6c6l1[6] + v6c6l1[7];
	assign v6c6l2_out[4] = v6c6l1[8];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 5; i = i + 1)
            v6c6l2[i] <= v6c6l2_out[i];
    end

	reg [5:0] v6c6l3 [0:2];
	logic [5:0] v6c6l3_out [0:2];
	assign v6c6l3_out[0] = v6c6l2[0] + v6c6l2[1];
	assign v6c6l3_out[1] = v6c6l2[2] + v6c6l2[3];
	assign v6c6l3_out[2] = v6c6l2[4];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 3; i = i + 1)
            v6c6l3[i] <= v6c6l3_out[i];
    end

	reg [6:0] v6c6l4 [0:1];
	logic [6:0] v6c6l4_out [0:1];
	assign v6c6l4_out[0] = v6c6l3[0] + v6c6l3[1];
	assign v6c6l4_out[1] = v6c6l3[2];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 2; i = i + 1)
            v6c6l4[i] <= v6c6l4_out[i];
    end

	reg [7:0] v6c6l5 [0:0];
	logic [7:0] v6c6l5_out [0:0];
	assign v6c6l5_out[0] = v6c6l4[0] + v6c6l4[1];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 1; i = i + 1)
            v6c6l5[i] <= v6c6l5_out[i];
    end

	assign val[6] = v6c6l5[0];
	
	// 0.0625
	logic [0:75] g7;
	reg [0:75] g7_reg;
	assign g7[0] = l[20] || l[25];
	assign g7[1] = l[43];
	assign g7[2] = l[55];
	assign g7[3] = l[110];
	assign g7[4] = l[144];
	assign g7[5] = l[166];
	assign g7[6] = l[177];
	assign g7[7] = l[189];
	assign g7[8] = l[216];
	assign g7[9] = l[282];
	assign g7[10] = l[300];
	assign g7[11] = l[310] || l[316];
	assign g7[12] = l[322];
	assign g7[13] = l[335];
	assign g7[14] = l[349] || l[359];
	assign g7[15] = l[368] || l[372];
	assign g7[16] = l[376];
	assign g7[17] = l[394];
	assign g7[18] = l[398] || l[409];
	assign g7[19] = l[422];
	assign g7[20] = l[438];
	assign g7[21] = l[446] || l[455] || l[457];
	assign g7[22] = l[467] || l[475];
	assign g7[23] = l[478] || l[483];
	assign g7[24] = l[486] || l[491];
	assign g7[25] = l[498] || l[504];
	assign g7[26] = l[508] || l[511];
	assign g7[27] = l[523] || l[528];
	assign g7[28] = l[534];
	assign g7[29] = l[545];
	assign g7[30] = l[558];
	assign g7[31] = l[608];
	assign g7[32] = l[617] || l[619];
	assign g7[33] = l[638] || l[643];
	assign g7[34] = l[644] || l[653];
	assign g7[35] = l[681] || l[695];
	assign g7[36] = l[716];
	assign g7[37] = l[720] || l[730] || l[734];
	assign g7[38] = l[738] || l[739] || l[741];
	assign g7[39] = l[756] || l[763] || l[766];
	assign g7[40] = l[775];
	assign g7[41] = l[798] || l[800];
	assign g7[42] = l[817] || l[819] || l[823];
	assign g7[43] = l[839];
	assign g7[44] = l[842];
	assign g7[45] = l[859] || l[863] || l[868];
	assign g7[46] = l[881];
	assign g7[47] = l[891];
	assign g7[48] = l[900] || l[906] || l[907];
	assign g7[49] = l[916] || l[919];
	assign g7[50] = l[934] || l[936];
	assign g7[51] = l[946] || l[953];
	assign g7[52] = l[956] || l[962];
	assign g7[53] = l[978] || l[985] || l[987] || l[988] || l[990];
	assign g7[54] = l[1000] || l[1006];
	assign g7[55] = l[1013];
	assign g7[56] = l[1037] || l[1042] || l[1050];
	assign g7[57] = l[1058];
	assign g7[58] = l[1067] || l[1075];
	assign g7[59] = l[1091];
	assign g7[60] = l[1100] || l[1103] || l[1112];
	assign g7[61] = l[1117];
	assign g7[62] = l[1130] || l[1135];
	assign g7[63] = l[1144];
	assign g7[64] = l[1153];
	assign g7[65] = l[1173];
	assign g7[66] = l[1182];
	assign g7[67] = l[1215];
	assign g7[68] = l[1224] || l[1227] || l[1228];
	assign g7[69] = l[1238] || l[1241] || l[1242];
	assign g7[70] = l[1257];
	assign g7[71] = l[1267] || l[1270];
	assign g7[72] = l[1288];
	assign g7[73] = l[1295];
	assign g7[74] = l[1307] || l[1310];
	assign g7[75] = l[1325] || l[1330];
	
    always_ff @(posedge clk) begin
        g7_reg <= g7;
    end
    
	logic [2:0] v7c6l0_out [0:18];
	logic [2:0] v7c6l0 [0:18];
	assign v7c6l0_out[0] = g7_reg[0] + g7_reg[1] + g7_reg[2] + g7_reg[3];
	assign v7c6l0_out[1] = g7_reg[4] + g7_reg[5] + g7_reg[6] + g7_reg[7];
	assign v7c6l0_out[2] = g7_reg[8] + g7_reg[9] + g7_reg[10] + g7_reg[11];
	assign v7c6l0_out[3] = g7_reg[12] + g7_reg[13] + g7_reg[14] + g7_reg[15];
	assign v7c6l0_out[4] = g7_reg[16] + g7_reg[17] + g7_reg[18] + g7_reg[19];
	assign v7c6l0_out[5] = g7_reg[20] + g7_reg[21] + g7_reg[22] + g7_reg[23];
	assign v7c6l0_out[6] = g7_reg[24] + g7_reg[25] + g7_reg[26] + g7_reg[27];
	assign v7c6l0_out[7] = g7_reg[28] + g7_reg[29] + g7_reg[30] + g7_reg[31];
	assign v7c6l0_out[8] = g7_reg[32] + g7_reg[33] + g7_reg[34] + g7_reg[35];
	assign v7c6l0_out[9] = g7_reg[36] + g7_reg[37] + g7_reg[38] + g7_reg[39];
	assign v7c6l0_out[10] = g7_reg[40] + g7_reg[41] + g7_reg[42] + g7_reg[43];
	assign v7c6l0_out[11] = g7_reg[44] + g7_reg[45] + g7_reg[46] + g7_reg[47];
	assign v7c6l0_out[12] = g7_reg[48] + g7_reg[49] + g7_reg[50] + g7_reg[51];
	assign v7c6l0_out[13] = g7_reg[52] + g7_reg[53] + g7_reg[54] + g7_reg[55];
	assign v7c6l0_out[14] = g7_reg[56] + g7_reg[57] + g7_reg[58] + g7_reg[59];
	assign v7c6l0_out[15] = g7_reg[60] + g7_reg[61] + g7_reg[62] + g7_reg[63];
	assign v7c6l0_out[16] = g7_reg[64] + g7_reg[65] + g7_reg[66] + g7_reg[67];
	assign v7c6l0_out[17] = g7_reg[68] + g7_reg[69] + g7_reg[70] + g7_reg[71];
	assign v7c6l0_out[18] = g7_reg[72] + g7_reg[73] + g7_reg[74] + g7_reg[75];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 19; i = i + 1)
            v7c6l0[i] <= v7c6l0_out[i];
    end

	reg [3:0] v7c6l1 [0:9];
	logic [3:0] v7c6l1_out [0:9];
	assign v7c6l1_out[0] = v7c6l0[0] + v7c6l0[1];
	assign v7c6l1_out[1] = v7c6l0[2] + v7c6l0[3];
	assign v7c6l1_out[2] = v7c6l0[4] + v7c6l0[5];
	assign v7c6l1_out[3] = v7c6l0[6] + v7c6l0[7];
	assign v7c6l1_out[4] = v7c6l0[8] + v7c6l0[9];
	assign v7c6l1_out[5] = v7c6l0[10] + v7c6l0[11];
	assign v7c6l1_out[6] = v7c6l0[12] + v7c6l0[13];
	assign v7c6l1_out[7] = v7c6l0[14] + v7c6l0[15];
	assign v7c6l1_out[8] = v7c6l0[16] + v7c6l0[17];
	assign v7c6l1_out[9] = v7c6l0[18];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 10; i = i + 1)
            v7c6l1[i] <= v7c6l1_out[i];
    end

	reg [4:0] v7c6l2 [0:4];
	logic [4:0] v7c6l2_out [0:4];
	assign v7c6l2_out[0] = v7c6l1[0] + v7c6l1[1];
	assign v7c6l2_out[1] = v7c6l1[2] + v7c6l1[3];
	assign v7c6l2_out[2] = v7c6l1[4] + v7c6l1[5];
	assign v7c6l2_out[3] = v7c6l1[6] + v7c6l1[7];
	assign v7c6l2_out[4] = v7c6l1[8] + v7c6l1[9];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 5; i = i + 1)
            v7c6l2[i] <= v7c6l2_out[i];
    end

	reg [5:0] v7c6l3 [0:2];
	logic [5:0] v7c6l3_out [0:2];
	assign v7c6l3_out[0] = v7c6l2[0] + v7c6l2[1];
	assign v7c6l3_out[1] = v7c6l2[2] + v7c6l2[3];
	assign v7c6l3_out[2] = v7c6l2[4];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 3; i = i + 1)
            v7c6l3[i] <= v7c6l3_out[i];
    end

	reg [6:0] v7c6l4 [0:1];
	logic [6:0] v7c6l4_out [0:1];
	assign v7c6l4_out[0] = v7c6l3[0] + v7c6l3[1];
	assign v7c6l4_out[1] = v7c6l3[2];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 2; i = i + 1)
            v7c6l4[i] <= v7c6l4_out[i];
    end

	reg [7:0] v7c6l5 [0:0];
	logic [7:0] v7c6l5_out [0:0];
	assign v7c6l5_out[0] = v7c6l4[0] + v7c6l4[1];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 1; i = i + 1)
            v7c6l5[i] <= v7c6l5_out[i];
    end

	assign val[7] = v7c6l5[0];
	
	// 0.125
	logic [0:85] g8;
	reg [0:85] g8_reg;
	assign g8[0] = l[5] || l[7];
	assign g8[1] = l[37] || l[45];
	assign g8[2] = l[66];
	assign g8[3] = l[81] || l[84] || l[88];
	assign g8[4] = l[101] || l[103];
	assign g8[5] = l[129] || l[138];
	assign g8[6] = l[141];
	assign g8[7] = l[159];
	assign g8[8] = l[178] || l[180] || l[185];
	assign g8[9] = l[190];
	assign g8[10] = l[208] || l[209] || l[214];
	assign g8[11] = l[219] || l[228] || l[232];
	assign g8[12] = l[240] || l[245] || l[248];
	assign g8[13] = l[253] || l[256];
	assign g8[14] = l[261];
	assign g8[15] = l[279] || l[285];
	assign g8[16] = l[290] || l[295];
	assign g8[17] = l[306] || l[313] || l[317];
	assign g8[18] = l[319] || l[332];
	assign g8[19] = l[344];
	assign g8[20] = l[361] || l[375];
	assign g8[21] = l[382];
	assign g8[22] = l[389] || l[391];
	assign g8[23] = l[399] || l[412];
	assign g8[24] = l[427] || l[428] || l[434];
	assign g8[25] = l[447] || l[449] || l[460];
	assign g8[26] = l[463] || l[473];
	assign g8[27] = l[480];
	assign g8[28] = l[489];
	assign g8[29] = l[507];
	assign g8[30] = l[513];
	assign g8[31] = l[526];
	assign g8[32] = l[537];
	assign g8[33] = l[553] || l[556];
	assign g8[34] = l[566] || l[570];
	assign g8[35] = l[579] || l[585];
	assign g8[36] = l[594] || l[598];
	assign g8[37] = l[601] || l[609];
	assign g8[38] = l[625];
	assign g8[39] = l[636];
	assign g8[40] = l[650];
	assign g8[41] = l[662] || l[665] || l[667] || l[670];
	assign g8[42] = l[676];
	assign g8[43] = l[684] || l[687] || l[690] || l[692] || l[696];
	assign g8[44] = l[700] || l[702] || l[709];
	assign g8[45] = l[728];
	assign g8[46] = l[747] || l[749];
	assign g8[47] = l[759] || l[764];
	assign g8[48] = l[779];
	assign g8[49] = l[785] || l[787] || l[790] || l[792];
	assign g8[50] = l[801] || l[803];
	assign g8[51] = l[814] || l[825];
	assign g8[52] = l[831] || l[840];
	assign g8[53] = l[853];
	assign g8[54] = l[866];
	assign g8[55] = l[872] || l[879];
	assign g8[56] = l[886] || l[892];
	assign g8[57] = l[902];
	assign g8[58] = l[909] || l[921];
	assign g8[59] = l[927] || l[933];
	assign g8[60] = l[955];
	assign g8[61] = l[966] || l[971];
	assign g8[62] = l[992];
	assign g8[63] = l[996];
	assign g8[64] = l[1031];
	assign g8[65] = l[1039] || l[1045] || l[1048];
	assign g8[66] = l[1059];
	assign g8[67] = l[1069];
	assign g8[68] = l[1078] || l[1083] || l[1088];
	assign g8[69] = l[1106];
	assign g8[70] = l[1115];
	assign g8[71] = l[1132];
	assign g8[72] = l[1138] || l[1146];
	assign g8[73] = l[1149] || l[1160];
	assign g8[74] = l[1166] || l[1169];
	assign g8[75] = l[1178] || l[1180] || l[1185];
	assign g8[76] = l[1196] || l[1201] || l[1203];
	assign g8[77] = l[1210] || l[1213];
	assign g8[78] = l[1222] || l[1233];
	assign g8[79] = l[1244] || l[1251];
	assign g8[80] = l[1256] || l[1262];
	assign g8[81] = l[1276];
	assign g8[82] = l[1282] || l[1283];
	assign g8[83] = l[1293] || l[1300] || l[1303];
	assign g8[84] = l[1315] || l[1319];
	assign g8[85] = l[1336];
	
    always_ff @(posedge clk) begin
        g8_reg <= g8;
    end
    
	logic [2:0] v8c6l0_out [0:21];
	logic [2:0] v8c6l0 [0:21];
	assign v8c6l0_out[0] = g8_reg[0] + g8_reg[1] + g8_reg[2] + g8_reg[3];
	assign v8c6l0_out[1] = g8_reg[4] + g8_reg[5] + g8_reg[6] + g8_reg[7];
	assign v8c6l0_out[2] = g8_reg[8] + g8_reg[9] + g8_reg[10] + g8_reg[11];
	assign v8c6l0_out[3] = g8_reg[12] + g8_reg[13] + g8_reg[14] + g8_reg[15];
	assign v8c6l0_out[4] = g8_reg[16] + g8_reg[17] + g8_reg[18] + g8_reg[19];
	assign v8c6l0_out[5] = g8_reg[20] + g8_reg[21] + g8_reg[22] + g8_reg[23];
	assign v8c6l0_out[6] = g8_reg[24] + g8_reg[25] + g8_reg[26] + g8_reg[27];
	assign v8c6l0_out[7] = g8_reg[28] + g8_reg[29] + g8_reg[30] + g8_reg[31];
	assign v8c6l0_out[8] = g8_reg[32] + g8_reg[33] + g8_reg[34] + g8_reg[35];
	assign v8c6l0_out[9] = g8_reg[36] + g8_reg[37] + g8_reg[38] + g8_reg[39];
	assign v8c6l0_out[10] = g8_reg[40] + g8_reg[41] + g8_reg[42] + g8_reg[43];
	assign v8c6l0_out[11] = g8_reg[44] + g8_reg[45] + g8_reg[46] + g8_reg[47];
	assign v8c6l0_out[12] = g8_reg[48] + g8_reg[49] + g8_reg[50] + g8_reg[51];
	assign v8c6l0_out[13] = g8_reg[52] + g8_reg[53] + g8_reg[54] + g8_reg[55];
	assign v8c6l0_out[14] = g8_reg[56] + g8_reg[57] + g8_reg[58] + g8_reg[59];
	assign v8c6l0_out[15] = g8_reg[60] + g8_reg[61] + g8_reg[62] + g8_reg[63];
	assign v8c6l0_out[16] = g8_reg[64] + g8_reg[65] + g8_reg[66] + g8_reg[67];
	assign v8c6l0_out[17] = g8_reg[68] + g8_reg[69] + g8_reg[70] + g8_reg[71];
	assign v8c6l0_out[18] = g8_reg[72] + g8_reg[73] + g8_reg[74] + g8_reg[75];
	assign v8c6l0_out[19] = g8_reg[76] + g8_reg[77] + g8_reg[78] + g8_reg[79];
	assign v8c6l0_out[20] = g8_reg[80] + g8_reg[81] + g8_reg[82] + g8_reg[83];
	assign v8c6l0_out[21] = g8_reg[84] + g8_reg[85];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 22; i = i + 1)
            v8c6l0[i] <= v8c6l0_out[i];
    end

	reg [3:0] v8c6l1 [0:10];
	logic [3:0] v8c6l1_out [0:10];
	assign v8c6l1_out[0] = v8c6l0[0] + v8c6l0[1];
	assign v8c6l1_out[1] = v8c6l0[2] + v8c6l0[3];
	assign v8c6l1_out[2] = v8c6l0[4] + v8c6l0[5];
	assign v8c6l1_out[3] = v8c6l0[6] + v8c6l0[7];
	assign v8c6l1_out[4] = v8c6l0[8] + v8c6l0[9];
	assign v8c6l1_out[5] = v8c6l0[10] + v8c6l0[11];
	assign v8c6l1_out[6] = v8c6l0[12] + v8c6l0[13];
	assign v8c6l1_out[7] = v8c6l0[14] + v8c6l0[15];
	assign v8c6l1_out[8] = v8c6l0[16] + v8c6l0[17];
	assign v8c6l1_out[9] = v8c6l0[18] + v8c6l0[19];
	assign v8c6l1_out[10] = v8c6l0[20] + v8c6l0[21];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 11; i = i + 1)
            v8c6l1[i] <= v8c6l1_out[i];
    end

	reg [4:0] v8c6l2 [0:5];
	logic [4:0] v8c6l2_out [0:5];
	assign v8c6l2_out[0] = v8c6l1[0] + v8c6l1[1];
	assign v8c6l2_out[1] = v8c6l1[2] + v8c6l1[3];
	assign v8c6l2_out[2] = v8c6l1[4] + v8c6l1[5];
	assign v8c6l2_out[3] = v8c6l1[6] + v8c6l1[7];
	assign v8c6l2_out[4] = v8c6l1[8] + v8c6l1[9];
	assign v8c6l2_out[5] = v8c6l1[10];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 6; i = i + 1)
            v8c6l2[i] <= v8c6l2_out[i];
    end

	reg [5:0] v8c6l3 [0:2];
	logic [5:0] v8c6l3_out [0:2];
	assign v8c6l3_out[0] = v8c6l2[0] + v8c6l2[1];
	assign v8c6l3_out[1] = v8c6l2[2] + v8c6l2[3];
	assign v8c6l3_out[2] = v8c6l2[4] + v8c6l2[5];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 3; i = i + 1)
            v8c6l3[i] <= v8c6l3_out[i];
    end

	reg [6:0] v8c6l4 [0:1];
	logic [6:0] v8c6l4_out [0:1];
	assign v8c6l4_out[0] = v8c6l3[0] + v8c6l3[1];
	assign v8c6l4_out[1] = v8c6l3[2];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 2; i = i + 1)
            v8c6l4[i] <= v8c6l4_out[i];
    end

	reg [7:0] v8c6l5 [0:0];
	logic [7:0] v8c6l5_out [0:0];
	assign v8c6l5_out[0] = v8c6l4[0] + v8c6l4[1];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 1; i = i + 1)
            v8c6l5[i] <= v8c6l5_out[i];
    end

	assign val[8] = v8c6l5[0];
	
	// 0.25
	logic [0:53] g9;
	reg [0:53] g9_reg;
	assign g9[0] = l[21] || l[23] || l[27] || l[29];
	assign g9[1] = l[35] || l[39] || l[40];
	assign g9[2] = l[49] || l[52] || l[54] || l[57];
	assign g9[3] = l[67] || l[71] || l[74] || l[76];
	assign g9[4] = l[85] || l[89];
	assign g9[5] = l[96] || l[98];
	assign g9[6] = l[113];
	assign g9[7] = l[127] || l[132] || l[134] || l[135] || l[139];
	assign g9[8] = l[150] || l[151];
	assign g9[9] = l[170];
	assign g9[10] = l[173] || l[175] || l[183] || l[186];
	assign g9[11] = l[194] || l[198];
	assign g9[12] = l[205] || l[217];
	assign g9[13] = l[226];
	assign g9[14] = l[242];
	assign g9[15] = l[252];
	assign g9[16] = l[272] || l[274] || l[278];
	assign g9[17] = l[292] || l[301];
	assign g9[18] = l[307];
	assign g9[19] = l[326] || l[333];
	assign g9[20] = l[342];
	assign g9[21] = l[351] || l[355] || l[356];
	assign g9[22] = l[365] || l[367];
	assign g9[23] = l[381] || l[385];
	assign g9[24] = l[404] || l[408];
	assign g9[25] = l[416];
	assign g9[26] = l[454] || l[458];
	assign g9[27] = l[471];
	assign g9[28] = l[499] || l[503];
	assign g9[29] = l[520];
	assign g9[30] = l[531];
	assign g9[31] = l[548];
	assign g9[32] = l[563];
	assign g9[33] = l[589];
	assign g9[34] = l[615];
	assign g9[35] = l[640];
	assign g9[36] = l[652] || l[655];
	assign g9[37] = l[660];
	assign g9[38] = l[719];
	assign g9[39] = l[726];
	assign g9[40] = l[773];
	assign g9[41] = l[786];
	assign g9[42] = l[896];
	assign g9[43] = l[943];
	assign g9[44] = l[975];
	assign g9[45] = l[1012];
	assign g9[46] = l[1019];
	assign g9[47] = l[1034];
	assign g9[48] = l[1085];
	assign g9[49] = l[1101] || l[1108];
	assign g9[50] = l[1127];
	assign g9[51] = l[1171];
	assign g9[52] = l[1198];
	assign g9[53] = l[1259];
	
    always_ff @(posedge clk) begin
        g9_reg <= g9;
    end
    
	logic [2:0] v9c6l0_out [0:13];
	logic [2:0] v9c6l0 [0:13];
	assign v9c6l0_out[0] = g9_reg[0] + g9_reg[1] + g9_reg[2] + g9_reg[3];
	assign v9c6l0_out[1] = g9_reg[4] + g9_reg[5] + g9_reg[6] + g9_reg[7];
	assign v9c6l0_out[2] = g9_reg[8] + g9_reg[9] + g9_reg[10] + g9_reg[11];
	assign v9c6l0_out[3] = g9_reg[12] + g9_reg[13] + g9_reg[14] + g9_reg[15];
	assign v9c6l0_out[4] = g9_reg[16] + g9_reg[17] + g9_reg[18] + g9_reg[19];
	assign v9c6l0_out[5] = g9_reg[20] + g9_reg[21] + g9_reg[22] + g9_reg[23];
	assign v9c6l0_out[6] = g9_reg[24] + g9_reg[25] + g9_reg[26] + g9_reg[27];
	assign v9c6l0_out[7] = g9_reg[28] + g9_reg[29] + g9_reg[30] + g9_reg[31];
	assign v9c6l0_out[8] = g9_reg[32] + g9_reg[33] + g9_reg[34] + g9_reg[35];
	assign v9c6l0_out[9] = g9_reg[36] + g9_reg[37] + g9_reg[38] + g9_reg[39];
	assign v9c6l0_out[10] = g9_reg[40] + g9_reg[41] + g9_reg[42] + g9_reg[43];
	assign v9c6l0_out[11] = g9_reg[44] + g9_reg[45] + g9_reg[46] + g9_reg[47];
	assign v9c6l0_out[12] = g9_reg[48] + g9_reg[49] + g9_reg[50] + g9_reg[51];
	assign v9c6l0_out[13] = g9_reg[52] + g9_reg[53];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 14; i = i + 1)
            v9c6l0[i] <= v9c6l0_out[i];
    end

	reg [3:0] v9c6l1 [0:6];
	logic [3:0] v9c6l1_out [0:6];
	assign v9c6l1_out[0] = v9c6l0[0] + v9c6l0[1];
	assign v9c6l1_out[1] = v9c6l0[2] + v9c6l0[3];
	assign v9c6l1_out[2] = v9c6l0[4] + v9c6l0[5];
	assign v9c6l1_out[3] = v9c6l0[6] + v9c6l0[7];
	assign v9c6l1_out[4] = v9c6l0[8] + v9c6l0[9];
	assign v9c6l1_out[5] = v9c6l0[10] + v9c6l0[11];
	assign v9c6l1_out[6] = v9c6l0[12] + v9c6l0[13];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 7; i = i + 1)
            v9c6l1[i] <= v9c6l1_out[i];
    end

	reg [4:0] v9c6l2 [0:3];
	logic [4:0] v9c6l2_out [0:3];
	assign v9c6l2_out[0] = v9c6l1[0] + v9c6l1[1];
	assign v9c6l2_out[1] = v9c6l1[2] + v9c6l1[3];
	assign v9c6l2_out[2] = v9c6l1[4] + v9c6l1[5];
	assign v9c6l2_out[3] = v9c6l1[6];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 4; i = i + 1)
            v9c6l2[i] <= v9c6l2_out[i];
    end

	reg [5:0] v9c6l3 [0:1];
	logic [5:0] v9c6l3_out [0:1];
	assign v9c6l3_out[0] = v9c6l2[0] + v9c6l2[1];
	assign v9c6l3_out[1] = v9c6l2[2] + v9c6l2[3];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 2; i = i + 1)
            v9c6l3[i] <= v9c6l3_out[i];
    end

	reg [6:0] v9c6l4 [0:0];
	logic [6:0] v9c6l4_out [0:0];
	assign v9c6l4_out[0] = v9c6l3[0] + v9c6l3[1];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 1; i = i + 1)
            v9c6l4[i] <= v9c6l4_out[i];
    end

	reg [7:0] v9c6l5 [0:0];
	logic [7:0] v9c6l5_out [0:0];
	assign v9c6l5_out[0] = v9c6l4[0];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 1; i = i + 1)
            v9c6l5[i] <= v9c6l5_out[i];
    end

	assign val[9] = v9c6l5[0];
	
	// 0.5
	logic [0:15] g10;
	reg [0:15] g10_reg;
	assign g10[0] = l[11] || l[15];
	assign g10[1] = l[17] || l[18] || l[24];
	assign g10[2] = l[33] || l[46];
	assign g10[3] = l[50] || l[61];
	assign g10[4] = l[70] || l[77];
	assign g10[5] = l[92];
	assign g10[6] = l[104] || l[106] || l[107];
	assign g10[7] = l[112] || l[122];
	assign g10[8] = l[153];
	assign g10[9] = l[168];
	assign g10[10] = l[201];
	assign g10[11] = l[231];
	assign g10[12] = l[236];
	assign g10[13] = l[330];
	assign g10[14] = l[439];
	assign g10[15] = l[554];
	
    always_ff @(posedge clk) begin
        g10_reg <= g10;
    end
    
	logic [2:0] v10c6l0_out [0:3];
	logic [2:0] v10c6l0 [0:3];
	assign v10c6l0_out[0] = g10_reg[0] + g10_reg[1] + g10_reg[2] + g10_reg[3];
	assign v10c6l0_out[1] = g10_reg[4] + g10_reg[5] + g10_reg[6] + g10_reg[7];
	assign v10c6l0_out[2] = g10_reg[8] + g10_reg[9] + g10_reg[10] + g10_reg[11];
	assign v10c6l0_out[3] = g10_reg[12] + g10_reg[13] + g10_reg[14] + g10_reg[15];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 4; i = i + 1)
            v10c6l0[i] <= v10c6l0_out[i];
    end

	reg [3:0] v10c6l1 [0:1];
	logic [3:0] v10c6l1_out [0:1];
	assign v10c6l1_out[0] = v10c6l0[0] + v10c6l0[1];
	assign v10c6l1_out[1] = v10c6l0[2] + v10c6l0[3];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 2; i = i + 1)
            v10c6l1[i] <= v10c6l1_out[i];
    end

	reg [4:0] v10c6l2 [0:0];
	logic [4:0] v10c6l2_out [0:0];
	assign v10c6l2_out[0] = v10c6l1[0] + v10c6l1[1];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 1; i = i + 1)
            v10c6l2[i] <= v10c6l2_out[i];
    end

	reg [5:0] v10c6l3 [0:0];
	logic [5:0] v10c6l3_out [0:0];
	assign v10c6l3_out[0] = v10c6l2[0];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 1; i = i + 1)
            v10c6l3[i] <= v10c6l3_out[i];
    end

	reg [6:0] v10c6l4 [0:0];
	logic [6:0] v10c6l4_out [0:0];
	assign v10c6l4_out[0] = v10c6l3[0];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 1; i = i + 1)
            v10c6l4[i] <= v10c6l4_out[i];
    end

	reg [7:0] v10c6l5 [0:0];
	logic [7:0] v10c6l5_out [0:0];
	assign v10c6l5_out[0] = v10c6l4[0];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 1; i = i + 1)
            v10c6l5[i] <= v10c6l5_out[i];
    end

	assign val[10] = v10c6l5[0];
	
	// 1.0
	logic [0:4] g11;
	reg [0:4] g11_reg;
	assign g11[0] = l[1];
	assign g11[1] = l[30];
	assign g11[2] = l[38];
	assign g11[3] = l[90] || l[91];
	assign g11[4] = l[119];
	
    always_ff @(posedge clk) begin
        g11_reg <= g11;
    end
    
	logic [2:0] v11c6l0_out [0:1];
	logic [2:0] v11c6l0 [0:1];
	assign v11c6l0_out[0] = g11_reg[0] + g11_reg[1] + g11_reg[2] + g11_reg[3];
	assign v11c6l0_out[1] = g11_reg[4];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 2; i = i + 1)
            v11c6l0[i] <= v11c6l0_out[i];
    end

	reg [3:0] v11c6l1 [0:0];
	logic [3:0] v11c6l1_out [0:0];
	assign v11c6l1_out[0] = v11c6l0[0] + v11c6l0[1];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 1; i = i + 1)
            v11c6l1[i] <= v11c6l1_out[i];
    end

	reg [4:0] v11c6l2 [0:0];
	logic [4:0] v11c6l2_out [0:0];
	assign v11c6l2_out[0] = v11c6l1[0];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 1; i = i + 1)
            v11c6l2[i] <= v11c6l2_out[i];
    end

	reg [5:0] v11c6l3 [0:0];
	logic [5:0] v11c6l3_out [0:0];
	assign v11c6l3_out[0] = v11c6l2[0];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 1; i = i + 1)
            v11c6l3[i] <= v11c6l3_out[i];
    end

	reg [6:0] v11c6l4 [0:0];
	logic [6:0] v11c6l4_out [0:0];
	assign v11c6l4_out[0] = v11c6l3[0];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 1; i = i + 1)
            v11c6l4[i] <= v11c6l4_out[i];
    end

	reg [7:0] v11c6l5 [0:0];
	logic [7:0] v11c6l5_out [0:0];
	assign v11c6l5_out[0] = v11c6l4[0];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 1; i = i + 1)
            v11c6l5[i] <= v11c6l5_out[i];
    end

	assign val[11] = v11c6l5[0];
	
	// 2.0
	logic [0:0] g12;
	reg [0:0] g12_reg;
	assign g12[0] = l[2] || l[4] || l[8];
	
    always_ff @(posedge clk) begin
        g12_reg <= g12;
    end
    
	logic [2:0] v12c6l0_out [0:0];
	logic [2:0] v12c6l0 [0:0];
	assign v12c6l0_out[0] = g12_reg[0];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 1; i = i + 1)
            v12c6l0[i] <= v12c6l0_out[i];
    end

	reg [3:0] v12c6l1 [0:0];
	logic [3:0] v12c6l1_out [0:0];
	assign v12c6l1_out[0] = v12c6l0[0];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 1; i = i + 1)
            v12c6l1[i] <= v12c6l1_out[i];
    end

	reg [4:0] v12c6l2 [0:0];
	logic [4:0] v12c6l2_out [0:0];
	assign v12c6l2_out[0] = v12c6l1[0];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 1; i = i + 1)
            v12c6l2[i] <= v12c6l2_out[i];
    end

	reg [5:0] v12c6l3 [0:0];
	logic [5:0] v12c6l3_out [0:0];
	assign v12c6l3_out[0] = v12c6l2[0];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 1; i = i + 1)
            v12c6l3[i] <= v12c6l3_out[i];
    end

	reg [6:0] v12c6l4 [0:0];
	logic [6:0] v12c6l4_out [0:0];
	assign v12c6l4_out[0] = v12c6l3[0];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 1; i = i + 1)
            v12c6l4[i] <= v12c6l4_out[i];
    end

	reg [7:0] v12c6l5 [0:0];
	logic [7:0] v12c6l5_out [0:0];
	assign v12c6l5_out[0] = v12c6l4[0];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 1; i = i + 1)
            v12c6l5[i] <= v12c6l5_out[i];
    end

	assign val[12] = v12c6l5[0];
	
endmodule


module leaf_counter_7(input logic clk, input logic [0:1279] l, output logic [7:0] val [0:12]);
    integer i;
	// -0.25
	logic [0:80] g0;
	reg [0:80] g0_reg;
	assign g0[0] = l[12];
	assign g0[1] = l[21] || l[24] || l[30];
	assign g0[2] = l[37];
	assign g0[3] = l[50] || l[54] || l[56];
	assign g0[4] = l[69] || l[73];
	assign g0[5] = l[84] || l[87] || l[88] || l[92];
	assign g0[6] = l[94] || l[99] || l[101];
	assign g0[7] = l[111] || l[120];
	assign g0[8] = l[146];
	assign g0[9] = l[155] || l[156] || l[162];
	assign g0[10] = l[175] || l[178];
	assign g0[11] = l[185] || l[186];
	assign g0[12] = l[203] || l[207];
	assign g0[13] = l[218] || l[222];
	assign g0[14] = l[240];
	assign g0[15] = l[247];
	assign g0[16] = l[265];
	assign g0[17] = l[270] || l[275] || l[277] || l[282];
	assign g0[18] = l[288];
	assign g0[19] = l[300];
	assign g0[20] = l[315] || l[320];
	assign g0[21] = l[328];
	assign g0[22] = l[342] || l[344] || l[346];
	assign g0[23] = l[364];
	assign g0[24] = l[368] || l[378] || l[380];
	assign g0[25] = l[386] || l[388];
	assign g0[26] = l[399] || l[405];
	assign g0[27] = l[408] || l[410] || l[412];
	assign g0[28] = l[417] || l[420] || l[426];
	assign g0[29] = l[441] || l[445];
	assign g0[30] = l[453] || l[455] || l[458];
	assign g0[31] = l[475] || l[478];
	assign g0[32] = l[489] || l[492];
	assign g0[33] = l[501];
	assign g0[34] = l[505] || l[510];
	assign g0[35] = l[517] || l[520];
	assign g0[36] = l[531];
	assign g0[37] = l[540];
	assign g0[38] = l[551];
	assign g0[39] = l[558] || l[560] || l[561];
	assign g0[40] = l[573];
	assign g0[41] = l[583] || l[592];
	assign g0[42] = l[604];
	assign g0[43] = l[623] || l[628];
	assign g0[44] = l[638] || l[639];
	assign g0[45] = l[660] || l[666];
	assign g0[46] = l[676];
	assign g0[47] = l[689] || l[691] || l[697];
	assign g0[48] = l[719];
	assign g0[49] = l[726] || l[731];
	assign g0[50] = l[749];
	assign g0[51] = l[764];
	assign g0[52] = l[789] || l[793];
	assign g0[53] = l[799];
	assign g0[54] = l[820] || l[824];
	assign g0[55] = l[841];
	assign g0[56] = l[846] || l[853] || l[855];
	assign g0[57] = l[875];
	assign g0[58] = l[908];
	assign g0[59] = l[917] || l[925];
	assign g0[60] = l[936] || l[940];
	assign g0[61] = l[961] || l[965];
	assign g0[62] = l[980];
	assign g0[63] = l[983];
	assign g0[64] = l[998];
	assign g0[65] = l[1006] || l[1009] || l[1011];
	assign g0[66] = l[1015] || l[1022] || l[1024];
	assign g0[67] = l[1028];
	assign g0[68] = l[1064];
	assign g0[69] = l[1077];
	assign g0[70] = l[1094];
	assign g0[71] = l[1117];
	assign g0[72] = l[1127] || l[1133];
	assign g0[73] = l[1139];
	assign g0[74] = l[1161] || l[1166];
	assign g0[75] = l[1180];
	assign g0[76] = l[1206];
	assign g0[77] = l[1214] || l[1218] || l[1219];
	assign g0[78] = l[1224];
	assign g0[79] = l[1257];
	assign g0[80] = l[1278];
	
    always_ff @(posedge clk) begin
        g0_reg <= g0;
    end
    
	logic [2:0] v0c7l0_out [0:20];
	logic [2:0] v0c7l0 [0:20];
	assign v0c7l0_out[0] = g0_reg[0] + g0_reg[1] + g0_reg[2] + g0_reg[3];
	assign v0c7l0_out[1] = g0_reg[4] + g0_reg[5] + g0_reg[6] + g0_reg[7];
	assign v0c7l0_out[2] = g0_reg[8] + g0_reg[9] + g0_reg[10] + g0_reg[11];
	assign v0c7l0_out[3] = g0_reg[12] + g0_reg[13] + g0_reg[14] + g0_reg[15];
	assign v0c7l0_out[4] = g0_reg[16] + g0_reg[17] + g0_reg[18] + g0_reg[19];
	assign v0c7l0_out[5] = g0_reg[20] + g0_reg[21] + g0_reg[22] + g0_reg[23];
	assign v0c7l0_out[6] = g0_reg[24] + g0_reg[25] + g0_reg[26] + g0_reg[27];
	assign v0c7l0_out[7] = g0_reg[28] + g0_reg[29] + g0_reg[30] + g0_reg[31];
	assign v0c7l0_out[8] = g0_reg[32] + g0_reg[33] + g0_reg[34] + g0_reg[35];
	assign v0c7l0_out[9] = g0_reg[36] + g0_reg[37] + g0_reg[38] + g0_reg[39];
	assign v0c7l0_out[10] = g0_reg[40] + g0_reg[41] + g0_reg[42] + g0_reg[43];
	assign v0c7l0_out[11] = g0_reg[44] + g0_reg[45] + g0_reg[46] + g0_reg[47];
	assign v0c7l0_out[12] = g0_reg[48] + g0_reg[49] + g0_reg[50] + g0_reg[51];
	assign v0c7l0_out[13] = g0_reg[52] + g0_reg[53] + g0_reg[54] + g0_reg[55];
	assign v0c7l0_out[14] = g0_reg[56] + g0_reg[57] + g0_reg[58] + g0_reg[59];
	assign v0c7l0_out[15] = g0_reg[60] + g0_reg[61] + g0_reg[62] + g0_reg[63];
	assign v0c7l0_out[16] = g0_reg[64] + g0_reg[65] + g0_reg[66] + g0_reg[67];
	assign v0c7l0_out[17] = g0_reg[68] + g0_reg[69] + g0_reg[70] + g0_reg[71];
	assign v0c7l0_out[18] = g0_reg[72] + g0_reg[73] + g0_reg[74] + g0_reg[75];
	assign v0c7l0_out[19] = g0_reg[76] + g0_reg[77] + g0_reg[78] + g0_reg[79];
	assign v0c7l0_out[20] = g0_reg[80];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 21; i = i + 1)
            v0c7l0[i] <= v0c7l0_out[i];
    end

	reg [3:0] v0c7l1 [0:10];
	logic [3:0] v0c7l1_out [0:10];
	assign v0c7l1_out[0] = v0c7l0[0] + v0c7l0[1];
	assign v0c7l1_out[1] = v0c7l0[2] + v0c7l0[3];
	assign v0c7l1_out[2] = v0c7l0[4] + v0c7l0[5];
	assign v0c7l1_out[3] = v0c7l0[6] + v0c7l0[7];
	assign v0c7l1_out[4] = v0c7l0[8] + v0c7l0[9];
	assign v0c7l1_out[5] = v0c7l0[10] + v0c7l0[11];
	assign v0c7l1_out[6] = v0c7l0[12] + v0c7l0[13];
	assign v0c7l1_out[7] = v0c7l0[14] + v0c7l0[15];
	assign v0c7l1_out[8] = v0c7l0[16] + v0c7l0[17];
	assign v0c7l1_out[9] = v0c7l0[18] + v0c7l0[19];
	assign v0c7l1_out[10] = v0c7l0[20];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 11; i = i + 1)
            v0c7l1[i] <= v0c7l1_out[i];
    end

	reg [4:0] v0c7l2 [0:5];
	logic [4:0] v0c7l2_out [0:5];
	assign v0c7l2_out[0] = v0c7l1[0] + v0c7l1[1];
	assign v0c7l2_out[1] = v0c7l1[2] + v0c7l1[3];
	assign v0c7l2_out[2] = v0c7l1[4] + v0c7l1[5];
	assign v0c7l2_out[3] = v0c7l1[6] + v0c7l1[7];
	assign v0c7l2_out[4] = v0c7l1[8] + v0c7l1[9];
	assign v0c7l2_out[5] = v0c7l1[10];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 6; i = i + 1)
            v0c7l2[i] <= v0c7l2_out[i];
    end

	reg [5:0] v0c7l3 [0:2];
	logic [5:0] v0c7l3_out [0:2];
	assign v0c7l3_out[0] = v0c7l2[0] + v0c7l2[1];
	assign v0c7l3_out[1] = v0c7l2[2] + v0c7l2[3];
	assign v0c7l3_out[2] = v0c7l2[4] + v0c7l2[5];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 3; i = i + 1)
            v0c7l3[i] <= v0c7l3_out[i];
    end

	reg [6:0] v0c7l4 [0:1];
	logic [6:0] v0c7l4_out [0:1];
	assign v0c7l4_out[0] = v0c7l3[0] + v0c7l3[1];
	assign v0c7l4_out[1] = v0c7l3[2];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 2; i = i + 1)
            v0c7l4[i] <= v0c7l4_out[i];
    end

	reg [7:0] v0c7l5 [0:0];
	logic [7:0] v0c7l5_out [0:0];
	assign v0c7l5_out[0] = v0c7l4[0] + v0c7l4[1];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 1; i = i + 1)
            v0c7l5[i] <= v0c7l5_out[i];
    end

	assign val[0] = v0c7l5[0];
	
	// -0.125
	logic [0:95] g1;
	reg [0:95] g1_reg;
	assign g1[0] = l[0] || l[3] || l[10];
	assign g1[1] = l[17] || l[18] || l[20] || l[23] || l[25] || l[26] || l[28];
	assign g1[2] = l[33] || l[34] || l[36] || l[38] || l[40] || l[42] || l[44] || l[47];
	assign g1[3] = l[49] || l[55] || l[58] || l[60] || l[63];
	assign g1[4] = l[65] || l[67] || l[68] || l[71] || l[72] || l[74] || l[76];
	assign g1[5] = l[81] || l[85] || l[89] || l[90];
	assign g1[6] = l[95] || l[97] || l[102] || l[104];
	assign g1[7] = l[112] || l[115] || l[116] || l[117] || l[118] || l[121];
	assign g1[8] = l[124] || l[125] || l[129] || l[130] || l[133] || l[136];
	assign g1[9] = l[140] || l[142] || l[145] || l[147] || l[150];
	assign g1[10] = l[154] || l[158] || l[161];
	assign g1[11] = l[164] || l[166] || l[169] || l[171] || l[172] || l[174];
	assign g1[12] = l[183] || l[187] || l[188] || l[191] || l[192] || l[194];
	assign g1[13] = l[196] || l[198] || l[210];
	assign g1[14] = l[212] || l[214] || l[216] || l[219];
	assign g1[15] = l[229] || l[232];
	assign g1[16] = l[244] || l[249] || l[252] || l[254] || l[255];
	assign g1[17] = l[259] || l[264];
	assign g1[18] = l[268] || l[273] || l[276] || l[280];
	assign g1[19] = l[291];
	assign g1[20] = l[302] || l[303] || l[305] || l[307] || l[311];
	assign g1[21] = l[312] || l[319];
	assign g1[22] = l[331] || l[333] || l[336] || l[339];
	assign g1[23] = l[354] || l[357] || l[359] || l[361] || l[363];
	assign g1[24] = l[367] || l[372] || l[376] || l[379];
	assign g1[25] = l[384] || l[389] || l[391];
	assign g1[26] = l[395] || l[396] || l[403];
	assign g1[27] = l[419] || l[421] || l[424];
	assign g1[28] = l[431] || l[435] || l[437];
	assign g1[29] = l[443] || l[449];
	assign g1[30] = l[456] || l[459] || l[461];
	assign g1[31] = l[466] || l[469];
	assign g1[32] = l[481] || l[483] || l[484] || l[490] || l[494];
	assign g1[33] = l[498] || l[500];
	assign g1[34] = l[509];
	assign g1[35] = l[514] || l[516] || l[519];
	assign g1[36] = l[528] || l[529];
	assign g1[37] = l[533] || l[535] || l[538];
	assign g1[38] = l[544] || l[546] || l[549];
	assign g1[39] = l[566];
	assign g1[40] = l[572] || l[577];
	assign g1[41] = l[579] || l[581] || l[587] || l[589];
	assign g1[42] = l[596] || l[599] || l[603] || l[609];
	assign g1[43] = l[611] || l[618];
	assign g1[44] = l[624] || l[626];
	assign g1[45] = l[634] || l[642];
	assign g1[46] = l[651] || l[657];
	assign g1[47] = l[664];
	assign g1[48] = l[668] || l[675] || l[681];
	assign g1[49] = l[692] || l[693] || l[696];
	assign g1[50] = l[700] || l[702] || l[705] || l[712];
	assign g1[51] = l[718] || l[720];
	assign g1[52] = l[724] || l[729] || l[730];
	assign g1[53] = l[737] || l[739] || l[743];
	assign g1[54] = l[747] || l[748];
	assign g1[55] = l[755] || l[760] || l[762] || l[763];
	assign g1[56] = l[767] || l[770] || l[771];
	assign g1[57] = l[776] || l[777] || l[778];
	assign g1[58] = l[783];
	assign g1[59] = l[798];
	assign g1[60] = l[805] || l[807] || l[809] || l[810];
	assign g1[61] = l[812] || l[814] || l[817] || l[822];
	assign g1[62] = l[829] || l[833] || l[836] || l[839];
	assign g1[63] = l[845] || l[847] || l[850] || l[852];
	assign g1[64] = l[860] || l[861] || l[862] || l[866];
	assign g1[65] = l[873];
	assign g1[66] = l[878] || l[880];
	assign g1[67] = l[888] || l[891] || l[896];
	assign g1[68] = l[904] || l[911] || l[913];
	assign g1[69] = l[919] || l[927] || l[929];
	assign g1[70] = l[933] || l[938] || l[939] || l[942];
	assign g1[71] = l[947] || l[952];
	assign g1[72] = l[960] || l[962] || l[964];
	assign g1[73] = l[972] || l[974] || l[977] || l[979];
	assign g1[74] = l[984] || l[990];
	assign g1[75] = l[999];
	assign g1[76] = l[1019];
	assign g1[77] = l[1030] || l[1033];
	assign g1[78] = l[1040] || l[1042] || l[1045] || l[1046] || l[1050];
	assign g1[79] = l[1055] || l[1056] || l[1062];
	assign g1[80] = l[1073] || l[1080];
	assign g1[81] = l[1086] || l[1091];
	assign g1[82] = l[1101] || l[1104];
	assign g1[83] = l[1108] || l[1112] || l[1113];
	assign g1[84] = l[1122] || l[1123] || l[1126] || l[1130] || l[1132];
	assign g1[85] = l[1154] || l[1156];
	assign g1[86] = l[1163];
	assign g1[87] = l[1169];
	assign g1[88] = l[1189];
	assign g1[89] = l[1197] || l[1198] || l[1200] || l[1204];
	assign g1[90] = l[1212] || l[1217];
	assign g1[91] = l[1225] || l[1236];
	assign g1[92] = l[1243] || l[1245];
	assign g1[93] = l[1253];
	assign g1[94] = l[1262] || l[1263] || l[1267];
	assign g1[95] = l[1275];
	
    always_ff @(posedge clk) begin
        g1_reg <= g1;
    end
    
	logic [2:0] v1c7l0_out [0:23];
	logic [2:0] v1c7l0 [0:23];
	assign v1c7l0_out[0] = g1_reg[0] + g1_reg[1] + g1_reg[2] + g1_reg[3];
	assign v1c7l0_out[1] = g1_reg[4] + g1_reg[5] + g1_reg[6] + g1_reg[7];
	assign v1c7l0_out[2] = g1_reg[8] + g1_reg[9] + g1_reg[10] + g1_reg[11];
	assign v1c7l0_out[3] = g1_reg[12] + g1_reg[13] + g1_reg[14] + g1_reg[15];
	assign v1c7l0_out[4] = g1_reg[16] + g1_reg[17] + g1_reg[18] + g1_reg[19];
	assign v1c7l0_out[5] = g1_reg[20] + g1_reg[21] + g1_reg[22] + g1_reg[23];
	assign v1c7l0_out[6] = g1_reg[24] + g1_reg[25] + g1_reg[26] + g1_reg[27];
	assign v1c7l0_out[7] = g1_reg[28] + g1_reg[29] + g1_reg[30] + g1_reg[31];
	assign v1c7l0_out[8] = g1_reg[32] + g1_reg[33] + g1_reg[34] + g1_reg[35];
	assign v1c7l0_out[9] = g1_reg[36] + g1_reg[37] + g1_reg[38] + g1_reg[39];
	assign v1c7l0_out[10] = g1_reg[40] + g1_reg[41] + g1_reg[42] + g1_reg[43];
	assign v1c7l0_out[11] = g1_reg[44] + g1_reg[45] + g1_reg[46] + g1_reg[47];
	assign v1c7l0_out[12] = g1_reg[48] + g1_reg[49] + g1_reg[50] + g1_reg[51];
	assign v1c7l0_out[13] = g1_reg[52] + g1_reg[53] + g1_reg[54] + g1_reg[55];
	assign v1c7l0_out[14] = g1_reg[56] + g1_reg[57] + g1_reg[58] + g1_reg[59];
	assign v1c7l0_out[15] = g1_reg[60] + g1_reg[61] + g1_reg[62] + g1_reg[63];
	assign v1c7l0_out[16] = g1_reg[64] + g1_reg[65] + g1_reg[66] + g1_reg[67];
	assign v1c7l0_out[17] = g1_reg[68] + g1_reg[69] + g1_reg[70] + g1_reg[71];
	assign v1c7l0_out[18] = g1_reg[72] + g1_reg[73] + g1_reg[74] + g1_reg[75];
	assign v1c7l0_out[19] = g1_reg[76] + g1_reg[77] + g1_reg[78] + g1_reg[79];
	assign v1c7l0_out[20] = g1_reg[80] + g1_reg[81] + g1_reg[82] + g1_reg[83];
	assign v1c7l0_out[21] = g1_reg[84] + g1_reg[85] + g1_reg[86] + g1_reg[87];
	assign v1c7l0_out[22] = g1_reg[88] + g1_reg[89] + g1_reg[90] + g1_reg[91];
	assign v1c7l0_out[23] = g1_reg[92] + g1_reg[93] + g1_reg[94] + g1_reg[95];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 24; i = i + 1)
            v1c7l0[i] <= v1c7l0_out[i];
    end

	reg [3:0] v1c7l1 [0:11];
	logic [3:0] v1c7l1_out [0:11];
	assign v1c7l1_out[0] = v1c7l0[0] + v1c7l0[1];
	assign v1c7l1_out[1] = v1c7l0[2] + v1c7l0[3];
	assign v1c7l1_out[2] = v1c7l0[4] + v1c7l0[5];
	assign v1c7l1_out[3] = v1c7l0[6] + v1c7l0[7];
	assign v1c7l1_out[4] = v1c7l0[8] + v1c7l0[9];
	assign v1c7l1_out[5] = v1c7l0[10] + v1c7l0[11];
	assign v1c7l1_out[6] = v1c7l0[12] + v1c7l0[13];
	assign v1c7l1_out[7] = v1c7l0[14] + v1c7l0[15];
	assign v1c7l1_out[8] = v1c7l0[16] + v1c7l0[17];
	assign v1c7l1_out[9] = v1c7l0[18] + v1c7l0[19];
	assign v1c7l1_out[10] = v1c7l0[20] + v1c7l0[21];
	assign v1c7l1_out[11] = v1c7l0[22] + v1c7l0[23];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 12; i = i + 1)
            v1c7l1[i] <= v1c7l1_out[i];
    end

	reg [4:0] v1c7l2 [0:5];
	logic [4:0] v1c7l2_out [0:5];
	assign v1c7l2_out[0] = v1c7l1[0] + v1c7l1[1];
	assign v1c7l2_out[1] = v1c7l1[2] + v1c7l1[3];
	assign v1c7l2_out[2] = v1c7l1[4] + v1c7l1[5];
	assign v1c7l2_out[3] = v1c7l1[6] + v1c7l1[7];
	assign v1c7l2_out[4] = v1c7l1[8] + v1c7l1[9];
	assign v1c7l2_out[5] = v1c7l1[10] + v1c7l1[11];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 6; i = i + 1)
            v1c7l2[i] <= v1c7l2_out[i];
    end

	reg [5:0] v1c7l3 [0:2];
	logic [5:0] v1c7l3_out [0:2];
	assign v1c7l3_out[0] = v1c7l2[0] + v1c7l2[1];
	assign v1c7l3_out[1] = v1c7l2[2] + v1c7l2[3];
	assign v1c7l3_out[2] = v1c7l2[4] + v1c7l2[5];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 3; i = i + 1)
            v1c7l3[i] <= v1c7l3_out[i];
    end

	reg [6:0] v1c7l4 [0:1];
	logic [6:0] v1c7l4_out [0:1];
	assign v1c7l4_out[0] = v1c7l3[0] + v1c7l3[1];
	assign v1c7l4_out[1] = v1c7l3[2];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 2; i = i + 1)
            v1c7l4[i] <= v1c7l4_out[i];
    end

	reg [7:0] v1c7l5 [0:0];
	logic [7:0] v1c7l5_out [0:0];
	assign v1c7l5_out[0] = v1c7l4[0] + v1c7l4[1];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 1; i = i + 1)
            v1c7l5[i] <= v1c7l5_out[i];
    end

	assign val[1] = v1c7l5[0];
	
	// -0.0625
	logic [0:78] g2;
	reg [0:78] g2_reg;
	assign g2[0] = l[5] || l[6] || l[13];
	assign g2[1] = l[31];
	assign g2[2] = l[83];
	assign g2[3] = l[109] || l[110] || l[122];
	assign g2[4] = l[126];
	assign g2[5] = l[143] || l[148];
	assign g2[6] = l[152] || l[159] || l[163];
	assign g2[7] = l[176];
	assign g2[8] = l[181];
	assign g2[9] = l[197] || l[199];
	assign g2[10] = l[225] || l[236] || l[237];
	assign g2[11] = l[242] || l[245];
	assign g2[12] = l[257];
	assign g2[13] = l[267] || l[281];
	assign g2[14] = l[284] || l[287] || l[294];
	assign g2[15] = l[298] || l[299];
	assign g2[16] = l[321];
	assign g2[17] = l[343] || l[347];
	assign g2[18] = l[350] || l[352] || l[355];
	assign g2[19] = l[369];
	assign g2[20] = l[387];
	assign g2[21] = l[397] || l[400];
	assign g2[22] = l[411] || l[413];
	assign g2[23] = l[429] || l[434];
	assign g2[24] = l[464] || l[474];
	assign g2[25] = l[485] || l[487];
	assign g2[26] = l[502];
	assign g2[27] = l[511];
	assign g2[28] = l[536];
	assign g2[29] = l[541] || l[552];
	assign g2[30] = l[562];
	assign g2[31] = l[568] || l[569] || l[576];
	assign g2[32] = l[578];
	assign g2[33] = l[600];
	assign g2[34] = l[614];
	assign g2[35] = l[629];
	assign g2[36] = l[646] || l[648];
	assign g2[37] = l[650];
	assign g2[38] = l[671];
	assign g2[39] = l[686] || l[687] || l[690];
	assign g2[40] = l[709] || l[714];
	assign g2[41] = l[723] || l[727] || l[734];
	assign g2[42] = l[751] || l[753];
	assign g2[43] = l[769];
	assign g2[44] = l[779];
	assign g2[45] = l[795] || l[800];
	assign g2[46] = l[815] || l[823];
	assign g2[47] = l[842];
	assign g2[48] = l[856] || l[857];
	assign g2[49] = l[868];
	assign g2[50] = l[879] || l[885];
	assign g2[51] = l[892] || l[895];
	assign g2[52] = l[903];
	assign g2[53] = l[918] || l[922];
	assign g2[54] = l[935];
	assign g2[55] = l[944] || l[945] || l[951] || l[955];
	assign g2[56] = l[970] || l[976];
	assign g2[57] = l[988] || l[991];
	assign g2[58] = l[1001];
	assign g2[59] = l[1013] || l[1018];
	assign g2[60] = l[1034];
	assign g2[61] = l[1053] || l[1058] || l[1065];
	assign g2[62] = l[1067] || l[1072] || l[1076];
	assign g2[63] = l[1082] || l[1085] || l[1088];
	assign g2[64] = l[1098] || l[1103];
	assign g2[65] = l[1116];
	assign g2[66] = l[1128] || l[1134];
	assign g2[67] = l[1138] || l[1140];
	assign g2[68] = l[1153];
	assign g2[69] = l[1165];
	assign g2[70] = l[1171] || l[1174] || l[1178];
	assign g2[71] = l[1179] || l[1182] || l[1183] || l[1186] || l[1190] || l[1193];
	assign g2[72] = l[1203] || l[1207] || l[1209];
	assign g2[73] = l[1221];
	assign g2[74] = l[1227] || l[1233];
	assign g2[75] = l[1240];
	assign g2[76] = l[1255];
	assign g2[77] = l[1261];
	assign g2[78] = l[1277];
	
    always_ff @(posedge clk) begin
        g2_reg <= g2;
    end
    
	logic [2:0] v2c7l0_out [0:19];
	logic [2:0] v2c7l0 [0:19];
	assign v2c7l0_out[0] = g2_reg[0] + g2_reg[1] + g2_reg[2] + g2_reg[3];
	assign v2c7l0_out[1] = g2_reg[4] + g2_reg[5] + g2_reg[6] + g2_reg[7];
	assign v2c7l0_out[2] = g2_reg[8] + g2_reg[9] + g2_reg[10] + g2_reg[11];
	assign v2c7l0_out[3] = g2_reg[12] + g2_reg[13] + g2_reg[14] + g2_reg[15];
	assign v2c7l0_out[4] = g2_reg[16] + g2_reg[17] + g2_reg[18] + g2_reg[19];
	assign v2c7l0_out[5] = g2_reg[20] + g2_reg[21] + g2_reg[22] + g2_reg[23];
	assign v2c7l0_out[6] = g2_reg[24] + g2_reg[25] + g2_reg[26] + g2_reg[27];
	assign v2c7l0_out[7] = g2_reg[28] + g2_reg[29] + g2_reg[30] + g2_reg[31];
	assign v2c7l0_out[8] = g2_reg[32] + g2_reg[33] + g2_reg[34] + g2_reg[35];
	assign v2c7l0_out[9] = g2_reg[36] + g2_reg[37] + g2_reg[38] + g2_reg[39];
	assign v2c7l0_out[10] = g2_reg[40] + g2_reg[41] + g2_reg[42] + g2_reg[43];
	assign v2c7l0_out[11] = g2_reg[44] + g2_reg[45] + g2_reg[46] + g2_reg[47];
	assign v2c7l0_out[12] = g2_reg[48] + g2_reg[49] + g2_reg[50] + g2_reg[51];
	assign v2c7l0_out[13] = g2_reg[52] + g2_reg[53] + g2_reg[54] + g2_reg[55];
	assign v2c7l0_out[14] = g2_reg[56] + g2_reg[57] + g2_reg[58] + g2_reg[59];
	assign v2c7l0_out[15] = g2_reg[60] + g2_reg[61] + g2_reg[62] + g2_reg[63];
	assign v2c7l0_out[16] = g2_reg[64] + g2_reg[65] + g2_reg[66] + g2_reg[67];
	assign v2c7l0_out[17] = g2_reg[68] + g2_reg[69] + g2_reg[70] + g2_reg[71];
	assign v2c7l0_out[18] = g2_reg[72] + g2_reg[73] + g2_reg[74] + g2_reg[75];
	assign v2c7l0_out[19] = g2_reg[76] + g2_reg[77] + g2_reg[78];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 20; i = i + 1)
            v2c7l0[i] <= v2c7l0_out[i];
    end

	reg [3:0] v2c7l1 [0:9];
	logic [3:0] v2c7l1_out [0:9];
	assign v2c7l1_out[0] = v2c7l0[0] + v2c7l0[1];
	assign v2c7l1_out[1] = v2c7l0[2] + v2c7l0[3];
	assign v2c7l1_out[2] = v2c7l0[4] + v2c7l0[5];
	assign v2c7l1_out[3] = v2c7l0[6] + v2c7l0[7];
	assign v2c7l1_out[4] = v2c7l0[8] + v2c7l0[9];
	assign v2c7l1_out[5] = v2c7l0[10] + v2c7l0[11];
	assign v2c7l1_out[6] = v2c7l0[12] + v2c7l0[13];
	assign v2c7l1_out[7] = v2c7l0[14] + v2c7l0[15];
	assign v2c7l1_out[8] = v2c7l0[16] + v2c7l0[17];
	assign v2c7l1_out[9] = v2c7l0[18] + v2c7l0[19];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 10; i = i + 1)
            v2c7l1[i] <= v2c7l1_out[i];
    end

	reg [4:0] v2c7l2 [0:4];
	logic [4:0] v2c7l2_out [0:4];
	assign v2c7l2_out[0] = v2c7l1[0] + v2c7l1[1];
	assign v2c7l2_out[1] = v2c7l1[2] + v2c7l1[3];
	assign v2c7l2_out[2] = v2c7l1[4] + v2c7l1[5];
	assign v2c7l2_out[3] = v2c7l1[6] + v2c7l1[7];
	assign v2c7l2_out[4] = v2c7l1[8] + v2c7l1[9];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 5; i = i + 1)
            v2c7l2[i] <= v2c7l2_out[i];
    end

	reg [5:0] v2c7l3 [0:2];
	logic [5:0] v2c7l3_out [0:2];
	assign v2c7l3_out[0] = v2c7l2[0] + v2c7l2[1];
	assign v2c7l3_out[1] = v2c7l2[2] + v2c7l2[3];
	assign v2c7l3_out[2] = v2c7l2[4];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 3; i = i + 1)
            v2c7l3[i] <= v2c7l3_out[i];
    end

	reg [6:0] v2c7l4 [0:1];
	logic [6:0] v2c7l4_out [0:1];
	assign v2c7l4_out[0] = v2c7l3[0] + v2c7l3[1];
	assign v2c7l4_out[1] = v2c7l3[2];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 2; i = i + 1)
            v2c7l4[i] <= v2c7l4_out[i];
    end

	reg [7:0] v2c7l5 [0:0];
	logic [7:0] v2c7l5_out [0:0];
	assign v2c7l5_out[0] = v2c7l4[0] + v2c7l4[1];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 1; i = i + 1)
            v2c7l5[i] <= v2c7l5_out[i];
    end

	assign val[2] = v2c7l5[0];
	
	// -0.03125
	logic [0:59] g3;
	reg [0:59] g3_reg;
	assign g3[0] = l[139];
	assign g3[1] = l[157];
	assign g3[2] = l[189];
	assign g3[3] = l[250];
	assign g3[4] = l[261];
	assign g3[5] = l[296];
	assign g3[6] = l[317] || l[322];
	assign g3[7] = l[324];
	assign g3[8] = l[365];
	assign g3[9] = l[383];
	assign g3[10] = l[401] || l[404];
	assign g3[11] = l[416] || l[427];
	assign g3[12] = l[438];
	assign g3[13] = l[450];
	assign g3[14] = l[472];
	assign g3[15] = l[504];
	assign g3[16] = l[521];
	assign g3[17] = l[548];
	assign g3[18] = l[555] || l[556];
	assign g3[19] = l[598] || l[607];
	assign g3[20] = l[610];
	assign g3[21] = l[619] || l[632];
	assign g3[22] = l[640];
	assign g3[23] = l[653] || l[656];
	assign g3[24] = l[658] || l[667];
	assign g3[25] = l[677] || l[679];
	assign g3[26] = l[699] || l[708] || l[711];
	assign g3[27] = l[721];
	assign g3[28] = l[738];
	assign g3[29] = l[745];
	assign g3[30] = l[772];
	assign g3[31] = l[774];
	assign g3[32] = l[782] || l[784] || l[788] || l[790] || l[792];
	assign g3[33] = l[797];
	assign g3[34] = l[819];
	assign g3[35] = l[827];
	assign g3[36] = l[844];
	assign g3[37] = l[870];
	assign g3[38] = l[882];
	assign g3[39] = l[890];
	assign g3[40] = l[900];
	assign g3[41] = l[916];
	assign g3[42] = l[948];
	assign g3[43] = l[956] || l[959];
	assign g3[44] = l[967] || l[981];
	assign g3[45] = l[993];
	assign g3[46] = l[1010];
	assign g3[47] = l[1037];
	assign g3[48] = l[1039] || l[1051];
	assign g3[49] = l[1074];
	assign g3[50] = l[1099];
	assign g3[51] = l[1110];
	assign g3[52] = l[1136] || l[1147];
	assign g3[53] = l[1173];
	assign g3[54] = l[1215];
	assign g3[55] = l[1232];
	assign g3[56] = l[1239];
	assign g3[57] = l[1247];
	assign g3[58] = l[1259];
	assign g3[59] = l[1271] || l[1273] || l[1276];
	
    always_ff @(posedge clk) begin
        g3_reg <= g3;
    end
    
	logic [2:0] v3c7l0_out [0:14];
	logic [2:0] v3c7l0 [0:14];
	assign v3c7l0_out[0] = g3_reg[0] + g3_reg[1] + g3_reg[2] + g3_reg[3];
	assign v3c7l0_out[1] = g3_reg[4] + g3_reg[5] + g3_reg[6] + g3_reg[7];
	assign v3c7l0_out[2] = g3_reg[8] + g3_reg[9] + g3_reg[10] + g3_reg[11];
	assign v3c7l0_out[3] = g3_reg[12] + g3_reg[13] + g3_reg[14] + g3_reg[15];
	assign v3c7l0_out[4] = g3_reg[16] + g3_reg[17] + g3_reg[18] + g3_reg[19];
	assign v3c7l0_out[5] = g3_reg[20] + g3_reg[21] + g3_reg[22] + g3_reg[23];
	assign v3c7l0_out[6] = g3_reg[24] + g3_reg[25] + g3_reg[26] + g3_reg[27];
	assign v3c7l0_out[7] = g3_reg[28] + g3_reg[29] + g3_reg[30] + g3_reg[31];
	assign v3c7l0_out[8] = g3_reg[32] + g3_reg[33] + g3_reg[34] + g3_reg[35];
	assign v3c7l0_out[9] = g3_reg[36] + g3_reg[37] + g3_reg[38] + g3_reg[39];
	assign v3c7l0_out[10] = g3_reg[40] + g3_reg[41] + g3_reg[42] + g3_reg[43];
	assign v3c7l0_out[11] = g3_reg[44] + g3_reg[45] + g3_reg[46] + g3_reg[47];
	assign v3c7l0_out[12] = g3_reg[48] + g3_reg[49] + g3_reg[50] + g3_reg[51];
	assign v3c7l0_out[13] = g3_reg[52] + g3_reg[53] + g3_reg[54] + g3_reg[55];
	assign v3c7l0_out[14] = g3_reg[56] + g3_reg[57] + g3_reg[58] + g3_reg[59];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 15; i = i + 1)
            v3c7l0[i] <= v3c7l0_out[i];
    end

	reg [3:0] v3c7l1 [0:7];
	logic [3:0] v3c7l1_out [0:7];
	assign v3c7l1_out[0] = v3c7l0[0] + v3c7l0[1];
	assign v3c7l1_out[1] = v3c7l0[2] + v3c7l0[3];
	assign v3c7l1_out[2] = v3c7l0[4] + v3c7l0[5];
	assign v3c7l1_out[3] = v3c7l0[6] + v3c7l0[7];
	assign v3c7l1_out[4] = v3c7l0[8] + v3c7l0[9];
	assign v3c7l1_out[5] = v3c7l0[10] + v3c7l0[11];
	assign v3c7l1_out[6] = v3c7l0[12] + v3c7l0[13];
	assign v3c7l1_out[7] = v3c7l0[14];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 8; i = i + 1)
            v3c7l1[i] <= v3c7l1_out[i];
    end

	reg [4:0] v3c7l2 [0:3];
	logic [4:0] v3c7l2_out [0:3];
	assign v3c7l2_out[0] = v3c7l1[0] + v3c7l1[1];
	assign v3c7l2_out[1] = v3c7l1[2] + v3c7l1[3];
	assign v3c7l2_out[2] = v3c7l1[4] + v3c7l1[5];
	assign v3c7l2_out[3] = v3c7l1[6] + v3c7l1[7];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 4; i = i + 1)
            v3c7l2[i] <= v3c7l2_out[i];
    end

	reg [5:0] v3c7l3 [0:1];
	logic [5:0] v3c7l3_out [0:1];
	assign v3c7l3_out[0] = v3c7l2[0] + v3c7l2[1];
	assign v3c7l3_out[1] = v3c7l2[2] + v3c7l2[3];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 2; i = i + 1)
            v3c7l3[i] <= v3c7l3_out[i];
    end

	reg [6:0] v3c7l4 [0:0];
	logic [6:0] v3c7l4_out [0:0];
	assign v3c7l4_out[0] = v3c7l3[0] + v3c7l3[1];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 1; i = i + 1)
            v3c7l4[i] <= v3c7l4_out[i];
    end

	reg [7:0] v3c7l5 [0:0];
	logic [7:0] v3c7l5_out [0:0];
	assign v3c7l5_out[0] = v3c7l4[0];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 1; i = i + 1)
            v3c7l5[i] <= v3c7l5_out[i];
    end

	assign val[3] = v3c7l5[0];
	
	// -0.015625
	logic [0:39] g4;
	reg [0:39] g4_reg;
	assign g4[0] = l[53];
	assign g4[1] = l[100] || l[107];
	assign g4[2] = l[123];
	assign g4[3] = l[184];
	assign g4[4] = l[211];
	assign g4[5] = l[239];
	assign g4[6] = l[266];
	assign g4[7] = l[285];
	assign g4[8] = l[304];
	assign g4[9] = l[335];
	assign g4[10] = l[393];
	assign g4[11] = l[406];
	assign g4[12] = l[414];
	assign g4[13] = l[496];
	assign g4[14] = l[506];
	assign g4[15] = l[513] || l[525];
	assign g4[16] = l[526];
	assign g4[17] = l[582];
	assign g4[18] = l[612];
	assign g4[19] = l[636] || l[643];
	assign g4[20] = l[716];
	assign g4[21] = l[811];
	assign g4[22] = l[831];
	assign g4[23] = l[854];
	assign g4[24] = l[932];
	assign g4[25] = l[950];
	assign g4[26] = l[986] || l[992];
	assign g4[27] = l[1000];
	assign g4[28] = l[1007];
	assign g4[29] = l[1025];
	assign g4[30] = l[1043];
	assign g4[31] = l[1057];
	assign g4[32] = l[1069];
	assign g4[33] = l[1105];
	assign g4[34] = l[1155];
	assign g4[35] = l[1188];
	assign g4[36] = l[1194];
	assign g4[37] = l[1230];
	assign g4[38] = l[1249] || l[1252];
	assign g4[39] = l[1269];
	
    always_ff @(posedge clk) begin
        g4_reg <= g4;
    end
    
	logic [2:0] v4c7l0_out [0:9];
	logic [2:0] v4c7l0 [0:9];
	assign v4c7l0_out[0] = g4_reg[0] + g4_reg[1] + g4_reg[2] + g4_reg[3];
	assign v4c7l0_out[1] = g4_reg[4] + g4_reg[5] + g4_reg[6] + g4_reg[7];
	assign v4c7l0_out[2] = g4_reg[8] + g4_reg[9] + g4_reg[10] + g4_reg[11];
	assign v4c7l0_out[3] = g4_reg[12] + g4_reg[13] + g4_reg[14] + g4_reg[15];
	assign v4c7l0_out[4] = g4_reg[16] + g4_reg[17] + g4_reg[18] + g4_reg[19];
	assign v4c7l0_out[5] = g4_reg[20] + g4_reg[21] + g4_reg[22] + g4_reg[23];
	assign v4c7l0_out[6] = g4_reg[24] + g4_reg[25] + g4_reg[26] + g4_reg[27];
	assign v4c7l0_out[7] = g4_reg[28] + g4_reg[29] + g4_reg[30] + g4_reg[31];
	assign v4c7l0_out[8] = g4_reg[32] + g4_reg[33] + g4_reg[34] + g4_reg[35];
	assign v4c7l0_out[9] = g4_reg[36] + g4_reg[37] + g4_reg[38] + g4_reg[39];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 10; i = i + 1)
            v4c7l0[i] <= v4c7l0_out[i];
    end

	reg [3:0] v4c7l1 [0:4];
	logic [3:0] v4c7l1_out [0:4];
	assign v4c7l1_out[0] = v4c7l0[0] + v4c7l0[1];
	assign v4c7l1_out[1] = v4c7l0[2] + v4c7l0[3];
	assign v4c7l1_out[2] = v4c7l0[4] + v4c7l0[5];
	assign v4c7l1_out[3] = v4c7l0[6] + v4c7l0[7];
	assign v4c7l1_out[4] = v4c7l0[8] + v4c7l0[9];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 5; i = i + 1)
            v4c7l1[i] <= v4c7l1_out[i];
    end

	reg [4:0] v4c7l2 [0:2];
	logic [4:0] v4c7l2_out [0:2];
	assign v4c7l2_out[0] = v4c7l1[0] + v4c7l1[1];
	assign v4c7l2_out[1] = v4c7l1[2] + v4c7l1[3];
	assign v4c7l2_out[2] = v4c7l1[4];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 3; i = i + 1)
            v4c7l2[i] <= v4c7l2_out[i];
    end

	reg [5:0] v4c7l3 [0:1];
	logic [5:0] v4c7l3_out [0:1];
	assign v4c7l3_out[0] = v4c7l2[0] + v4c7l2[1];
	assign v4c7l3_out[1] = v4c7l2[2];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 2; i = i + 1)
            v4c7l3[i] <= v4c7l3_out[i];
    end

	reg [6:0] v4c7l4 [0:0];
	logic [6:0] v4c7l4_out [0:0];
	assign v4c7l4_out[0] = v4c7l3[0] + v4c7l3[1];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 1; i = i + 1)
            v4c7l4[i] <= v4c7l4_out[i];
    end

	reg [7:0] v4c7l5 [0:0];
	logic [7:0] v4c7l5_out [0:0];
	assign v4c7l5_out[0] = v4c7l4[0];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 1; i = i + 1)
            v4c7l5[i] <= v4c7l5_out[i];
    end

	assign val[4] = v4c7l5[0];
	
	// 0.015625
	logic [0:32] g5;
	reg [0:32] g5_reg;
	assign g5[0] = l[103];
	assign g5[1] = l[173];
	assign g5[2] = l[224];
	assign g5[3] = l[306];
	assign g5[4] = l[314];
	assign g5[5] = l[345];
	assign g5[6] = l[432];
	assign g5[7] = l[465] || l[468];
	assign g5[8] = l[503];
	assign g5[9] = l[534];
	assign g5[10] = l[554] || l[563] || l[565];
	assign g5[11] = l[591];
	assign g5[12] = l[605];
	assign g5[13] = l[659] || l[662];
	assign g5[14] = l[674];
	assign g5[15] = l[715];
	assign g5[16] = l[746];
	assign g5[17] = l[804] || l[806];
	assign g5[18] = l[864];
	assign g5[19] = l[886] || l[897];
	assign g5[20] = l[920];
	assign g5[21] = l[957];
	assign g5[22] = l[968];
	assign g5[23] = l[989];
	assign g5[24] = l[1031];
	assign g5[25] = l[1041] || l[1047] || l[1049];
	assign g5[26] = l[1060];
	assign g5[27] = l[1083];
	assign g5[28] = l[1111];
	assign g5[29] = l[1160] || l[1162];
	assign g5[30] = l[1213] || l[1216];
	assign g5[31] = l[1241];
	assign g5[32] = l[1254];
	
    always_ff @(posedge clk) begin
        g5_reg <= g5;
    end
    
	logic [2:0] v5c7l0_out [0:8];
	logic [2:0] v5c7l0 [0:8];
	assign v5c7l0_out[0] = g5_reg[0] + g5_reg[1] + g5_reg[2] + g5_reg[3];
	assign v5c7l0_out[1] = g5_reg[4] + g5_reg[5] + g5_reg[6] + g5_reg[7];
	assign v5c7l0_out[2] = g5_reg[8] + g5_reg[9] + g5_reg[10] + g5_reg[11];
	assign v5c7l0_out[3] = g5_reg[12] + g5_reg[13] + g5_reg[14] + g5_reg[15];
	assign v5c7l0_out[4] = g5_reg[16] + g5_reg[17] + g5_reg[18] + g5_reg[19];
	assign v5c7l0_out[5] = g5_reg[20] + g5_reg[21] + g5_reg[22] + g5_reg[23];
	assign v5c7l0_out[6] = g5_reg[24] + g5_reg[25] + g5_reg[26] + g5_reg[27];
	assign v5c7l0_out[7] = g5_reg[28] + g5_reg[29] + g5_reg[30] + g5_reg[31];
	assign v5c7l0_out[8] = g5_reg[32];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 9; i = i + 1)
            v5c7l0[i] <= v5c7l0_out[i];
    end

	reg [3:0] v5c7l1 [0:4];
	logic [3:0] v5c7l1_out [0:4];
	assign v5c7l1_out[0] = v5c7l0[0] + v5c7l0[1];
	assign v5c7l1_out[1] = v5c7l0[2] + v5c7l0[3];
	assign v5c7l1_out[2] = v5c7l0[4] + v5c7l0[5];
	assign v5c7l1_out[3] = v5c7l0[6] + v5c7l0[7];
	assign v5c7l1_out[4] = v5c7l0[8];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 5; i = i + 1)
            v5c7l1[i] <= v5c7l1_out[i];
    end

	reg [4:0] v5c7l2 [0:2];
	logic [4:0] v5c7l2_out [0:2];
	assign v5c7l2_out[0] = v5c7l1[0] + v5c7l1[1];
	assign v5c7l2_out[1] = v5c7l1[2] + v5c7l1[3];
	assign v5c7l2_out[2] = v5c7l1[4];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 3; i = i + 1)
            v5c7l2[i] <= v5c7l2_out[i];
    end

	reg [5:0] v5c7l3 [0:1];
	logic [5:0] v5c7l3_out [0:1];
	assign v5c7l3_out[0] = v5c7l2[0] + v5c7l2[1];
	assign v5c7l3_out[1] = v5c7l2[2];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 2; i = i + 1)
            v5c7l3[i] <= v5c7l3_out[i];
    end

	reg [6:0] v5c7l4 [0:0];
	logic [6:0] v5c7l4_out [0:0];
	assign v5c7l4_out[0] = v5c7l3[0] + v5c7l3[1];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 1; i = i + 1)
            v5c7l4[i] <= v5c7l4_out[i];
    end

	reg [7:0] v5c7l5 [0:0];
	logic [7:0] v5c7l5_out [0:0];
	assign v5c7l5_out[0] = v5c7l4[0];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 1; i = i + 1)
            v5c7l5[i] <= v5c7l5_out[i];
    end

	assign val[5] = v5c7l5[0];
	
	// 0.03125
	logic [0:64] g6;
	reg [0:64] g6_reg;
	assign g6[0] = l[15];
	assign g6[1] = l[51] || l[61];
	assign g6[2] = l[78];
	assign g6[3] = l[80] || l[86];
	assign g6[4] = l[131];
	assign g6[5] = l[153];
	assign g6[6] = l[165] || l[168] || l[179];
	assign g6[7] = l[182];
	assign g6[8] = l[215];
	assign g6[9] = l[258];
	assign g6[10] = l[283] || l[292];
	assign g6[11] = l[308];
	assign g6[12] = l[318];
	assign g6[13] = l[327];
	assign g6[14] = l[366] || l[373];
	assign g6[15] = l[382];
	assign g6[16] = l[394];
	assign g6[17] = l[407] || l[409];
	assign g6[18] = l[418] || l[423];
	assign g6[19] = l[436];
	assign g6[20] = l[446];
	assign g6[21] = l[471];
	assign g6[22] = l[497];
	assign g6[23] = l[512];
	assign g6[24] = l[527];
	assign g6[25] = l[542] || l[543];
	assign g6[26] = l[570] || l[575];
	assign g6[27] = l[584] || l[586] || l[588];
	assign g6[28] = l[620];
	assign g6[29] = l[649] || l[654];
	assign g6[30] = l[661] || l[665];
	assign g6[31] = l[670];
	assign g6[32] = l[722];
	assign g6[33] = l[736];
	assign g6[34] = l[744];
	assign g6[35] = l[750];
	assign g6[36] = l[766];
	assign g6[37] = l[773] || l[775];
	assign g6[38] = l[813];
	assign g6[39] = l[834] || l[837];
	assign g6[40] = l[872];
	assign g6[41] = l[889] || l[894] || l[898];
	assign g6[42] = l[907];
	assign g6[43] = l[915];
	assign g6[44] = l[931] || l[934];
	assign g6[45] = l[943] || l[946];
	assign g6[46] = l[958];
	assign g6[47] = l[973];
	assign g6[48] = l[982];
	assign g6[49] = l[1016] || l[1020];
	assign g6[50] = l[1026] || l[1029];
	assign g6[51] = l[1044];
	assign g6[52] = l[1052] || l[1063];
	assign g6[53] = l[1081];
	assign g6[54] = l[1087] || l[1096];
	assign g6[55] = l[1106];
	assign g6[56] = l[1121] || l[1125] || l[1129] || l[1131];
	assign g6[57] = l[1137];
	assign g6[58] = l[1149];
	assign g6[59] = l[1164];
	assign g6[60] = l[1211];
	assign g6[61] = l[1231];
	assign g6[62] = l[1238];
	assign g6[63] = l[1258];
	assign g6[64] = l[1270];
	
    always_ff @(posedge clk) begin
        g6_reg <= g6;
    end
    
	logic [2:0] v6c7l0_out [0:16];
	logic [2:0] v6c7l0 [0:16];
	assign v6c7l0_out[0] = g6_reg[0] + g6_reg[1] + g6_reg[2] + g6_reg[3];
	assign v6c7l0_out[1] = g6_reg[4] + g6_reg[5] + g6_reg[6] + g6_reg[7];
	assign v6c7l0_out[2] = g6_reg[8] + g6_reg[9] + g6_reg[10] + g6_reg[11];
	assign v6c7l0_out[3] = g6_reg[12] + g6_reg[13] + g6_reg[14] + g6_reg[15];
	assign v6c7l0_out[4] = g6_reg[16] + g6_reg[17] + g6_reg[18] + g6_reg[19];
	assign v6c7l0_out[5] = g6_reg[20] + g6_reg[21] + g6_reg[22] + g6_reg[23];
	assign v6c7l0_out[6] = g6_reg[24] + g6_reg[25] + g6_reg[26] + g6_reg[27];
	assign v6c7l0_out[7] = g6_reg[28] + g6_reg[29] + g6_reg[30] + g6_reg[31];
	assign v6c7l0_out[8] = g6_reg[32] + g6_reg[33] + g6_reg[34] + g6_reg[35];
	assign v6c7l0_out[9] = g6_reg[36] + g6_reg[37] + g6_reg[38] + g6_reg[39];
	assign v6c7l0_out[10] = g6_reg[40] + g6_reg[41] + g6_reg[42] + g6_reg[43];
	assign v6c7l0_out[11] = g6_reg[44] + g6_reg[45] + g6_reg[46] + g6_reg[47];
	assign v6c7l0_out[12] = g6_reg[48] + g6_reg[49] + g6_reg[50] + g6_reg[51];
	assign v6c7l0_out[13] = g6_reg[52] + g6_reg[53] + g6_reg[54] + g6_reg[55];
	assign v6c7l0_out[14] = g6_reg[56] + g6_reg[57] + g6_reg[58] + g6_reg[59];
	assign v6c7l0_out[15] = g6_reg[60] + g6_reg[61] + g6_reg[62] + g6_reg[63];
	assign v6c7l0_out[16] = g6_reg[64];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 17; i = i + 1)
            v6c7l0[i] <= v6c7l0_out[i];
    end

	reg [3:0] v6c7l1 [0:8];
	logic [3:0] v6c7l1_out [0:8];
	assign v6c7l1_out[0] = v6c7l0[0] + v6c7l0[1];
	assign v6c7l1_out[1] = v6c7l0[2] + v6c7l0[3];
	assign v6c7l1_out[2] = v6c7l0[4] + v6c7l0[5];
	assign v6c7l1_out[3] = v6c7l0[6] + v6c7l0[7];
	assign v6c7l1_out[4] = v6c7l0[8] + v6c7l0[9];
	assign v6c7l1_out[5] = v6c7l0[10] + v6c7l0[11];
	assign v6c7l1_out[6] = v6c7l0[12] + v6c7l0[13];
	assign v6c7l1_out[7] = v6c7l0[14] + v6c7l0[15];
	assign v6c7l1_out[8] = v6c7l0[16];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 9; i = i + 1)
            v6c7l1[i] <= v6c7l1_out[i];
    end

	reg [4:0] v6c7l2 [0:4];
	logic [4:0] v6c7l2_out [0:4];
	assign v6c7l2_out[0] = v6c7l1[0] + v6c7l1[1];
	assign v6c7l2_out[1] = v6c7l1[2] + v6c7l1[3];
	assign v6c7l2_out[2] = v6c7l1[4] + v6c7l1[5];
	assign v6c7l2_out[3] = v6c7l1[6] + v6c7l1[7];
	assign v6c7l2_out[4] = v6c7l1[8];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 5; i = i + 1)
            v6c7l2[i] <= v6c7l2_out[i];
    end

	reg [5:0] v6c7l3 [0:2];
	logic [5:0] v6c7l3_out [0:2];
	assign v6c7l3_out[0] = v6c7l2[0] + v6c7l2[1];
	assign v6c7l3_out[1] = v6c7l2[2] + v6c7l2[3];
	assign v6c7l3_out[2] = v6c7l2[4];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 3; i = i + 1)
            v6c7l3[i] <= v6c7l3_out[i];
    end

	reg [6:0] v6c7l4 [0:1];
	logic [6:0] v6c7l4_out [0:1];
	assign v6c7l4_out[0] = v6c7l3[0] + v6c7l3[1];
	assign v6c7l4_out[1] = v6c7l3[2];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 2; i = i + 1)
            v6c7l4[i] <= v6c7l4_out[i];
    end

	reg [7:0] v6c7l5 [0:0];
	logic [7:0] v6c7l5_out [0:0];
	assign v6c7l5_out[0] = v6c7l4[0] + v6c7l4[1];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 1; i = i + 1)
            v6c7l5[i] <= v6c7l5_out[i];
    end

	assign val[6] = v6c7l5[0];
	
	// 0.0625
	logic [0:62] g7;
	reg [0:62] g7_reg;
	assign g7[0] = l[39];
	assign g7[1] = l[48];
	assign g7[2] = l[66];
	assign g7[3] = l[113];
	assign g7[4] = l[190];
	assign g7[5] = l[195] || l[200] || l[201] || l[204];
	assign g7[6] = l[220];
	assign g7[7] = l[226] || l[230];
	assign g7[8] = l[243] || l[248] || l[256];
	assign g7[9] = l[274];
	assign g7[10] = l[301];
	assign g7[11] = l[313] || l[323];
	assign g7[12] = l[332] || l[337];
	assign g7[13] = l[351] || l[360] || l[362];
	assign g7[14] = l[425];
	assign g7[15] = l[430];
	assign g7[16] = l[440] || l[444];
	assign g7[17] = l[454];
	assign g7[18] = l[488];
	assign g7[19] = l[499];
	assign g7[20] = l[507];
	assign g7[21] = l[515];
	assign g7[22] = l[532] || l[537];
	assign g7[23] = l[547];
	assign g7[24] = l[567] || l[571];
	assign g7[25] = l[597] || l[602];
	assign g7[26] = l[615] || l[617];
	assign g7[27] = l[625] || l[627];
	assign g7[28] = l[635] || l[644];
	assign g7[29] = l[669];
	assign g7[30] = l[684];
	assign g7[31] = l[703] || l[710];
	assign g7[32] = l[728];
	assign g7[33] = l[741];
	assign g7[34] = l[796];
	assign g7[35] = l[803];
	assign g7[36] = l[821] || l[826];
	assign g7[37] = l[828] || l[830] || l[840];
	assign g7[38] = l[843] || l[851] || l[858];
	assign g7[39] = l[869];
	assign g7[40] = l[877] || l[881];
	assign g7[41] = l[901] || l[910] || l[912];
	assign g7[42] = l[926];
	assign g7[43] = l[963];
	assign g7[44] = l[975] || l[978];
	assign g7[45] = l[987];
	assign g7[46] = l[1004];
	assign g7[47] = l[1032];
	assign g7[48] = l[1038];
	assign g7[49] = l[1054] || l[1059];
	assign g7[50] = l[1068] || l[1079];
	assign g7[51] = l[1093];
	assign g7[52] = l[1097] || l[1100];
	assign g7[53] = l[1109] || l[1119] || l[1120];
	assign g7[54] = l[1141] || l[1145];
	assign g7[55] = l[1152] || l[1158];
	assign g7[56] = l[1181] || l[1184] || l[1187] || l[1191];
	assign g7[57] = l[1199];
	assign g7[58] = l[1226];
	assign g7[59] = l[1242];
	assign g7[60] = l[1248] || l[1251] || l[1256];
	assign g7[61] = l[1264];
	assign g7[62] = l[1272] || l[1274] || l[1279];
	
    always_ff @(posedge clk) begin
        g7_reg <= g7;
    end
    
	logic [2:0] v7c7l0_out [0:15];
	logic [2:0] v7c7l0 [0:15];
	assign v7c7l0_out[0] = g7_reg[0] + g7_reg[1] + g7_reg[2] + g7_reg[3];
	assign v7c7l0_out[1] = g7_reg[4] + g7_reg[5] + g7_reg[6] + g7_reg[7];
	assign v7c7l0_out[2] = g7_reg[8] + g7_reg[9] + g7_reg[10] + g7_reg[11];
	assign v7c7l0_out[3] = g7_reg[12] + g7_reg[13] + g7_reg[14] + g7_reg[15];
	assign v7c7l0_out[4] = g7_reg[16] + g7_reg[17] + g7_reg[18] + g7_reg[19];
	assign v7c7l0_out[5] = g7_reg[20] + g7_reg[21] + g7_reg[22] + g7_reg[23];
	assign v7c7l0_out[6] = g7_reg[24] + g7_reg[25] + g7_reg[26] + g7_reg[27];
	assign v7c7l0_out[7] = g7_reg[28] + g7_reg[29] + g7_reg[30] + g7_reg[31];
	assign v7c7l0_out[8] = g7_reg[32] + g7_reg[33] + g7_reg[34] + g7_reg[35];
	assign v7c7l0_out[9] = g7_reg[36] + g7_reg[37] + g7_reg[38] + g7_reg[39];
	assign v7c7l0_out[10] = g7_reg[40] + g7_reg[41] + g7_reg[42] + g7_reg[43];
	assign v7c7l0_out[11] = g7_reg[44] + g7_reg[45] + g7_reg[46] + g7_reg[47];
	assign v7c7l0_out[12] = g7_reg[48] + g7_reg[49] + g7_reg[50] + g7_reg[51];
	assign v7c7l0_out[13] = g7_reg[52] + g7_reg[53] + g7_reg[54] + g7_reg[55];
	assign v7c7l0_out[14] = g7_reg[56] + g7_reg[57] + g7_reg[58] + g7_reg[59];
	assign v7c7l0_out[15] = g7_reg[60] + g7_reg[61] + g7_reg[62];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 16; i = i + 1)
            v7c7l0[i] <= v7c7l0_out[i];
    end

	reg [3:0] v7c7l1 [0:7];
	logic [3:0] v7c7l1_out [0:7];
	assign v7c7l1_out[0] = v7c7l0[0] + v7c7l0[1];
	assign v7c7l1_out[1] = v7c7l0[2] + v7c7l0[3];
	assign v7c7l1_out[2] = v7c7l0[4] + v7c7l0[5];
	assign v7c7l1_out[3] = v7c7l0[6] + v7c7l0[7];
	assign v7c7l1_out[4] = v7c7l0[8] + v7c7l0[9];
	assign v7c7l1_out[5] = v7c7l0[10] + v7c7l0[11];
	assign v7c7l1_out[6] = v7c7l0[12] + v7c7l0[13];
	assign v7c7l1_out[7] = v7c7l0[14] + v7c7l0[15];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 8; i = i + 1)
            v7c7l1[i] <= v7c7l1_out[i];
    end

	reg [4:0] v7c7l2 [0:3];
	logic [4:0] v7c7l2_out [0:3];
	assign v7c7l2_out[0] = v7c7l1[0] + v7c7l1[1];
	assign v7c7l2_out[1] = v7c7l1[2] + v7c7l1[3];
	assign v7c7l2_out[2] = v7c7l1[4] + v7c7l1[5];
	assign v7c7l2_out[3] = v7c7l1[6] + v7c7l1[7];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 4; i = i + 1)
            v7c7l2[i] <= v7c7l2_out[i];
    end

	reg [5:0] v7c7l3 [0:1];
	logic [5:0] v7c7l3_out [0:1];
	assign v7c7l3_out[0] = v7c7l2[0] + v7c7l2[1];
	assign v7c7l3_out[1] = v7c7l2[2] + v7c7l2[3];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 2; i = i + 1)
            v7c7l3[i] <= v7c7l3_out[i];
    end

	reg [6:0] v7c7l4 [0:0];
	logic [6:0] v7c7l4_out [0:0];
	assign v7c7l4_out[0] = v7c7l3[0] + v7c7l3[1];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 1; i = i + 1)
            v7c7l4[i] <= v7c7l4_out[i];
    end

	reg [7:0] v7c7l5 [0:0];
	logic [7:0] v7c7l5_out [0:0];
	assign v7c7l5_out[0] = v7c7l4[0];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 1; i = i + 1)
            v7c7l5[i] <= v7c7l5_out[i];
    end

	assign val[7] = v7c7l5[0];
	
	// 0.125
	logic [0:77] g8;
	reg [0:77] g8_reg;
	assign g8[0] = l[35];
	assign g8[1] = l[62];
	assign g8[2] = l[77];
	assign g8[3] = l[91];
	assign g8[4] = l[96] || l[98];
	assign g8[5] = l[132];
	assign g8[6] = l[138];
	assign g8[7] = l[151];
	assign g8[8] = l[170];
	assign g8[9] = l[180];
	assign g8[10] = l[202] || l[205];
	assign g8[11] = l[213];
	assign g8[12] = l[228];
	assign g8[13] = l[241] || l[253];
	assign g8[14] = l[262] || l[263];
	assign g8[15] = l[272] || l[278] || l[279];
	assign g8[16] = l[286];
	assign g8[17] = l[297] || l[310];
	assign g8[18] = l[316];
	assign g8[19] = l[325] || l[330] || l[334] || l[338];
	assign g8[20] = l[341] || l[349];
	assign g8[21] = l[358];
	assign g8[22] = l[370] || l[381];
	assign g8[23] = l[392];
	assign g8[24] = l[402];
	assign g8[25] = l[415] || l[428];
	assign g8[26] = l[433];
	assign g8[27] = l[448];
	assign g8[28] = l[451] || l[452] || l[457];
	assign g8[29] = l[467] || l[470] || l[473] || l[477];
	assign g8[30] = l[480] || l[495];
	assign g8[31] = l[518] || l[522] || l[524];
	assign g8[32] = l[545] || l[553];
	assign g8[33] = l[557] || l[559];
	assign g8[34] = l[580] || l[593];
	assign g8[35] = l[595] || l[601] || l[606] || l[608];
	assign g8[36] = l[613];
	assign g8[37] = l[622] || l[631];
	assign g8[38] = l[637] || l[645] || l[647];
	assign g8[39] = l[655];
	assign g8[40] = l[663];
	assign g8[41] = l[673] || l[678] || l[682];
	assign g8[42] = l[685] || l[688] || l[694] || l[695] || l[698];
	assign g8[43] = l[701] || l[706] || l[707] || l[713];
	assign g8[44] = l[754] || l[756];
	assign g8[45] = l[780] || l[781] || l[785] || l[787] || l[791];
	assign g8[46] = l[808];
	assign g8[47] = l[816] || l[818];
	assign g8[48] = l[832] || l[838];
	assign g8[49] = l[848];
	assign g8[50] = l[863];
	assign g8[51] = l[871] || l[874];
	assign g8[52] = l[883];
	assign g8[53] = l[887] || l[893];
	assign g8[54] = l[902] || l[905] || l[906] || l[914];
	assign g8[55] = l[924] || l[928] || l[930];
	assign g8[56] = l[937];
	assign g8[57] = l[954];
	assign g8[58] = l[969];
	assign g8[59] = l[994];
	assign g8[60] = l[996];
	assign g8[61] = l[1008];
	assign g8[62] = l[1017];
	assign g8[63] = l[1035];
	assign g8[64] = l[1061];
	assign g8[65] = l[1070] || l[1071];
	assign g8[66] = l[1084];
	assign g8[67] = l[1115];
	assign g8[68] = l[1135];
	assign g8[69] = l[1142];
	assign g8[70] = l[1150];
	assign g8[71] = l[1167];
	assign g8[72] = l[1172] || l[1177];
	assign g8[73] = l[1185] || l[1192];
	assign g8[74] = l[1195] || l[1201] || l[1202] || l[1205] || l[1208];
	assign g8[75] = l[1222];
	assign g8[76] = l[1228] || l[1235];
	assign g8[77] = l[1250];
	
    always_ff @(posedge clk) begin
        g8_reg <= g8;
    end
    
	logic [2:0] v8c7l0_out [0:19];
	logic [2:0] v8c7l0 [0:19];
	assign v8c7l0_out[0] = g8_reg[0] + g8_reg[1] + g8_reg[2] + g8_reg[3];
	assign v8c7l0_out[1] = g8_reg[4] + g8_reg[5] + g8_reg[6] + g8_reg[7];
	assign v8c7l0_out[2] = g8_reg[8] + g8_reg[9] + g8_reg[10] + g8_reg[11];
	assign v8c7l0_out[3] = g8_reg[12] + g8_reg[13] + g8_reg[14] + g8_reg[15];
	assign v8c7l0_out[4] = g8_reg[16] + g8_reg[17] + g8_reg[18] + g8_reg[19];
	assign v8c7l0_out[5] = g8_reg[20] + g8_reg[21] + g8_reg[22] + g8_reg[23];
	assign v8c7l0_out[6] = g8_reg[24] + g8_reg[25] + g8_reg[26] + g8_reg[27];
	assign v8c7l0_out[7] = g8_reg[28] + g8_reg[29] + g8_reg[30] + g8_reg[31];
	assign v8c7l0_out[8] = g8_reg[32] + g8_reg[33] + g8_reg[34] + g8_reg[35];
	assign v8c7l0_out[9] = g8_reg[36] + g8_reg[37] + g8_reg[38] + g8_reg[39];
	assign v8c7l0_out[10] = g8_reg[40] + g8_reg[41] + g8_reg[42] + g8_reg[43];
	assign v8c7l0_out[11] = g8_reg[44] + g8_reg[45] + g8_reg[46] + g8_reg[47];
	assign v8c7l0_out[12] = g8_reg[48] + g8_reg[49] + g8_reg[50] + g8_reg[51];
	assign v8c7l0_out[13] = g8_reg[52] + g8_reg[53] + g8_reg[54] + g8_reg[55];
	assign v8c7l0_out[14] = g8_reg[56] + g8_reg[57] + g8_reg[58] + g8_reg[59];
	assign v8c7l0_out[15] = g8_reg[60] + g8_reg[61] + g8_reg[62] + g8_reg[63];
	assign v8c7l0_out[16] = g8_reg[64] + g8_reg[65] + g8_reg[66] + g8_reg[67];
	assign v8c7l0_out[17] = g8_reg[68] + g8_reg[69] + g8_reg[70] + g8_reg[71];
	assign v8c7l0_out[18] = g8_reg[72] + g8_reg[73] + g8_reg[74] + g8_reg[75];
	assign v8c7l0_out[19] = g8_reg[76] + g8_reg[77];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 20; i = i + 1)
            v8c7l0[i] <= v8c7l0_out[i];
    end

	reg [3:0] v8c7l1 [0:9];
	logic [3:0] v8c7l1_out [0:9];
	assign v8c7l1_out[0] = v8c7l0[0] + v8c7l0[1];
	assign v8c7l1_out[1] = v8c7l0[2] + v8c7l0[3];
	assign v8c7l1_out[2] = v8c7l0[4] + v8c7l0[5];
	assign v8c7l1_out[3] = v8c7l0[6] + v8c7l0[7];
	assign v8c7l1_out[4] = v8c7l0[8] + v8c7l0[9];
	assign v8c7l1_out[5] = v8c7l0[10] + v8c7l0[11];
	assign v8c7l1_out[6] = v8c7l0[12] + v8c7l0[13];
	assign v8c7l1_out[7] = v8c7l0[14] + v8c7l0[15];
	assign v8c7l1_out[8] = v8c7l0[16] + v8c7l0[17];
	assign v8c7l1_out[9] = v8c7l0[18] + v8c7l0[19];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 10; i = i + 1)
            v8c7l1[i] <= v8c7l1_out[i];
    end

	reg [4:0] v8c7l2 [0:4];
	logic [4:0] v8c7l2_out [0:4];
	assign v8c7l2_out[0] = v8c7l1[0] + v8c7l1[1];
	assign v8c7l2_out[1] = v8c7l1[2] + v8c7l1[3];
	assign v8c7l2_out[2] = v8c7l1[4] + v8c7l1[5];
	assign v8c7l2_out[3] = v8c7l1[6] + v8c7l1[7];
	assign v8c7l2_out[4] = v8c7l1[8] + v8c7l1[9];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 5; i = i + 1)
            v8c7l2[i] <= v8c7l2_out[i];
    end

	reg [5:0] v8c7l3 [0:2];
	logic [5:0] v8c7l3_out [0:2];
	assign v8c7l3_out[0] = v8c7l2[0] + v8c7l2[1];
	assign v8c7l3_out[1] = v8c7l2[2] + v8c7l2[3];
	assign v8c7l3_out[2] = v8c7l2[4];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 3; i = i + 1)
            v8c7l3[i] <= v8c7l3_out[i];
    end

	reg [6:0] v8c7l4 [0:1];
	logic [6:0] v8c7l4_out [0:1];
	assign v8c7l4_out[0] = v8c7l3[0] + v8c7l3[1];
	assign v8c7l4_out[1] = v8c7l3[2];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 2; i = i + 1)
            v8c7l4[i] <= v8c7l4_out[i];
    end

	reg [7:0] v8c7l5 [0:0];
	logic [7:0] v8c7l5_out [0:0];
	assign v8c7l5_out[0] = v8c7l4[0] + v8c7l4[1];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 1; i = i + 1)
            v8c7l5[i] <= v8c7l5_out[i];
    end

	assign val[8] = v8c7l5[0];
	
	// 0.25
	logic [0:55] g9;
	reg [0:55] g9_reg;
	assign g9[0] = l[22];
	assign g9[1] = l[32] || l[41] || l[46];
	assign g9[2] = l[52];
	assign g9[3] = l[64] || l[70] || l[75];
	assign g9[4] = l[82];
	assign g9[5] = l[93] || l[106];
	assign g9[6] = l[108] || l[114];
	assign g9[7] = l[134];
	assign g9[8] = l[141] || l[149];
	assign g9[9] = l[160];
	assign g9[10] = l[167];
	assign g9[11] = l[193];
	assign g9[12] = l[206] || l[209];
	assign g9[13] = l[217] || l[221] || l[223];
	assign g9[14] = l[231] || l[233] || l[235] || l[238];
	assign g9[15] = l[246];
	assign g9[16] = l[260];
	assign g9[17] = l[269];
	assign g9[18] = l[289] || l[293] || l[295];
	assign g9[19] = l[326];
	assign g9[20] = l[353];
	assign g9[21] = l[375];
	assign g9[22] = l[422];
	assign g9[23] = l[447];
	assign g9[24] = l[463];
	assign g9[25] = l[486] || l[491];
	assign g9[26] = l[508];
	assign g9[27] = l[523];
	assign g9[28] = l[564];
	assign g9[29] = l[574];
	assign g9[30] = l[585] || l[590];
	assign g9[31] = l[630];
	assign g9[32] = l[680];
	assign g9[33] = l[704];
	assign g9[34] = l[732];
	assign g9[35] = l[740];
	assign g9[36] = l[759];
	assign g9[37] = l[849];
	assign g9[38] = l[865];
	assign g9[39] = l[884];
	assign g9[40] = l[899];
	assign g9[41] = l[921];
	assign g9[42] = l[941];
	assign g9[43] = l[949];
	assign g9[44] = l[971];
	assign g9[45] = l[1002];
	assign g9[46] = l[1036];
	assign g9[47] = l[1048];
	assign g9[48] = l[1089];
	assign g9[49] = l[1118];
	assign g9[50] = l[1124];
	assign g9[51] = l[1146];
	assign g9[52] = l[1176];
	assign g9[53] = l[1229] || l[1237];
	assign g9[54] = l[1244];
	assign g9[55] = l[1265];
	
    always_ff @(posedge clk) begin
        g9_reg <= g9;
    end
    
	logic [2:0] v9c7l0_out [0:13];
	logic [2:0] v9c7l0 [0:13];
	assign v9c7l0_out[0] = g9_reg[0] + g9_reg[1] + g9_reg[2] + g9_reg[3];
	assign v9c7l0_out[1] = g9_reg[4] + g9_reg[5] + g9_reg[6] + g9_reg[7];
	assign v9c7l0_out[2] = g9_reg[8] + g9_reg[9] + g9_reg[10] + g9_reg[11];
	assign v9c7l0_out[3] = g9_reg[12] + g9_reg[13] + g9_reg[14] + g9_reg[15];
	assign v9c7l0_out[4] = g9_reg[16] + g9_reg[17] + g9_reg[18] + g9_reg[19];
	assign v9c7l0_out[5] = g9_reg[20] + g9_reg[21] + g9_reg[22] + g9_reg[23];
	assign v9c7l0_out[6] = g9_reg[24] + g9_reg[25] + g9_reg[26] + g9_reg[27];
	assign v9c7l0_out[7] = g9_reg[28] + g9_reg[29] + g9_reg[30] + g9_reg[31];
	assign v9c7l0_out[8] = g9_reg[32] + g9_reg[33] + g9_reg[34] + g9_reg[35];
	assign v9c7l0_out[9] = g9_reg[36] + g9_reg[37] + g9_reg[38] + g9_reg[39];
	assign v9c7l0_out[10] = g9_reg[40] + g9_reg[41] + g9_reg[42] + g9_reg[43];
	assign v9c7l0_out[11] = g9_reg[44] + g9_reg[45] + g9_reg[46] + g9_reg[47];
	assign v9c7l0_out[12] = g9_reg[48] + g9_reg[49] + g9_reg[50] + g9_reg[51];
	assign v9c7l0_out[13] = g9_reg[52] + g9_reg[53] + g9_reg[54] + g9_reg[55];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 14; i = i + 1)
            v9c7l0[i] <= v9c7l0_out[i];
    end

	reg [3:0] v9c7l1 [0:6];
	logic [3:0] v9c7l1_out [0:6];
	assign v9c7l1_out[0] = v9c7l0[0] + v9c7l0[1];
	assign v9c7l1_out[1] = v9c7l0[2] + v9c7l0[3];
	assign v9c7l1_out[2] = v9c7l0[4] + v9c7l0[5];
	assign v9c7l1_out[3] = v9c7l0[6] + v9c7l0[7];
	assign v9c7l1_out[4] = v9c7l0[8] + v9c7l0[9];
	assign v9c7l1_out[5] = v9c7l0[10] + v9c7l0[11];
	assign v9c7l1_out[6] = v9c7l0[12] + v9c7l0[13];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 7; i = i + 1)
            v9c7l1[i] <= v9c7l1_out[i];
    end

	reg [4:0] v9c7l2 [0:3];
	logic [4:0] v9c7l2_out [0:3];
	assign v9c7l2_out[0] = v9c7l1[0] + v9c7l1[1];
	assign v9c7l2_out[1] = v9c7l1[2] + v9c7l1[3];
	assign v9c7l2_out[2] = v9c7l1[4] + v9c7l1[5];
	assign v9c7l2_out[3] = v9c7l1[6];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 4; i = i + 1)
            v9c7l2[i] <= v9c7l2_out[i];
    end

	reg [5:0] v9c7l3 [0:1];
	logic [5:0] v9c7l3_out [0:1];
	assign v9c7l3_out[0] = v9c7l2[0] + v9c7l2[1];
	assign v9c7l3_out[1] = v9c7l2[2] + v9c7l2[3];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 2; i = i + 1)
            v9c7l3[i] <= v9c7l3_out[i];
    end

	reg [6:0] v9c7l4 [0:0];
	logic [6:0] v9c7l4_out [0:0];
	assign v9c7l4_out[0] = v9c7l3[0] + v9c7l3[1];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 1; i = i + 1)
            v9c7l4[i] <= v9c7l4_out[i];
    end

	reg [7:0] v9c7l5 [0:0];
	logic [7:0] v9c7l5_out [0:0];
	assign v9c7l5_out[0] = v9c7l4[0];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 1; i = i + 1)
            v9c7l5[i] <= v9c7l5_out[i];
    end

	assign val[9] = v9c7l5[0];
	
	// 0.5
	logic [0:14] g10;
	reg [0:14] g10_reg;
	assign g10[0] = l[1] || l[9];
	assign g10[1] = l[16] || l[19] || l[27] || l[29];
	assign g10[2] = l[43];
	assign g10[3] = l[59];
	assign g10[4] = l[79];
	assign g10[5] = l[119];
	assign g10[6] = l[127] || l[128] || l[137];
	assign g10[7] = l[144];
	assign g10[8] = l[177];
	assign g10[9] = l[234];
	assign g10[10] = l[309];
	assign g10[11] = l[356];
	assign g10[12] = l[717];
	assign g10[13] = l[742];
	assign g10[14] = l[757];
	
    always_ff @(posedge clk) begin
        g10_reg <= g10;
    end
    
	logic [2:0] v10c7l0_out [0:3];
	logic [2:0] v10c7l0 [0:3];
	assign v10c7l0_out[0] = g10_reg[0] + g10_reg[1] + g10_reg[2] + g10_reg[3];
	assign v10c7l0_out[1] = g10_reg[4] + g10_reg[5] + g10_reg[6] + g10_reg[7];
	assign v10c7l0_out[2] = g10_reg[8] + g10_reg[9] + g10_reg[10] + g10_reg[11];
	assign v10c7l0_out[3] = g10_reg[12] + g10_reg[13] + g10_reg[14];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 4; i = i + 1)
            v10c7l0[i] <= v10c7l0_out[i];
    end

	reg [3:0] v10c7l1 [0:1];
	logic [3:0] v10c7l1_out [0:1];
	assign v10c7l1_out[0] = v10c7l0[0] + v10c7l0[1];
	assign v10c7l1_out[1] = v10c7l0[2] + v10c7l0[3];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 2; i = i + 1)
            v10c7l1[i] <= v10c7l1_out[i];
    end

	reg [4:0] v10c7l2 [0:0];
	logic [4:0] v10c7l2_out [0:0];
	assign v10c7l2_out[0] = v10c7l1[0] + v10c7l1[1];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 1; i = i + 1)
            v10c7l2[i] <= v10c7l2_out[i];
    end

	reg [5:0] v10c7l3 [0:0];
	logic [5:0] v10c7l3_out [0:0];
	assign v10c7l3_out[0] = v10c7l2[0];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 1; i = i + 1)
            v10c7l3[i] <= v10c7l3_out[i];
    end

	reg [6:0] v10c7l4 [0:0];
	logic [6:0] v10c7l4_out [0:0];
	assign v10c7l4_out[0] = v10c7l3[0];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 1; i = i + 1)
            v10c7l4[i] <= v10c7l4_out[i];
    end

	reg [7:0] v10c7l5 [0:0];
	logic [7:0] v10c7l5_out [0:0];
	assign v10c7l5_out[0] = v10c7l4[0];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 1; i = i + 1)
            v10c7l5[i] <= v10c7l5_out[i];
    end

	assign val[10] = v10c7l5[0];
	
	// 1.0
	logic [0:1] g11;
	reg [0:1] g11_reg;
	assign g11[0] = l[2] || l[7] || l[11] || l[14];
	assign g11[1] = l[105];
	
    always_ff @(posedge clk) begin
        g11_reg <= g11;
    end
    
	logic [2:0] v11c7l0_out [0:0];
	logic [2:0] v11c7l0 [0:0];
	assign v11c7l0_out[0] = g11_reg[0] + g11_reg[1];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 1; i = i + 1)
            v11c7l0[i] <= v11c7l0_out[i];
    end

	reg [3:0] v11c7l1 [0:0];
	logic [3:0] v11c7l1_out [0:0];
	assign v11c7l1_out[0] = v11c7l0[0];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 1; i = i + 1)
            v11c7l1[i] <= v11c7l1_out[i];
    end

	reg [4:0] v11c7l2 [0:0];
	logic [4:0] v11c7l2_out [0:0];
	assign v11c7l2_out[0] = v11c7l1[0];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 1; i = i + 1)
            v11c7l2[i] <= v11c7l2_out[i];
    end

	reg [5:0] v11c7l3 [0:0];
	logic [5:0] v11c7l3_out [0:0];
	assign v11c7l3_out[0] = v11c7l2[0];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 1; i = i + 1)
            v11c7l3[i] <= v11c7l3_out[i];
    end

	reg [6:0] v11c7l4 [0:0];
	logic [6:0] v11c7l4_out [0:0];
	assign v11c7l4_out[0] = v11c7l3[0];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 1; i = i + 1)
            v11c7l4[i] <= v11c7l4_out[i];
    end

	reg [7:0] v11c7l5 [0:0];
	logic [7:0] v11c7l5_out [0:0];
	assign v11c7l5_out[0] = v11c7l4[0];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 1; i = i + 1)
            v11c7l5[i] <= v11c7l5_out[i];
    end

	assign val[11] = v11c7l5[0];
	
	// 2.0
	logic [0:0] g12;
	reg [0:0] g12_reg;
	assign g12[0] = l[4] || l[8];
	
    always_ff @(posedge clk) begin
        g12_reg <= g12;
    end
    
	logic [2:0] v12c7l0_out [0:0];
	logic [2:0] v12c7l0 [0:0];
	assign v12c7l0_out[0] = g12_reg[0];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 1; i = i + 1)
            v12c7l0[i] <= v12c7l0_out[i];
    end

	reg [3:0] v12c7l1 [0:0];
	logic [3:0] v12c7l1_out [0:0];
	assign v12c7l1_out[0] = v12c7l0[0];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 1; i = i + 1)
            v12c7l1[i] <= v12c7l1_out[i];
    end

	reg [4:0] v12c7l2 [0:0];
	logic [4:0] v12c7l2_out [0:0];
	assign v12c7l2_out[0] = v12c7l1[0];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 1; i = i + 1)
            v12c7l2[i] <= v12c7l2_out[i];
    end

	reg [5:0] v12c7l3 [0:0];
	logic [5:0] v12c7l3_out [0:0];
	assign v12c7l3_out[0] = v12c7l2[0];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 1; i = i + 1)
            v12c7l3[i] <= v12c7l3_out[i];
    end

	reg [6:0] v12c7l4 [0:0];
	logic [6:0] v12c7l4_out [0:0];
	assign v12c7l4_out[0] = v12c7l3[0];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 1; i = i + 1)
            v12c7l4[i] <= v12c7l4_out[i];
    end

	reg [7:0] v12c7l5 [0:0];
	logic [7:0] v12c7l5_out [0:0];
	assign v12c7l5_out[0] = v12c7l4[0];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 1; i = i + 1)
            v12c7l5[i] <= v12c7l5_out[i];
    end

	assign val[12] = v12c7l5[0];
	
endmodule


module leaf_counter_8(input logic clk, input logic [0:1497] l, output logic [7:0] val [0:12]);
    integer i;
	// -0.25
	logic [0:25] g0;
	reg [0:25] g0_reg;
	assign g0[0] = l[2];
	assign g0[1] = l[48];
	assign g0[2] = l[64];
	assign g0[3] = l[96];
	assign g0[4] = l[140];
	assign g0[5] = l[167] || l[172];
	assign g0[6] = l[206];
	assign g0[7] = l[294];
	assign g0[8] = l[366];
	assign g0[9] = l[412];
	assign g0[10] = l[429];
	assign g0[11] = l[593] || l[597];
	assign g0[12] = l[639];
	assign g0[13] = l[665] || l[668];
	assign g0[14] = l[690];
	assign g0[15] = l[727] || l[733];
	assign g0[16] = l[782];
	assign g0[17] = l[793];
	assign g0[18] = l[811];
	assign g0[19] = l[822];
	assign g0[20] = l[841];
	assign g0[21] = l[855];
	assign g0[22] = l[1077];
	assign g0[23] = l[1345];
	assign g0[24] = l[1385];
	assign g0[25] = l[1426] || l[1437];
	
    always_ff @(posedge clk) begin
        g0_reg <= g0;
    end
    
	logic [2:0] v0c8l0_out [0:6];
	logic [2:0] v0c8l0 [0:6];
	assign v0c8l0_out[0] = g0_reg[0] + g0_reg[1] + g0_reg[2] + g0_reg[3];
	assign v0c8l0_out[1] = g0_reg[4] + g0_reg[5] + g0_reg[6] + g0_reg[7];
	assign v0c8l0_out[2] = g0_reg[8] + g0_reg[9] + g0_reg[10] + g0_reg[11];
	assign v0c8l0_out[3] = g0_reg[12] + g0_reg[13] + g0_reg[14] + g0_reg[15];
	assign v0c8l0_out[4] = g0_reg[16] + g0_reg[17] + g0_reg[18] + g0_reg[19];
	assign v0c8l0_out[5] = g0_reg[20] + g0_reg[21] + g0_reg[22] + g0_reg[23];
	assign v0c8l0_out[6] = g0_reg[24] + g0_reg[25];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 7; i = i + 1)
            v0c8l0[i] <= v0c8l0_out[i];
    end

	reg [3:0] v0c8l1 [0:3];
	logic [3:0] v0c8l1_out [0:3];
	assign v0c8l1_out[0] = v0c8l0[0] + v0c8l0[1];
	assign v0c8l1_out[1] = v0c8l0[2] + v0c8l0[3];
	assign v0c8l1_out[2] = v0c8l0[4] + v0c8l0[5];
	assign v0c8l1_out[3] = v0c8l0[6];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 4; i = i + 1)
            v0c8l1[i] <= v0c8l1_out[i];
    end

	reg [4:0] v0c8l2 [0:1];
	logic [4:0] v0c8l2_out [0:1];
	assign v0c8l2_out[0] = v0c8l1[0] + v0c8l1[1];
	assign v0c8l2_out[1] = v0c8l1[2] + v0c8l1[3];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 2; i = i + 1)
            v0c8l2[i] <= v0c8l2_out[i];
    end

	reg [5:0] v0c8l3 [0:0];
	logic [5:0] v0c8l3_out [0:0];
	assign v0c8l3_out[0] = v0c8l2[0] + v0c8l2[1];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 1; i = i + 1)
            v0c8l3[i] <= v0c8l3_out[i];
    end

	reg [6:0] v0c8l4 [0:0];
	logic [6:0] v0c8l4_out [0:0];
	assign v0c8l4_out[0] = v0c8l3[0];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 1; i = i + 1)
            v0c8l4[i] <= v0c8l4_out[i];
    end

	reg [7:0] v0c8l5 [0:0];
	logic [7:0] v0c8l5_out [0:0];
	assign v0c8l5_out[0] = v0c8l4[0];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 1; i = i + 1)
            v0c8l5[i] <= v0c8l5_out[i];
    end

	assign val[0] = v0c8l5[0];
	
	// -0.125
	logic [0:97] g1;
	reg [0:97] g1_reg;
	assign g1[0] = l[0] || l[1] || l[4] || l[8];
	assign g1[1] = l[16] || l[18] || l[22] || l[24];
	assign g1[2] = l[32] || l[33] || l[34] || l[36] || l[40] || l[42] || l[44];
	assign g1[3] = l[49] || l[50] || l[54] || l[56];
	assign g1[4] = l[65] || l[66] || l[68] || l[72];
	assign g1[5] = l[80] || l[82] || l[86] || l[88];
	assign g1[6] = l[97] || l[99] || l[101] || l[104] || l[110];
	assign g1[7] = l[112] || l[117] || l[120] || l[126];
	assign g1[8] = l[132] || l[136] || l[141] || l[143];
	assign g1[9] = l[144] || l[150] || l[152];
	assign g1[10] = l[160] || l[168] || l[173] || l[174];
	assign g1[11] = l[176] || l[188] || l[191];
	assign g1[12] = l[192] || l[199] || l[204];
	assign g1[13] = l[217] || l[222];
	assign g1[14] = l[227] || l[232] || l[236];
	assign g1[15] = l[252] || l[254];
	assign g1[16] = l[258] || l[260] || l[263] || l[266] || l[268];
	assign g1[17] = l[277] || l[280] || l[284] || l[287];
	assign g1[18] = l[288] || l[292] || l[295] || l[300];
	assign g1[19] = l[316];
	assign g1[20] = l[323] || l[327] || l[331] || l[333];
	assign g1[21] = l[335];
	assign g1[22] = l[351] || l[356] || l[358] || l[359];
	assign g1[23] = l[377] || l[378];
	assign g1[24] = l[382] || l[385] || l[386];
	assign g1[25] = l[402] || l[404] || l[406];
	assign g1[26] = l[417] || l[422] || l[426] || l[428];
	assign g1[27] = l[438] || l[444];
	assign g1[28] = l[445] || l[452] || l[459];
	assign g1[29] = l[461] || l[466] || l[469] || l[475];
	assign g1[30] = l[478] || l[483] || l[485];
	assign g1[31] = l[497] || l[499] || l[505] || l[507];
	assign g1[32] = l[517] || l[519] || l[523];
	assign g1[33] = l[533] || l[538] || l[540];
	assign g1[34] = l[541] || l[544] || l[552];
	assign g1[35] = l[560] || l[570] || l[572];
	assign g1[36] = l[580];
	assign g1[37] = l[587] || l[591] || l[596] || l[600];
	assign g1[38] = l[609] || l[614];
	assign g1[39] = l[628] || l[631];
	assign g1[40] = l[638];
	assign g1[41] = l[646] || l[648] || l[653] || l[659];
	assign g1[42] = l[670];
	assign g1[43] = l[677] || l[681] || l[689];
	assign g1[44] = l[703] || l[706];
	assign g1[45] = l[707] || l[720] || l[722];
	assign g1[46] = l[730] || l[731] || l[736];
	assign g1[47] = l[737];
	assign g1[48] = l[761];
	assign g1[49] = l[774] || l[777] || l[780];
	assign g1[50] = l[786] || l[787] || l[789];
	assign g1[51] = l[795] || l[796] || l[799] || l[800];
	assign g1[52] = l[805] || l[809];
	assign g1[53] = l[819] || l[824];
	assign g1[54] = l[835] || l[840];
	assign g1[55] = l[852];
	assign g1[56] = l[861] || l[864] || l[872];
	assign g1[57] = l[885] || l[886] || l[889] || l[892] || l[896];
	assign g1[58] = l[903] || l[908];
	assign g1[59] = l[916] || l[920] || l[924];
	assign g1[60] = l[936];
	assign g1[61] = l[946];
	assign g1[62] = l[970] || l[972] || l[974];
	assign g1[63] = l[976] || l[977] || l[979] || l[984];
	assign g1[64] = l[995];
	assign g1[65] = l[1003];
	assign g1[66] = l[1027] || l[1029];
	assign g1[67] = l[1032] || l[1040] || l[1045];
	assign g1[68] = l[1046];
	assign g1[69] = l[1070];
	assign g1[70] = l[1080] || l[1082] || l[1091];
	assign g1[71] = l[1102] || l[1107];
	assign g1[72] = l[1125];
	assign g1[73] = l[1126] || l[1140];
	assign g1[74] = l[1146] || l[1151];
	assign g1[75] = l[1158] || l[1172];
	assign g1[76] = l[1191] || l[1193];
	assign g1[77] = l[1202];
	assign g1[78] = l[1212] || l[1215];
	assign g1[79] = l[1234];
	assign g1[80] = l[1244];
	assign g1[81] = l[1253] || l[1258] || l[1264];
	assign g1[82] = l[1275] || l[1276] || l[1278];
	assign g1[83] = l[1282];
	assign g1[84] = l[1299] || l[1300] || l[1304] || l[1306] || l[1310];
	assign g1[85] = l[1314] || l[1318] || l[1322];
	assign g1[86] = l[1334];
	assign g1[87] = l[1346] || l[1349];
	assign g1[88] = l[1352] || l[1364];
	assign g1[89] = l[1372] || l[1373];
	assign g1[90] = l[1393];
	assign g1[91] = l[1408];
	assign g1[92] = l[1411] || l[1416];
	assign g1[93] = l[1439];
	assign g1[94] = l[1443] || l[1451];
	assign g1[95] = l[1453];
	assign g1[96] = l[1475] || l[1479] || l[1481];
	assign g1[97] = l[1487] || l[1491];
	
    always_ff @(posedge clk) begin
        g1_reg <= g1;
    end
    
	logic [2:0] v1c8l0_out [0:24];
	logic [2:0] v1c8l0 [0:24];
	assign v1c8l0_out[0] = g1_reg[0] + g1_reg[1] + g1_reg[2] + g1_reg[3];
	assign v1c8l0_out[1] = g1_reg[4] + g1_reg[5] + g1_reg[6] + g1_reg[7];
	assign v1c8l0_out[2] = g1_reg[8] + g1_reg[9] + g1_reg[10] + g1_reg[11];
	assign v1c8l0_out[3] = g1_reg[12] + g1_reg[13] + g1_reg[14] + g1_reg[15];
	assign v1c8l0_out[4] = g1_reg[16] + g1_reg[17] + g1_reg[18] + g1_reg[19];
	assign v1c8l0_out[5] = g1_reg[20] + g1_reg[21] + g1_reg[22] + g1_reg[23];
	assign v1c8l0_out[6] = g1_reg[24] + g1_reg[25] + g1_reg[26] + g1_reg[27];
	assign v1c8l0_out[7] = g1_reg[28] + g1_reg[29] + g1_reg[30] + g1_reg[31];
	assign v1c8l0_out[8] = g1_reg[32] + g1_reg[33] + g1_reg[34] + g1_reg[35];
	assign v1c8l0_out[9] = g1_reg[36] + g1_reg[37] + g1_reg[38] + g1_reg[39];
	assign v1c8l0_out[10] = g1_reg[40] + g1_reg[41] + g1_reg[42] + g1_reg[43];
	assign v1c8l0_out[11] = g1_reg[44] + g1_reg[45] + g1_reg[46] + g1_reg[47];
	assign v1c8l0_out[12] = g1_reg[48] + g1_reg[49] + g1_reg[50] + g1_reg[51];
	assign v1c8l0_out[13] = g1_reg[52] + g1_reg[53] + g1_reg[54] + g1_reg[55];
	assign v1c8l0_out[14] = g1_reg[56] + g1_reg[57] + g1_reg[58] + g1_reg[59];
	assign v1c8l0_out[15] = g1_reg[60] + g1_reg[61] + g1_reg[62] + g1_reg[63];
	assign v1c8l0_out[16] = g1_reg[64] + g1_reg[65] + g1_reg[66] + g1_reg[67];
	assign v1c8l0_out[17] = g1_reg[68] + g1_reg[69] + g1_reg[70] + g1_reg[71];
	assign v1c8l0_out[18] = g1_reg[72] + g1_reg[73] + g1_reg[74] + g1_reg[75];
	assign v1c8l0_out[19] = g1_reg[76] + g1_reg[77] + g1_reg[78] + g1_reg[79];
	assign v1c8l0_out[20] = g1_reg[80] + g1_reg[81] + g1_reg[82] + g1_reg[83];
	assign v1c8l0_out[21] = g1_reg[84] + g1_reg[85] + g1_reg[86] + g1_reg[87];
	assign v1c8l0_out[22] = g1_reg[88] + g1_reg[89] + g1_reg[90] + g1_reg[91];
	assign v1c8l0_out[23] = g1_reg[92] + g1_reg[93] + g1_reg[94] + g1_reg[95];
	assign v1c8l0_out[24] = g1_reg[96] + g1_reg[97];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 25; i = i + 1)
            v1c8l0[i] <= v1c8l0_out[i];
    end

	reg [3:0] v1c8l1 [0:12];
	logic [3:0] v1c8l1_out [0:12];
	assign v1c8l1_out[0] = v1c8l0[0] + v1c8l0[1];
	assign v1c8l1_out[1] = v1c8l0[2] + v1c8l0[3];
	assign v1c8l1_out[2] = v1c8l0[4] + v1c8l0[5];
	assign v1c8l1_out[3] = v1c8l0[6] + v1c8l0[7];
	assign v1c8l1_out[4] = v1c8l0[8] + v1c8l0[9];
	assign v1c8l1_out[5] = v1c8l0[10] + v1c8l0[11];
	assign v1c8l1_out[6] = v1c8l0[12] + v1c8l0[13];
	assign v1c8l1_out[7] = v1c8l0[14] + v1c8l0[15];
	assign v1c8l1_out[8] = v1c8l0[16] + v1c8l0[17];
	assign v1c8l1_out[9] = v1c8l0[18] + v1c8l0[19];
	assign v1c8l1_out[10] = v1c8l0[20] + v1c8l0[21];
	assign v1c8l1_out[11] = v1c8l0[22] + v1c8l0[23];
	assign v1c8l1_out[12] = v1c8l0[24];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 13; i = i + 1)
            v1c8l1[i] <= v1c8l1_out[i];
    end

	reg [4:0] v1c8l2 [0:6];
	logic [4:0] v1c8l2_out [0:6];
	assign v1c8l2_out[0] = v1c8l1[0] + v1c8l1[1];
	assign v1c8l2_out[1] = v1c8l1[2] + v1c8l1[3];
	assign v1c8l2_out[2] = v1c8l1[4] + v1c8l1[5];
	assign v1c8l2_out[3] = v1c8l1[6] + v1c8l1[7];
	assign v1c8l2_out[4] = v1c8l1[8] + v1c8l1[9];
	assign v1c8l2_out[5] = v1c8l1[10] + v1c8l1[11];
	assign v1c8l2_out[6] = v1c8l1[12];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 7; i = i + 1)
            v1c8l2[i] <= v1c8l2_out[i];
    end

	reg [5:0] v1c8l3 [0:3];
	logic [5:0] v1c8l3_out [0:3];
	assign v1c8l3_out[0] = v1c8l2[0] + v1c8l2[1];
	assign v1c8l3_out[1] = v1c8l2[2] + v1c8l2[3];
	assign v1c8l3_out[2] = v1c8l2[4] + v1c8l2[5];
	assign v1c8l3_out[3] = v1c8l2[6];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 4; i = i + 1)
            v1c8l3[i] <= v1c8l3_out[i];
    end

	reg [6:0] v1c8l4 [0:1];
	logic [6:0] v1c8l4_out [0:1];
	assign v1c8l4_out[0] = v1c8l3[0] + v1c8l3[1];
	assign v1c8l4_out[1] = v1c8l3[2] + v1c8l3[3];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 2; i = i + 1)
            v1c8l4[i] <= v1c8l4_out[i];
    end

	reg [7:0] v1c8l5 [0:0];
	logic [7:0] v1c8l5_out [0:0];
	assign v1c8l5_out[0] = v1c8l4[0] + v1c8l4[1];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 1; i = i + 1)
            v1c8l5[i] <= v1c8l5_out[i];
    end

	assign val[1] = v1c8l5[0];
	
	// -0.0625
	logic [0:88] g2;
	reg [0:88] g2_reg;
	assign g2[0] = l[13];
	assign g2[1] = l[26];
	assign g2[2] = l[52] || l[59] || l[62];
	assign g2[3] = l[76];
	assign g2[4] = l[85] || l[91] || l[94];
	assign g2[5] = l[128] || l[134];
	assign g2[6] = l[166];
	assign g2[7] = l[178] || l[184];
	assign g2[8] = l[195] || l[196];
	assign g2[9] = l[208] || l[212] || l[216];
	assign g2[10] = l[224] || l[230] || l[238];
	assign g2[11] = l[240] || l[242] || l[248];
	assign g2[12] = l[265];
	assign g2[13] = l[275];
	assign g2[14] = l[290] || l[298];
	assign g2[15] = l[304] || l[313];
	assign g2[16] = l[322] || l[329];
	assign g2[17] = l[341] || l[343] || l[347];
	assign g2[18] = l[367] || l[373];
	assign g2[19] = l[390] || l[396];
	assign g2[20] = l[399] || l[403] || l[409];
	assign g2[21] = l[418] || l[424];
	assign g2[22] = l[430] || l[432] || l[436];
	assign g2[23] = l[468];
	assign g2[24] = l[501] || l[506];
	assign g2[25] = l[515];
	assign g2[26] = l[525] || l[537];
	assign g2[27] = l[547] || l[555];
	assign g2[28] = l[557];
	assign g2[29] = l[581] || l[582];
	assign g2[30] = l[601] || l[611];
	assign g2[31] = l[621] || l[629] || l[632];
	assign g2[32] = l[640] || l[641];
	assign g2[33] = l[649] || l[656];
	assign g2[34] = l[671] || l[674];
	assign g2[35] = l[688];
	assign g2[36] = l[693] || l[696] || l[699];
	assign g2[37] = l[715];
	assign g2[38] = l[728] || l[734];
	assign g2[39] = l[743] || l[748] || l[752];
	assign g2[40] = l[755] || l[757] || l[768];
	assign g2[41] = l[781] || l[784];
	assign g2[42] = l[801];
	assign g2[43] = l[815] || l[823];
	assign g2[44] = l[827] || l[842];
	assign g2[45] = l[843] || l[850] || l[856] || l[857];
	assign g2[46] = l[873] || l[879];
	assign g2[47] = l[890];
	assign g2[48] = l[898];
	assign g2[49] = l[912] || l[927];
	assign g2[50] = l[929] || l[940];
	assign g2[51] = l[953] || l[955];
	assign g2[52] = l[959] || l[962];
	assign g2[53] = l[980];
	assign g2[54] = l[990] || l[992];
	assign g2[55] = l[1002] || l[1008];
	assign g2[56] = l[1015] || l[1020] || l[1022] || l[1026];
	assign g2[57] = l[1035] || l[1043];
	assign g2[58] = l[1049] || l[1050] || l[1053] || l[1057] || l[1060];
	assign g2[59] = l[1062] || l[1065] || l[1069] || l[1073];
	assign g2[60] = l[1078] || l[1090];
	assign g2[61] = l[1098] || l[1109];
	assign g2[62] = l[1111] || l[1116] || l[1121] || l[1123];
	assign g2[63] = l[1133] || l[1135];
	assign g2[64] = l[1143] || l[1153];
	assign g2[65] = l[1163] || l[1164] || l[1169];
	assign g2[66] = l[1174] || l[1179];
	assign g2[67] = l[1189];
	assign g2[68] = l[1198];
	assign g2[69] = l[1219] || l[1221];
	assign g2[70] = l[1232];
	assign g2[71] = l[1240] || l[1242] || l[1250];
	assign g2[72] = l[1254] || l[1260] || l[1262];
	assign g2[73] = l[1266] || l[1281];
	assign g2[74] = l[1284] || l[1288] || l[1291];
	assign g2[75] = l[1303];
	assign g2[76] = l[1324];
	assign g2[77] = l[1326] || l[1331] || l[1333] || l[1335];
	assign g2[78] = l[1337] || l[1340];
	assign g2[79] = l[1360] || l[1367];
	assign g2[80] = l[1374] || l[1375] || l[1378];
	assign g2[81] = l[1383] || l[1388];
	assign g2[82] = l[1396] || l[1402] || l[1405];
	assign g2[83] = l[1419] || l[1423];
	assign g2[84] = l[1430] || l[1436];
	assign g2[85] = l[1447] || l[1448];
	assign g2[86] = l[1460] || l[1468];
	assign g2[87] = l[1469] || l[1473];
	assign g2[88] = l[1495] || l[1497];
	
    always_ff @(posedge clk) begin
        g2_reg <= g2;
    end
    
	logic [2:0] v2c8l0_out [0:22];
	logic [2:0] v2c8l0 [0:22];
	assign v2c8l0_out[0] = g2_reg[0] + g2_reg[1] + g2_reg[2] + g2_reg[3];
	assign v2c8l0_out[1] = g2_reg[4] + g2_reg[5] + g2_reg[6] + g2_reg[7];
	assign v2c8l0_out[2] = g2_reg[8] + g2_reg[9] + g2_reg[10] + g2_reg[11];
	assign v2c8l0_out[3] = g2_reg[12] + g2_reg[13] + g2_reg[14] + g2_reg[15];
	assign v2c8l0_out[4] = g2_reg[16] + g2_reg[17] + g2_reg[18] + g2_reg[19];
	assign v2c8l0_out[5] = g2_reg[20] + g2_reg[21] + g2_reg[22] + g2_reg[23];
	assign v2c8l0_out[6] = g2_reg[24] + g2_reg[25] + g2_reg[26] + g2_reg[27];
	assign v2c8l0_out[7] = g2_reg[28] + g2_reg[29] + g2_reg[30] + g2_reg[31];
	assign v2c8l0_out[8] = g2_reg[32] + g2_reg[33] + g2_reg[34] + g2_reg[35];
	assign v2c8l0_out[9] = g2_reg[36] + g2_reg[37] + g2_reg[38] + g2_reg[39];
	assign v2c8l0_out[10] = g2_reg[40] + g2_reg[41] + g2_reg[42] + g2_reg[43];
	assign v2c8l0_out[11] = g2_reg[44] + g2_reg[45] + g2_reg[46] + g2_reg[47];
	assign v2c8l0_out[12] = g2_reg[48] + g2_reg[49] + g2_reg[50] + g2_reg[51];
	assign v2c8l0_out[13] = g2_reg[52] + g2_reg[53] + g2_reg[54] + g2_reg[55];
	assign v2c8l0_out[14] = g2_reg[56] + g2_reg[57] + g2_reg[58] + g2_reg[59];
	assign v2c8l0_out[15] = g2_reg[60] + g2_reg[61] + g2_reg[62] + g2_reg[63];
	assign v2c8l0_out[16] = g2_reg[64] + g2_reg[65] + g2_reg[66] + g2_reg[67];
	assign v2c8l0_out[17] = g2_reg[68] + g2_reg[69] + g2_reg[70] + g2_reg[71];
	assign v2c8l0_out[18] = g2_reg[72] + g2_reg[73] + g2_reg[74] + g2_reg[75];
	assign v2c8l0_out[19] = g2_reg[76] + g2_reg[77] + g2_reg[78] + g2_reg[79];
	assign v2c8l0_out[20] = g2_reg[80] + g2_reg[81] + g2_reg[82] + g2_reg[83];
	assign v2c8l0_out[21] = g2_reg[84] + g2_reg[85] + g2_reg[86] + g2_reg[87];
	assign v2c8l0_out[22] = g2_reg[88];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 23; i = i + 1)
            v2c8l0[i] <= v2c8l0_out[i];
    end

	reg [3:0] v2c8l1 [0:11];
	logic [3:0] v2c8l1_out [0:11];
	assign v2c8l1_out[0] = v2c8l0[0] + v2c8l0[1];
	assign v2c8l1_out[1] = v2c8l0[2] + v2c8l0[3];
	assign v2c8l1_out[2] = v2c8l0[4] + v2c8l0[5];
	assign v2c8l1_out[3] = v2c8l0[6] + v2c8l0[7];
	assign v2c8l1_out[4] = v2c8l0[8] + v2c8l0[9];
	assign v2c8l1_out[5] = v2c8l0[10] + v2c8l0[11];
	assign v2c8l1_out[6] = v2c8l0[12] + v2c8l0[13];
	assign v2c8l1_out[7] = v2c8l0[14] + v2c8l0[15];
	assign v2c8l1_out[8] = v2c8l0[16] + v2c8l0[17];
	assign v2c8l1_out[9] = v2c8l0[18] + v2c8l0[19];
	assign v2c8l1_out[10] = v2c8l0[20] + v2c8l0[21];
	assign v2c8l1_out[11] = v2c8l0[22];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 12; i = i + 1)
            v2c8l1[i] <= v2c8l1_out[i];
    end

	reg [4:0] v2c8l2 [0:5];
	logic [4:0] v2c8l2_out [0:5];
	assign v2c8l2_out[0] = v2c8l1[0] + v2c8l1[1];
	assign v2c8l2_out[1] = v2c8l1[2] + v2c8l1[3];
	assign v2c8l2_out[2] = v2c8l1[4] + v2c8l1[5];
	assign v2c8l2_out[3] = v2c8l1[6] + v2c8l1[7];
	assign v2c8l2_out[4] = v2c8l1[8] + v2c8l1[9];
	assign v2c8l2_out[5] = v2c8l1[10] + v2c8l1[11];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 6; i = i + 1)
            v2c8l2[i] <= v2c8l2_out[i];
    end

	reg [5:0] v2c8l3 [0:2];
	logic [5:0] v2c8l3_out [0:2];
	assign v2c8l3_out[0] = v2c8l2[0] + v2c8l2[1];
	assign v2c8l3_out[1] = v2c8l2[2] + v2c8l2[3];
	assign v2c8l3_out[2] = v2c8l2[4] + v2c8l2[5];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 3; i = i + 1)
            v2c8l3[i] <= v2c8l3_out[i];
    end

	reg [6:0] v2c8l4 [0:1];
	logic [6:0] v2c8l4_out [0:1];
	assign v2c8l4_out[0] = v2c8l3[0] + v2c8l3[1];
	assign v2c8l4_out[1] = v2c8l3[2];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 2; i = i + 1)
            v2c8l4[i] <= v2c8l4_out[i];
    end

	reg [7:0] v2c8l5 [0:0];
	logic [7:0] v2c8l5_out [0:0];
	assign v2c8l5_out[0] = v2c8l4[0] + v2c8l4[1];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 1; i = i + 1)
            v2c8l5[i] <= v2c8l5_out[i];
    end

	assign val[2] = v2c8l5[0];
	
	// -0.03125
	logic [0:71] g3;
	reg [0:71] g3_reg;
	assign g3[0] = l[17];
	assign g3[1] = l[69] || l[71];
	assign g3[2] = l[102];
	assign g3[3] = l[130];
	assign g3[4] = l[149] || l[154];
	assign g3[5] = l[171];
	assign g3[6] = l[177];
	assign g3[7] = l[219];
	assign g3[8] = l[235];
	assign g3[9] = l[247];
	assign g3[10] = l[256] || l[259];
	assign g3[11] = l[278];
	assign g3[12] = l[296];
	assign g3[13] = l[307];
	assign g3[14] = l[350];
	assign g3[15] = l[353];
	assign g3[16] = l[375];
	assign g3[17] = l[389];
	assign g3[18] = l[440];
	assign g3[19] = l[458];
	assign g3[20] = l[488];
	assign g3[21] = l[493];
	assign g3[22] = l[510];
	assign g3[23] = l[530];
	assign g3[24] = l[564] || l[565];
	assign g3[25] = l[573] || l[575] || l[577] || l[579];
	assign g3[26] = l[586];
	assign g3[27] = l[604] || l[607] || l[610];
	assign g3[28] = l[617];
	assign g3[29] = l[634];
	assign g3[30] = l[661] || l[666];
	assign g3[31] = l[679] || l[683] || l[692];
	assign g3[32] = l[712] || l[713];
	assign g3[33] = l[724];
	assign g3[34] = l[740] || l[745];
	assign g3[35] = l[753];
	assign g3[36] = l[770] || l[775];
	assign g3[37] = l[804] || l[806];
	assign g3[38] = l[833] || l[837];
	assign g3[39] = l[882] || l[893];
	assign g3[40] = l[901] || l[905];
	assign g3[41] = l[931] || l[933] || l[935];
	assign g3[42] = l[947];
	assign g3[43] = l[965];
	assign g3[44] = l[985] || l[987] || l[997];
	assign g3[45] = l[1011];
	assign g3[46] = l[1017];
	assign g3[47] = l[1038];
	assign g3[48] = l[1089] || l[1092];
	assign g3[49] = l[1095] || l[1104];
	assign g3[50] = l[1114];
	assign g3[51] = l[1129] || l[1130];
	assign g3[52] = l[1145] || l[1155] || l[1156];
	assign g3[53] = l[1170];
	assign g3[54] = l[1194] || l[1206] || l[1209];
	assign g3[55] = l[1225];
	assign g3[56] = l[1228];
	assign g3[57] = l[1237];
	assign g3[58] = l[1272] || l[1277];
	assign g3[59] = l[1283];
	assign g3[60] = l[1312];
	assign g3[61] = l[1317] || l[1319];
	assign g3[62] = l[1351];
	assign g3[63] = l[1354];
	assign g3[64] = l[1371];
	assign g3[65] = l[1384] || l[1387];
	assign g3[66] = l[1399];
	assign g3[67] = l[1421];
	assign g3[68] = l[1425] || l[1428] || l[1438];
	assign g3[69] = l[1452];
	assign g3[70] = l[1455] || l[1465];
	assign g3[71] = l[1476] || l[1480] || l[1484];
	
    always_ff @(posedge clk) begin
        g3_reg <= g3;
    end
    
	logic [2:0] v3c8l0_out [0:17];
	logic [2:0] v3c8l0 [0:17];
	assign v3c8l0_out[0] = g3_reg[0] + g3_reg[1] + g3_reg[2] + g3_reg[3];
	assign v3c8l0_out[1] = g3_reg[4] + g3_reg[5] + g3_reg[6] + g3_reg[7];
	assign v3c8l0_out[2] = g3_reg[8] + g3_reg[9] + g3_reg[10] + g3_reg[11];
	assign v3c8l0_out[3] = g3_reg[12] + g3_reg[13] + g3_reg[14] + g3_reg[15];
	assign v3c8l0_out[4] = g3_reg[16] + g3_reg[17] + g3_reg[18] + g3_reg[19];
	assign v3c8l0_out[5] = g3_reg[20] + g3_reg[21] + g3_reg[22] + g3_reg[23];
	assign v3c8l0_out[6] = g3_reg[24] + g3_reg[25] + g3_reg[26] + g3_reg[27];
	assign v3c8l0_out[7] = g3_reg[28] + g3_reg[29] + g3_reg[30] + g3_reg[31];
	assign v3c8l0_out[8] = g3_reg[32] + g3_reg[33] + g3_reg[34] + g3_reg[35];
	assign v3c8l0_out[9] = g3_reg[36] + g3_reg[37] + g3_reg[38] + g3_reg[39];
	assign v3c8l0_out[10] = g3_reg[40] + g3_reg[41] + g3_reg[42] + g3_reg[43];
	assign v3c8l0_out[11] = g3_reg[44] + g3_reg[45] + g3_reg[46] + g3_reg[47];
	assign v3c8l0_out[12] = g3_reg[48] + g3_reg[49] + g3_reg[50] + g3_reg[51];
	assign v3c8l0_out[13] = g3_reg[52] + g3_reg[53] + g3_reg[54] + g3_reg[55];
	assign v3c8l0_out[14] = g3_reg[56] + g3_reg[57] + g3_reg[58] + g3_reg[59];
	assign v3c8l0_out[15] = g3_reg[60] + g3_reg[61] + g3_reg[62] + g3_reg[63];
	assign v3c8l0_out[16] = g3_reg[64] + g3_reg[65] + g3_reg[66] + g3_reg[67];
	assign v3c8l0_out[17] = g3_reg[68] + g3_reg[69] + g3_reg[70] + g3_reg[71];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 18; i = i + 1)
            v3c8l0[i] <= v3c8l0_out[i];
    end

	reg [3:0] v3c8l1 [0:8];
	logic [3:0] v3c8l1_out [0:8];
	assign v3c8l1_out[0] = v3c8l0[0] + v3c8l0[1];
	assign v3c8l1_out[1] = v3c8l0[2] + v3c8l0[3];
	assign v3c8l1_out[2] = v3c8l0[4] + v3c8l0[5];
	assign v3c8l1_out[3] = v3c8l0[6] + v3c8l0[7];
	assign v3c8l1_out[4] = v3c8l0[8] + v3c8l0[9];
	assign v3c8l1_out[5] = v3c8l0[10] + v3c8l0[11];
	assign v3c8l1_out[6] = v3c8l0[12] + v3c8l0[13];
	assign v3c8l1_out[7] = v3c8l0[14] + v3c8l0[15];
	assign v3c8l1_out[8] = v3c8l0[16] + v3c8l0[17];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 9; i = i + 1)
            v3c8l1[i] <= v3c8l1_out[i];
    end

	reg [4:0] v3c8l2 [0:4];
	logic [4:0] v3c8l2_out [0:4];
	assign v3c8l2_out[0] = v3c8l1[0] + v3c8l1[1];
	assign v3c8l2_out[1] = v3c8l1[2] + v3c8l1[3];
	assign v3c8l2_out[2] = v3c8l1[4] + v3c8l1[5];
	assign v3c8l2_out[3] = v3c8l1[6] + v3c8l1[7];
	assign v3c8l2_out[4] = v3c8l1[8];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 5; i = i + 1)
            v3c8l2[i] <= v3c8l2_out[i];
    end

	reg [5:0] v3c8l3 [0:2];
	logic [5:0] v3c8l3_out [0:2];
	assign v3c8l3_out[0] = v3c8l2[0] + v3c8l2[1];
	assign v3c8l3_out[1] = v3c8l2[2] + v3c8l2[3];
	assign v3c8l3_out[2] = v3c8l2[4];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 3; i = i + 1)
            v3c8l3[i] <= v3c8l3_out[i];
    end

	reg [6:0] v3c8l4 [0:1];
	logic [6:0] v3c8l4_out [0:1];
	assign v3c8l4_out[0] = v3c8l3[0] + v3c8l3[1];
	assign v3c8l4_out[1] = v3c8l3[2];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 2; i = i + 1)
            v3c8l4[i] <= v3c8l4_out[i];
    end

	reg [7:0] v3c8l5 [0:0];
	logic [7:0] v3c8l5_out [0:0];
	assign v3c8l5_out[0] = v3c8l4[0] + v3c8l4[1];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 1; i = i + 1)
            v3c8l5[i] <= v3c8l5_out[i];
    end

	assign val[3] = v3c8l5[0];
	
	// -0.015625
	logic [0:44] g4;
	reg [0:44] g4_reg;
	assign g4[0] = l[20] || l[28];
	assign g4[1] = l[39];
	assign g4[2] = l[74];
	assign g4[3] = l[100];
	assign g4[4] = l[145];
	assign g4[5] = l[180];
	assign g4[6] = l[251];
	assign g4[7] = l[283];
	assign g4[8] = l[395];
	assign g4[9] = l[407] || l[411];
	assign g4[10] = l[414];
	assign g4[11] = l[447] || l[453];
	assign g4[12] = l[465] || l[471];
	assign g4[13] = l[481] || l[492];
	assign g4[14] = l[528];
	assign g4[15] = l[542] || l[549];
	assign g4[16] = l[636] || l[642];
	assign g4[17] = l[657];
	assign g4[18] = l[709] || l[719];
	assign g4[19] = l[773];
	assign g4[20] = l[812];
	assign g4[21] = l[846] || l[854];
	assign g4[22] = l[880];
	assign g4[23] = l[938];
	assign g4[24] = l[943] || l[956] || l[957];
	assign g4[25] = l[999] || l[1013];
	assign g4[26] = l[1031];
	assign g4[27] = l[1047] || l[1058];
	assign g4[28] = l[1101] || l[1106];
	assign g4[29] = l[1127];
	assign g4[30] = l[1160] || l[1173];
	assign g4[31] = l[1177];
	assign g4[32] = l[1201];
	assign g4[33] = l[1217];
	assign g4[34] = l[1226];
	assign g4[35] = l[1247];
	assign g4[36] = l[1294];
	assign g4[37] = l[1301];
	assign g4[38] = l[1358] || l[1365];
	assign g4[39] = l[1369];
	assign g4[40] = l[1381];
	assign g4[41] = l[1424];
	assign g4[42] = l[1450];
	assign g4[43] = l[1459] || l[1462];
	assign g4[44] = l[1485] || l[1488];
	
    always_ff @(posedge clk) begin
        g4_reg <= g4;
    end
    
	logic [2:0] v4c8l0_out [0:11];
	logic [2:0] v4c8l0 [0:11];
	assign v4c8l0_out[0] = g4_reg[0] + g4_reg[1] + g4_reg[2] + g4_reg[3];
	assign v4c8l0_out[1] = g4_reg[4] + g4_reg[5] + g4_reg[6] + g4_reg[7];
	assign v4c8l0_out[2] = g4_reg[8] + g4_reg[9] + g4_reg[10] + g4_reg[11];
	assign v4c8l0_out[3] = g4_reg[12] + g4_reg[13] + g4_reg[14] + g4_reg[15];
	assign v4c8l0_out[4] = g4_reg[16] + g4_reg[17] + g4_reg[18] + g4_reg[19];
	assign v4c8l0_out[5] = g4_reg[20] + g4_reg[21] + g4_reg[22] + g4_reg[23];
	assign v4c8l0_out[6] = g4_reg[24] + g4_reg[25] + g4_reg[26] + g4_reg[27];
	assign v4c8l0_out[7] = g4_reg[28] + g4_reg[29] + g4_reg[30] + g4_reg[31];
	assign v4c8l0_out[8] = g4_reg[32] + g4_reg[33] + g4_reg[34] + g4_reg[35];
	assign v4c8l0_out[9] = g4_reg[36] + g4_reg[37] + g4_reg[38] + g4_reg[39];
	assign v4c8l0_out[10] = g4_reg[40] + g4_reg[41] + g4_reg[42] + g4_reg[43];
	assign v4c8l0_out[11] = g4_reg[44];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 12; i = i + 1)
            v4c8l0[i] <= v4c8l0_out[i];
    end

	reg [3:0] v4c8l1 [0:5];
	logic [3:0] v4c8l1_out [0:5];
	assign v4c8l1_out[0] = v4c8l0[0] + v4c8l0[1];
	assign v4c8l1_out[1] = v4c8l0[2] + v4c8l0[3];
	assign v4c8l1_out[2] = v4c8l0[4] + v4c8l0[5];
	assign v4c8l1_out[3] = v4c8l0[6] + v4c8l0[7];
	assign v4c8l1_out[4] = v4c8l0[8] + v4c8l0[9];
	assign v4c8l1_out[5] = v4c8l0[10] + v4c8l0[11];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 6; i = i + 1)
            v4c8l1[i] <= v4c8l1_out[i];
    end

	reg [4:0] v4c8l2 [0:2];
	logic [4:0] v4c8l2_out [0:2];
	assign v4c8l2_out[0] = v4c8l1[0] + v4c8l1[1];
	assign v4c8l2_out[1] = v4c8l1[2] + v4c8l1[3];
	assign v4c8l2_out[2] = v4c8l1[4] + v4c8l1[5];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 3; i = i + 1)
            v4c8l2[i] <= v4c8l2_out[i];
    end

	reg [5:0] v4c8l3 [0:1];
	logic [5:0] v4c8l3_out [0:1];
	assign v4c8l3_out[0] = v4c8l2[0] + v4c8l2[1];
	assign v4c8l3_out[1] = v4c8l2[2];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 2; i = i + 1)
            v4c8l3[i] <= v4c8l3_out[i];
    end

	reg [6:0] v4c8l4 [0:0];
	logic [6:0] v4c8l4_out [0:0];
	assign v4c8l4_out[0] = v4c8l3[0] + v4c8l3[1];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 1; i = i + 1)
            v4c8l4[i] <= v4c8l4_out[i];
    end

	reg [7:0] v4c8l5 [0:0];
	logic [7:0] v4c8l5_out [0:0];
	assign v4c8l5_out[0] = v4c8l4[0];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 1; i = i + 1)
            v4c8l5[i] <= v4c8l5_out[i];
    end

	assign val[4] = v4c8l5[0];
	
	// 0.015625
	logic [0:48] g5;
	reg [0:48] g5_reg;
	assign g5[0] = l[207];
	assign g5[1] = l[225];
	assign g5[2] = l[274];
	assign g5[3] = l[352];
	assign g5[4] = l[379];
	assign g5[5] = l[398] || l[401];
	assign g5[6] = l[439];
	assign g5[7] = l[451];
	assign g5[8] = l[464];
	assign g5[9] = l[509];
	assign g5[10] = l[526];
	assign g5[11] = l[558] || l[563];
	assign g5[12] = l[618] || l[622];
	assign g5[13] = l[633];
	assign g5[14] = l[652] || l[660];
	assign g5[15] = l[723];
	assign g5[16] = l[741];
	assign g5[17] = l[766];
	assign g5[18] = l[769] || l[778];
	assign g5[19] = l[792];
	assign g5[20] = l[825];
	assign g5[21] = l[844];
	assign g5[22] = l[911];
	assign g5[23] = l[921];
	assign g5[24] = l[941];
	assign g5[25] = l[952];
	assign g5[26] = l[981];
	assign g5[27] = l[1001] || l[1005];
	assign g5[28] = l[1023];
	assign g5[29] = l[1067];
	assign g5[30] = l[1079] || l[1085] || l[1087];
	assign g5[31] = l[1099];
	assign g5[32] = l[1175] || l[1181];
	assign g5[33] = l[1185];
	assign g5[34] = l[1203];
	assign g5[35] = l[1210] || l[1222];
	assign g5[36] = l[1231] || l[1235];
	assign g5[37] = l[1257] || l[1259];
	assign g5[38] = l[1271];
	assign g5[39] = l[1297];
	assign g5[40] = l[1305];
	assign g5[41] = l[1327];
	assign g5[42] = l[1347];
	assign g5[43] = l[1368];
	assign g5[44] = l[1382];
	assign g5[45] = l[1442] || l[1444];
	assign g5[46] = l[1467];
	assign g5[47] = l[1477] || l[1482];
	assign g5[48] = l[1486] || l[1489];
	
    always_ff @(posedge clk) begin
        g5_reg <= g5;
    end
    
	logic [2:0] v5c8l0_out [0:12];
	logic [2:0] v5c8l0 [0:12];
	assign v5c8l0_out[0] = g5_reg[0] + g5_reg[1] + g5_reg[2] + g5_reg[3];
	assign v5c8l0_out[1] = g5_reg[4] + g5_reg[5] + g5_reg[6] + g5_reg[7];
	assign v5c8l0_out[2] = g5_reg[8] + g5_reg[9] + g5_reg[10] + g5_reg[11];
	assign v5c8l0_out[3] = g5_reg[12] + g5_reg[13] + g5_reg[14] + g5_reg[15];
	assign v5c8l0_out[4] = g5_reg[16] + g5_reg[17] + g5_reg[18] + g5_reg[19];
	assign v5c8l0_out[5] = g5_reg[20] + g5_reg[21] + g5_reg[22] + g5_reg[23];
	assign v5c8l0_out[6] = g5_reg[24] + g5_reg[25] + g5_reg[26] + g5_reg[27];
	assign v5c8l0_out[7] = g5_reg[28] + g5_reg[29] + g5_reg[30] + g5_reg[31];
	assign v5c8l0_out[8] = g5_reg[32] + g5_reg[33] + g5_reg[34] + g5_reg[35];
	assign v5c8l0_out[9] = g5_reg[36] + g5_reg[37] + g5_reg[38] + g5_reg[39];
	assign v5c8l0_out[10] = g5_reg[40] + g5_reg[41] + g5_reg[42] + g5_reg[43];
	assign v5c8l0_out[11] = g5_reg[44] + g5_reg[45] + g5_reg[46] + g5_reg[47];
	assign v5c8l0_out[12] = g5_reg[48];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 13; i = i + 1)
            v5c8l0[i] <= v5c8l0_out[i];
    end

	reg [3:0] v5c8l1 [0:6];
	logic [3:0] v5c8l1_out [0:6];
	assign v5c8l1_out[0] = v5c8l0[0] + v5c8l0[1];
	assign v5c8l1_out[1] = v5c8l0[2] + v5c8l0[3];
	assign v5c8l1_out[2] = v5c8l0[4] + v5c8l0[5];
	assign v5c8l1_out[3] = v5c8l0[6] + v5c8l0[7];
	assign v5c8l1_out[4] = v5c8l0[8] + v5c8l0[9];
	assign v5c8l1_out[5] = v5c8l0[10] + v5c8l0[11];
	assign v5c8l1_out[6] = v5c8l0[12];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 7; i = i + 1)
            v5c8l1[i] <= v5c8l1_out[i];
    end

	reg [4:0] v5c8l2 [0:3];
	logic [4:0] v5c8l2_out [0:3];
	assign v5c8l2_out[0] = v5c8l1[0] + v5c8l1[1];
	assign v5c8l2_out[1] = v5c8l1[2] + v5c8l1[3];
	assign v5c8l2_out[2] = v5c8l1[4] + v5c8l1[5];
	assign v5c8l2_out[3] = v5c8l1[6];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 4; i = i + 1)
            v5c8l2[i] <= v5c8l2_out[i];
    end

	reg [5:0] v5c8l3 [0:1];
	logic [5:0] v5c8l3_out [0:1];
	assign v5c8l3_out[0] = v5c8l2[0] + v5c8l2[1];
	assign v5c8l3_out[1] = v5c8l2[2] + v5c8l2[3];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 2; i = i + 1)
            v5c8l3[i] <= v5c8l3_out[i];
    end

	reg [6:0] v5c8l4 [0:0];
	logic [6:0] v5c8l4_out [0:0];
	assign v5c8l4_out[0] = v5c8l3[0] + v5c8l3[1];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 1; i = i + 1)
            v5c8l4[i] <= v5c8l4_out[i];
    end

	reg [7:0] v5c8l5 [0:0];
	logic [7:0] v5c8l5_out [0:0];
	assign v5c8l5_out[0] = v5c8l4[0];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 1; i = i + 1)
            v5c8l5[i] <= v5c8l5_out[i];
    end

	assign val[5] = v5c8l5[0];
	
	// 0.03125
	logic [0:60] g6;
	reg [0:60] g6_reg;
	assign g6[0] = l[67] || l[73];
	assign g6[1] = l[113] || l[114];
	assign g6[2] = l[137];
	assign g6[3] = l[146] || l[151];
	assign g6[4] = l[205];
	assign g6[5] = l[220];
	assign g6[6] = l[233] || l[237];
	assign g6[7] = l[249] || l[255];
	assign g6[8] = l[269];
	assign g6[9] = l[293] || l[301];
	assign g6[10] = l[321] || l[328];
	assign g6[11] = l[337] || l[339] || l[342];
	assign g6[12] = l[365];
	assign g6[13] = l[392];
	assign g6[14] = l[421];
	assign g6[15] = l[460];
	assign g6[16] = l[470];
	assign g6[17] = l[512] || l[521];
	assign g6[18] = l[531] || l[534];
	assign g6[19] = l[543];
	assign g6[20] = l[559] || l[561];
	assign g6[21] = l[574];
	assign g6[22] = l[590];
	assign g6[23] = l[613];
	assign g6[24] = l[695] || l[697] || l[701];
	assign g6[25] = l[721];
	assign g6[26] = l[738] || l[746];
	assign g6[27] = l[758] || l[767];
	assign g6[28] = l[816];
	assign g6[29] = l[828] || l[836];
	assign g6[30] = l[847] || l[849] || l[851];
	assign g6[31] = l[860] || l[871];
	assign g6[32] = l[874];
	assign g6[33] = l[883] || l[888];
	assign g6[34] = l[917] || l[925];
	assign g6[35] = l[934] || l[937];
	assign g6[36] = l[949];
	assign g6[37] = l[961] || l[969] || l[973];
	assign g6[38] = l[1025];
	assign g6[39] = l[1036];
	assign g6[40] = l[1061];
	assign g6[41] = l[1075];
	assign g6[42] = l[1094] || l[1097] || l[1103];
	assign g6[43] = l[1118] || l[1120] || l[1124];
	assign g6[44] = l[1134];
	assign g6[45] = l[1148] || l[1150];
	assign g6[46] = l[1165] || l[1168];
	assign g6[47] = l[1176] || l[1178];
	assign g6[48] = l[1195];
	assign g6[49] = l[1218] || l[1224];
	assign g6[50] = l[1233];
	assign g6[51] = l[1236] || l[1238] || l[1243];
	assign g6[52] = l[1273] || l[1274];
	assign g6[53] = l[1338] || l[1342];
	assign g6[54] = l[1380];
	assign g6[55] = l[1398] || l[1407];
	assign g6[56] = l[1413] || l[1415] || l[1422];
	assign g6[57] = l[1431] || l[1433] || l[1435];
	assign g6[58] = l[1466];
	assign g6[59] = l[1470] || l[1474];
	assign g6[60] = l[1492];
	
    always_ff @(posedge clk) begin
        g6_reg <= g6;
    end
    
	logic [2:0] v6c8l0_out [0:15];
	logic [2:0] v6c8l0 [0:15];
	assign v6c8l0_out[0] = g6_reg[0] + g6_reg[1] + g6_reg[2] + g6_reg[3];
	assign v6c8l0_out[1] = g6_reg[4] + g6_reg[5] + g6_reg[6] + g6_reg[7];
	assign v6c8l0_out[2] = g6_reg[8] + g6_reg[9] + g6_reg[10] + g6_reg[11];
	assign v6c8l0_out[3] = g6_reg[12] + g6_reg[13] + g6_reg[14] + g6_reg[15];
	assign v6c8l0_out[4] = g6_reg[16] + g6_reg[17] + g6_reg[18] + g6_reg[19];
	assign v6c8l0_out[5] = g6_reg[20] + g6_reg[21] + g6_reg[22] + g6_reg[23];
	assign v6c8l0_out[6] = g6_reg[24] + g6_reg[25] + g6_reg[26] + g6_reg[27];
	assign v6c8l0_out[7] = g6_reg[28] + g6_reg[29] + g6_reg[30] + g6_reg[31];
	assign v6c8l0_out[8] = g6_reg[32] + g6_reg[33] + g6_reg[34] + g6_reg[35];
	assign v6c8l0_out[9] = g6_reg[36] + g6_reg[37] + g6_reg[38] + g6_reg[39];
	assign v6c8l0_out[10] = g6_reg[40] + g6_reg[41] + g6_reg[42] + g6_reg[43];
	assign v6c8l0_out[11] = g6_reg[44] + g6_reg[45] + g6_reg[46] + g6_reg[47];
	assign v6c8l0_out[12] = g6_reg[48] + g6_reg[49] + g6_reg[50] + g6_reg[51];
	assign v6c8l0_out[13] = g6_reg[52] + g6_reg[53] + g6_reg[54] + g6_reg[55];
	assign v6c8l0_out[14] = g6_reg[56] + g6_reg[57] + g6_reg[58] + g6_reg[59];
	assign v6c8l0_out[15] = g6_reg[60];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 16; i = i + 1)
            v6c8l0[i] <= v6c8l0_out[i];
    end

	reg [3:0] v6c8l1 [0:7];
	logic [3:0] v6c8l1_out [0:7];
	assign v6c8l1_out[0] = v6c8l0[0] + v6c8l0[1];
	assign v6c8l1_out[1] = v6c8l0[2] + v6c8l0[3];
	assign v6c8l1_out[2] = v6c8l0[4] + v6c8l0[5];
	assign v6c8l1_out[3] = v6c8l0[6] + v6c8l0[7];
	assign v6c8l1_out[4] = v6c8l0[8] + v6c8l0[9];
	assign v6c8l1_out[5] = v6c8l0[10] + v6c8l0[11];
	assign v6c8l1_out[6] = v6c8l0[12] + v6c8l0[13];
	assign v6c8l1_out[7] = v6c8l0[14] + v6c8l0[15];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 8; i = i + 1)
            v6c8l1[i] <= v6c8l1_out[i];
    end

	reg [4:0] v6c8l2 [0:3];
	logic [4:0] v6c8l2_out [0:3];
	assign v6c8l2_out[0] = v6c8l1[0] + v6c8l1[1];
	assign v6c8l2_out[1] = v6c8l1[2] + v6c8l1[3];
	assign v6c8l2_out[2] = v6c8l1[4] + v6c8l1[5];
	assign v6c8l2_out[3] = v6c8l1[6] + v6c8l1[7];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 4; i = i + 1)
            v6c8l2[i] <= v6c8l2_out[i];
    end

	reg [5:0] v6c8l3 [0:1];
	logic [5:0] v6c8l3_out [0:1];
	assign v6c8l3_out[0] = v6c8l2[0] + v6c8l2[1];
	assign v6c8l3_out[1] = v6c8l2[2] + v6c8l2[3];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 2; i = i + 1)
            v6c8l3[i] <= v6c8l3_out[i];
    end

	reg [6:0] v6c8l4 [0:0];
	logic [6:0] v6c8l4_out [0:0];
	assign v6c8l4_out[0] = v6c8l3[0] + v6c8l3[1];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 1; i = i + 1)
            v6c8l4[i] <= v6c8l4_out[i];
    end

	reg [7:0] v6c8l5 [0:0];
	logic [7:0] v6c8l5_out [0:0];
	assign v6c8l5_out[0] = v6c8l4[0];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 1; i = i + 1)
            v6c8l5[i] <= v6c8l5_out[i];
    end

	assign val[6] = v6c8l5[0];
	
	// 0.0625
	logic [0:83] g7;
	reg [0:83] g7_reg;
	assign g7[0] = l[23];
	assign g7[1] = l[37];
	assign g7[2] = l[51];
	assign g7[3] = l[87] || l[93];
	assign g7[4] = l[105] || l[107] || l[108] || l[111];
	assign g7[5] = l[116] || l[119];
	assign g7[6] = l[133];
	assign g7[7] = l[179] || l[182] || l[185] || l[190];
	assign g7[8] = l[214];
	assign g7[9] = l[228] || l[231];
	assign g7[10] = l[246];
	assign g7[11] = l[264] || l[267];
	assign g7[12] = l[289] || l[297];
	assign g7[13] = l[306];
	assign g7[14] = l[320];
	assign g7[15] = l[344];
	assign g7[16] = l[354];
	assign g7[17] = l[384] || l[387] || l[391] || l[397];
	assign g7[18] = l[405] || l[413];
	assign g7[19] = l[416] || l[427];
	assign g7[20] = l[431] || l[433] || l[437];
	assign g7[21] = l[456];
	assign g7[22] = l[462] || l[474] || l[476];
	assign g7[23] = l[484];
	assign g7[24] = l[502] || l[508];
	assign g7[25] = l[524];
	assign g7[26] = l[527] || l[535];
	assign g7[27] = l[548] || l[551];
	assign g7[28] = l[576];
	assign g7[29] = l[602] || l[606] || l[608];
	assign g7[30] = l[630];
	assign g7[31] = l[637];
	assign g7[32] = l[647] || l[654];
	assign g7[33] = l[662] || l[669] || l[676];
	assign g7[34] = l[682] || l[685] || l[687];
	assign g7[35] = l[694] || l[700];
	assign g7[36] = l[708] || l[710] || l[716] || l[718];
	assign g7[37] = l[744] || l[747] || l[750];
	assign g7[38] = l[754] || l[756] || l[759] || l[762];
	assign g7[39] = l[772] || l[779];
	assign g7[40] = l[790];
	assign g7[41] = l[797];
	assign g7[42] = l[803] || l[807];
	assign g7[43] = l[821];
	assign g7[44] = l[832] || l[834] || l[839];
	assign g7[45] = l[862];
	assign g7[46] = l[884] || l[891];
	assign g7[47] = l[900] || l[902] || l[907] || l[909];
	assign g7[48] = l[913] || l[914] || l[926];
	assign g7[49] = l[930] || l[939];
	assign g7[50] = l[944] || l[948] || l[954];
	assign g7[51] = l[960] || l[966] || l[967];
	assign g7[52] = l[988] || l[989] || l[993] || l[996];
	assign g7[53] = l[1000];
	assign g7[54] = l[1016] || l[1018] || l[1021];
	assign g7[55] = l[1037] || l[1041] || l[1044];
	assign g7[56] = l[1051] || l[1054];
	assign g7[57] = l[1063] || l[1064] || l[1068];
	assign g7[58] = l[1083] || l[1088];
	assign g7[59] = l[1100] || l[1108];
	assign g7[60] = l[1128] || l[1136] || l[1141];
	assign g7[61] = l[1144] || l[1147] || l[1157];
	assign g7[62] = l[1161] || l[1171];
	assign g7[63] = l[1188];
	assign g7[64] = l[1199] || l[1207];
	assign g7[65] = l[1220];
	assign g7[66] = l[1227];
	assign g7[67] = l[1249];
	assign g7[68] = l[1252] || l[1255];
	assign g7[69] = l[1267] || l[1279] || l[1280];
	assign g7[70] = l[1285] || l[1287] || l[1290] || l[1292] || l[1295];
	assign g7[71] = l[1302] || l[1307];
	assign g7[72] = l[1321];
	assign g7[73] = l[1328] || l[1332] || l[1336];
	assign g7[74] = l[1339];
	assign g7[75] = l[1353] || l[1357] || l[1359] || l[1361] || l[1363];
	assign g7[76] = l[1370] || l[1376] || l[1379];
	assign g7[77] = l[1389] || l[1391];
	assign g7[78] = l[1401] || l[1404];
	assign g7[79] = l[1420];
	assign g7[80] = l[1427] || l[1429];
	assign g7[81] = l[1456] || l[1461] || l[1464];
	assign g7[82] = l[1471] || l[1478] || l[1483];
	assign g7[83] = l[1493] || l[1496];
	
    always_ff @(posedge clk) begin
        g7_reg <= g7;
    end
    
	logic [2:0] v7c8l0_out [0:20];
	logic [2:0] v7c8l0 [0:20];
	assign v7c8l0_out[0] = g7_reg[0] + g7_reg[1] + g7_reg[2] + g7_reg[3];
	assign v7c8l0_out[1] = g7_reg[4] + g7_reg[5] + g7_reg[6] + g7_reg[7];
	assign v7c8l0_out[2] = g7_reg[8] + g7_reg[9] + g7_reg[10] + g7_reg[11];
	assign v7c8l0_out[3] = g7_reg[12] + g7_reg[13] + g7_reg[14] + g7_reg[15];
	assign v7c8l0_out[4] = g7_reg[16] + g7_reg[17] + g7_reg[18] + g7_reg[19];
	assign v7c8l0_out[5] = g7_reg[20] + g7_reg[21] + g7_reg[22] + g7_reg[23];
	assign v7c8l0_out[6] = g7_reg[24] + g7_reg[25] + g7_reg[26] + g7_reg[27];
	assign v7c8l0_out[7] = g7_reg[28] + g7_reg[29] + g7_reg[30] + g7_reg[31];
	assign v7c8l0_out[8] = g7_reg[32] + g7_reg[33] + g7_reg[34] + g7_reg[35];
	assign v7c8l0_out[9] = g7_reg[36] + g7_reg[37] + g7_reg[38] + g7_reg[39];
	assign v7c8l0_out[10] = g7_reg[40] + g7_reg[41] + g7_reg[42] + g7_reg[43];
	assign v7c8l0_out[11] = g7_reg[44] + g7_reg[45] + g7_reg[46] + g7_reg[47];
	assign v7c8l0_out[12] = g7_reg[48] + g7_reg[49] + g7_reg[50] + g7_reg[51];
	assign v7c8l0_out[13] = g7_reg[52] + g7_reg[53] + g7_reg[54] + g7_reg[55];
	assign v7c8l0_out[14] = g7_reg[56] + g7_reg[57] + g7_reg[58] + g7_reg[59];
	assign v7c8l0_out[15] = g7_reg[60] + g7_reg[61] + g7_reg[62] + g7_reg[63];
	assign v7c8l0_out[16] = g7_reg[64] + g7_reg[65] + g7_reg[66] + g7_reg[67];
	assign v7c8l0_out[17] = g7_reg[68] + g7_reg[69] + g7_reg[70] + g7_reg[71];
	assign v7c8l0_out[18] = g7_reg[72] + g7_reg[73] + g7_reg[74] + g7_reg[75];
	assign v7c8l0_out[19] = g7_reg[76] + g7_reg[77] + g7_reg[78] + g7_reg[79];
	assign v7c8l0_out[20] = g7_reg[80] + g7_reg[81] + g7_reg[82] + g7_reg[83];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 21; i = i + 1)
            v7c8l0[i] <= v7c8l0_out[i];
    end

	reg [3:0] v7c8l1 [0:10];
	logic [3:0] v7c8l1_out [0:10];
	assign v7c8l1_out[0] = v7c8l0[0] + v7c8l0[1];
	assign v7c8l1_out[1] = v7c8l0[2] + v7c8l0[3];
	assign v7c8l1_out[2] = v7c8l0[4] + v7c8l0[5];
	assign v7c8l1_out[3] = v7c8l0[6] + v7c8l0[7];
	assign v7c8l1_out[4] = v7c8l0[8] + v7c8l0[9];
	assign v7c8l1_out[5] = v7c8l0[10] + v7c8l0[11];
	assign v7c8l1_out[6] = v7c8l0[12] + v7c8l0[13];
	assign v7c8l1_out[7] = v7c8l0[14] + v7c8l0[15];
	assign v7c8l1_out[8] = v7c8l0[16] + v7c8l0[17];
	assign v7c8l1_out[9] = v7c8l0[18] + v7c8l0[19];
	assign v7c8l1_out[10] = v7c8l0[20];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 11; i = i + 1)
            v7c8l1[i] <= v7c8l1_out[i];
    end

	reg [4:0] v7c8l2 [0:5];
	logic [4:0] v7c8l2_out [0:5];
	assign v7c8l2_out[0] = v7c8l1[0] + v7c8l1[1];
	assign v7c8l2_out[1] = v7c8l1[2] + v7c8l1[3];
	assign v7c8l2_out[2] = v7c8l1[4] + v7c8l1[5];
	assign v7c8l2_out[3] = v7c8l1[6] + v7c8l1[7];
	assign v7c8l2_out[4] = v7c8l1[8] + v7c8l1[9];
	assign v7c8l2_out[5] = v7c8l1[10];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 6; i = i + 1)
            v7c8l2[i] <= v7c8l2_out[i];
    end

	reg [5:0] v7c8l3 [0:2];
	logic [5:0] v7c8l3_out [0:2];
	assign v7c8l3_out[0] = v7c8l2[0] + v7c8l2[1];
	assign v7c8l3_out[1] = v7c8l2[2] + v7c8l2[3];
	assign v7c8l3_out[2] = v7c8l2[4] + v7c8l2[5];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 3; i = i + 1)
            v7c8l3[i] <= v7c8l3_out[i];
    end

	reg [6:0] v7c8l4 [0:1];
	logic [6:0] v7c8l4_out [0:1];
	assign v7c8l4_out[0] = v7c8l3[0] + v7c8l3[1];
	assign v7c8l4_out[1] = v7c8l3[2];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 2; i = i + 1)
            v7c8l4[i] <= v7c8l4_out[i];
    end

	reg [7:0] v7c8l5 [0:0];
	logic [7:0] v7c8l5_out [0:0];
	assign v7c8l5_out[0] = v7c8l4[0] + v7c8l4[1];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 1; i = i + 1)
            v7c8l5[i] <= v7c8l5_out[i];
    end

	assign val[7] = v7c8l5[0];
	
	// 0.125
	logic [0:96] g8;
	reg [0:96] g8_reg;
	assign g8[0] = l[5] || l[6] || l[9];
	assign g8[1] = l[25];
	assign g8[2] = l[35] || l[41];
	assign g8[3] = l[57] || l[60];
	assign g8[4] = l[78];
	assign g8[5] = l[83] || l[84] || l[89] || l[95];
	assign g8[6] = l[121] || l[125] || l[127];
	assign g8[7] = l[129] || l[135] || l[139];
	assign g8[8] = l[153] || l[155] || l[157] || l[159];
	assign g8[9] = l[161] || l[163] || l[165] || l[169] || l[170];
	assign g8[10] = l[181] || l[187];
	assign g8[11] = l[193] || l[194] || l[197] || l[200] || l[203];
	assign g8[12] = l[209] || l[210] || l[223];
	assign g8[13] = l[234] || l[239];
	assign g8[14] = l[241] || l[243] || l[244];
	assign g8[15] = l[257] || l[261] || l[271];
	assign g8[16] = l[273] || l[279] || l[282] || l[285];
	assign g8[17] = l[291] || l[299];
	assign g8[18] = l[311] || l[318];
	assign g8[19] = l[325] || l[334];
	assign g8[20] = l[345] || l[348] || l[349];
	assign g8[21] = l[355] || l[357] || l[360];
	assign g8[22] = l[368] || l[369] || l[372] || l[374] || l[380];
	assign g8[23] = l[388];
	assign g8[24] = l[408];
	assign g8[25] = l[415] || l[419] || l[425];
	assign g8[26] = l[434] || l[442];
	assign g8[27] = l[450] || l[454];
	assign g8[28] = l[463] || l[472];
	assign g8[29] = l[479] || l[482] || l[486] || l[487] || l[491];
	assign g8[30] = l[494] || l[495] || l[500];
	assign g8[31] = l[513] || l[516];
	assign g8[32] = l[529] || l[532];
	assign g8[33] = l[546] || l[554] || l[556];
	assign g8[34] = l[566] || l[567] || l[569] || l[571];
	assign g8[35] = l[578];
	assign g8[36] = l[588] || l[589] || l[595] || l[599];
	assign g8[37] = l[603] || l[605] || l[612];
	assign g8[38] = l[620] || l[626] || l[627];
	assign g8[39] = l[635];
	assign g8[40] = l[650] || l[651] || l[655] || l[658];
	assign g8[41] = l[663] || l[667] || l[672] || l[673];
	assign g8[42] = l[678] || l[680] || l[684] || l[686];
	assign g8[43] = l[704] || l[705];
	assign g8[44] = l[711] || l[717];
	assign g8[45] = l[732] || l[735];
	assign g8[46] = l[739] || l[742] || l[751];
	assign g8[47] = l[764];
	assign g8[48] = l[776] || l[783];
	assign g8[49] = l[788] || l[791];
	assign g8[50] = l[808];
	assign g8[51] = l[818] || l[826];
	assign g8[52] = l[829];
	assign g8[53] = l[845] || l[848] || l[853] || l[858];
	assign g8[54] = l[865] || l[866] || l[870];
	assign g8[55] = l[875] || l[878];
	assign g8[56] = l[895];
	assign g8[57] = l[904] || l[910];
	assign g8[58] = l[918] || l[923];
	assign g8[59] = l[932] || l[942];
	assign g8[60] = l[950] || l[951] || l[958];
	assign g8[61] = l[963];
	assign g8[62] = l[978] || l[982];
	assign g8[63] = l[986] || l[998];
	assign g8[64] = l[1006] || l[1014];
	assign g8[65] = l[1019] || l[1024] || l[1030];
	assign g8[66] = l[1034] || l[1039];
	assign g8[67] = l[1048] || l[1052] || l[1055] || l[1056] || l[1059];
	assign g8[68] = l[1066] || l[1071] || l[1072] || l[1074] || l[1076];
	assign g8[69] = l[1081] || l[1084] || l[1086] || l[1093];
	assign g8[70] = l[1096] || l[1105];
	assign g8[71] = l[1113] || l[1115] || l[1117] || l[1119];
	assign g8[72] = l[1131] || l[1132] || l[1137] || l[1138];
	assign g8[73] = l[1154];
	assign g8[74] = l[1162] || l[1167];
	assign g8[75] = l[1180] || l[1183];
	assign g8[76] = l[1186];
	assign g8[77] = l[1197] || l[1200] || l[1208];
	assign g8[78] = l[1211] || l[1216] || l[1223];
	assign g8[79] = l[1230];
	assign g8[80] = l[1239] || l[1246] || l[1248];
	assign g8[81] = l[1256] || l[1261] || l[1263];
	assign g8[82] = l[1268] || l[1270];
	assign g8[83] = l[1289] || l[1296];
	assign g8[84] = l[1311];
	assign g8[85] = l[1315] || l[1320] || l[1323];
	assign g8[86] = l[1330];
	assign g8[87] = l[1341] || l[1344] || l[1350];
	assign g8[88] = l[1366];
	assign g8[89] = l[1377];
	assign g8[90] = l[1386] || l[1395];
	assign g8[91] = l[1406];
	assign g8[92] = l[1410] || l[1414] || l[1417];
	assign g8[93] = l[1432] || l[1434] || l[1440];
	assign g8[94] = l[1446] || l[1449];
	assign g8[95] = l[1457];
	assign g8[96] = l[1490] || l[1494];
	
    always_ff @(posedge clk) begin
        g8_reg <= g8;
    end
    
	logic [2:0] v8c8l0_out [0:24];
	logic [2:0] v8c8l0 [0:24];
	assign v8c8l0_out[0] = g8_reg[0] + g8_reg[1] + g8_reg[2] + g8_reg[3];
	assign v8c8l0_out[1] = g8_reg[4] + g8_reg[5] + g8_reg[6] + g8_reg[7];
	assign v8c8l0_out[2] = g8_reg[8] + g8_reg[9] + g8_reg[10] + g8_reg[11];
	assign v8c8l0_out[3] = g8_reg[12] + g8_reg[13] + g8_reg[14] + g8_reg[15];
	assign v8c8l0_out[4] = g8_reg[16] + g8_reg[17] + g8_reg[18] + g8_reg[19];
	assign v8c8l0_out[5] = g8_reg[20] + g8_reg[21] + g8_reg[22] + g8_reg[23];
	assign v8c8l0_out[6] = g8_reg[24] + g8_reg[25] + g8_reg[26] + g8_reg[27];
	assign v8c8l0_out[7] = g8_reg[28] + g8_reg[29] + g8_reg[30] + g8_reg[31];
	assign v8c8l0_out[8] = g8_reg[32] + g8_reg[33] + g8_reg[34] + g8_reg[35];
	assign v8c8l0_out[9] = g8_reg[36] + g8_reg[37] + g8_reg[38] + g8_reg[39];
	assign v8c8l0_out[10] = g8_reg[40] + g8_reg[41] + g8_reg[42] + g8_reg[43];
	assign v8c8l0_out[11] = g8_reg[44] + g8_reg[45] + g8_reg[46] + g8_reg[47];
	assign v8c8l0_out[12] = g8_reg[48] + g8_reg[49] + g8_reg[50] + g8_reg[51];
	assign v8c8l0_out[13] = g8_reg[52] + g8_reg[53] + g8_reg[54] + g8_reg[55];
	assign v8c8l0_out[14] = g8_reg[56] + g8_reg[57] + g8_reg[58] + g8_reg[59];
	assign v8c8l0_out[15] = g8_reg[60] + g8_reg[61] + g8_reg[62] + g8_reg[63];
	assign v8c8l0_out[16] = g8_reg[64] + g8_reg[65] + g8_reg[66] + g8_reg[67];
	assign v8c8l0_out[17] = g8_reg[68] + g8_reg[69] + g8_reg[70] + g8_reg[71];
	assign v8c8l0_out[18] = g8_reg[72] + g8_reg[73] + g8_reg[74] + g8_reg[75];
	assign v8c8l0_out[19] = g8_reg[76] + g8_reg[77] + g8_reg[78] + g8_reg[79];
	assign v8c8l0_out[20] = g8_reg[80] + g8_reg[81] + g8_reg[82] + g8_reg[83];
	assign v8c8l0_out[21] = g8_reg[84] + g8_reg[85] + g8_reg[86] + g8_reg[87];
	assign v8c8l0_out[22] = g8_reg[88] + g8_reg[89] + g8_reg[90] + g8_reg[91];
	assign v8c8l0_out[23] = g8_reg[92] + g8_reg[93] + g8_reg[94] + g8_reg[95];
	assign v8c8l0_out[24] = g8_reg[96];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 25; i = i + 1)
            v8c8l0[i] <= v8c8l0_out[i];
    end

	reg [3:0] v8c8l1 [0:12];
	logic [3:0] v8c8l1_out [0:12];
	assign v8c8l1_out[0] = v8c8l0[0] + v8c8l0[1];
	assign v8c8l1_out[1] = v8c8l0[2] + v8c8l0[3];
	assign v8c8l1_out[2] = v8c8l0[4] + v8c8l0[5];
	assign v8c8l1_out[3] = v8c8l0[6] + v8c8l0[7];
	assign v8c8l1_out[4] = v8c8l0[8] + v8c8l0[9];
	assign v8c8l1_out[5] = v8c8l0[10] + v8c8l0[11];
	assign v8c8l1_out[6] = v8c8l0[12] + v8c8l0[13];
	assign v8c8l1_out[7] = v8c8l0[14] + v8c8l0[15];
	assign v8c8l1_out[8] = v8c8l0[16] + v8c8l0[17];
	assign v8c8l1_out[9] = v8c8l0[18] + v8c8l0[19];
	assign v8c8l1_out[10] = v8c8l0[20] + v8c8l0[21];
	assign v8c8l1_out[11] = v8c8l0[22] + v8c8l0[23];
	assign v8c8l1_out[12] = v8c8l0[24];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 13; i = i + 1)
            v8c8l1[i] <= v8c8l1_out[i];
    end

	reg [4:0] v8c8l2 [0:6];
	logic [4:0] v8c8l2_out [0:6];
	assign v8c8l2_out[0] = v8c8l1[0] + v8c8l1[1];
	assign v8c8l2_out[1] = v8c8l1[2] + v8c8l1[3];
	assign v8c8l2_out[2] = v8c8l1[4] + v8c8l1[5];
	assign v8c8l2_out[3] = v8c8l1[6] + v8c8l1[7];
	assign v8c8l2_out[4] = v8c8l1[8] + v8c8l1[9];
	assign v8c8l2_out[5] = v8c8l1[10] + v8c8l1[11];
	assign v8c8l2_out[6] = v8c8l1[12];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 7; i = i + 1)
            v8c8l2[i] <= v8c8l2_out[i];
    end

	reg [5:0] v8c8l3 [0:3];
	logic [5:0] v8c8l3_out [0:3];
	assign v8c8l3_out[0] = v8c8l2[0] + v8c8l2[1];
	assign v8c8l3_out[1] = v8c8l2[2] + v8c8l2[3];
	assign v8c8l3_out[2] = v8c8l2[4] + v8c8l2[5];
	assign v8c8l3_out[3] = v8c8l2[6];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 4; i = i + 1)
            v8c8l3[i] <= v8c8l3_out[i];
    end

	reg [6:0] v8c8l4 [0:1];
	logic [6:0] v8c8l4_out [0:1];
	assign v8c8l4_out[0] = v8c8l3[0] + v8c8l3[1];
	assign v8c8l4_out[1] = v8c8l3[2] + v8c8l3[3];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 2; i = i + 1)
            v8c8l4[i] <= v8c8l4_out[i];
    end

	reg [7:0] v8c8l5 [0:0];
	logic [7:0] v8c8l5_out [0:0];
	assign v8c8l5_out[0] = v8c8l4[0] + v8c8l4[1];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 1; i = i + 1)
            v8c8l5[i] <= v8c8l5_out[i];
    end

	assign val[8] = v8c8l5[0];
	
	// 0.25
	logic [0:63] g9;
	reg [0:63] g9_reg;
	assign g9[0] = l[10] || l[14];
	assign g9[1] = l[19] || l[30];
	assign g9[2] = l[45] || l[47];
	assign g9[3] = l[53] || l[58] || l[63];
	assign g9[4] = l[70] || l[75] || l[77] || l[79];
	assign g9[5] = l[90] || l[92];
	assign g9[6] = l[103] || l[106] || l[109];
	assign g9[7] = l[118] || l[123] || l[124];
	assign g9[8] = l[131] || l[142];
	assign g9[9] = l[147] || l[148] || l[156];
	assign g9[10] = l[164] || l[175];
	assign g9[11] = l[183] || l[186] || l[189];
	assign g9[12] = l[198] || l[201];
	assign g9[13] = l[213] || l[215] || l[218];
	assign g9[14] = l[226] || l[229];
	assign g9[15] = l[245] || l[250];
	assign g9[16] = l[276] || l[281] || l[286];
	assign g9[17] = l[303];
	assign g9[18] = l[310] || l[312] || l[314];
	assign g9[19] = l[324] || l[326] || l[330];
	assign g9[20] = l[338] || l[340] || l[346];
	assign g9[21] = l[361] || l[363];
	assign g9[22] = l[371] || l[376];
	assign g9[23] = l[393] || l[394];
	assign g9[24] = l[400] || l[410];
	assign g9[25] = l[420];
	assign g9[26] = l[435] || l[441] || l[443];
	assign g9[27] = l[448] || l[455] || l[457];
	assign g9[28] = l[467] || l[473];
	assign g9[29] = l[490];
	assign g9[30] = l[503];
	assign g9[31] = l[511] || l[522];
	assign g9[32] = l[536] || l[539];
	assign g9[33] = l[550] || l[553];
	assign g9[34] = l[562] || l[568];
	assign g9[35] = l[583];
	assign g9[36] = l[615];
	assign g9[37] = l[623];
	assign g9[38] = l[643];
	assign g9[39] = l[675];
	assign g9[40] = l[691];
	assign g9[41] = l[698] || l[702];
	assign g9[42] = l[714];
	assign g9[43] = l[726] || l[729];
	assign g9[44] = l[749];
	assign g9[45] = l[765];
	assign g9[46] = l[798];
	assign g9[47] = l[810] || l[813];
	assign g9[48] = l[831] || l[838];
	assign g9[49] = l[863] || l[867];
	assign g9[50] = l[881];
	assign g9[51] = l[906];
	assign g9[52] = l[968];
	assign g9[53] = l[994];
	assign g9[54] = l[1010] || l[1012];
	assign g9[55] = l[1042];
	assign g9[56] = l[1149];
	assign g9[57] = l[1205];
	assign g9[58] = l[1293];
	assign g9[59] = l[1308];
	assign g9[60] = l[1325];
	assign g9[61] = l[1355] || l[1356];
	assign g9[62] = l[1390];
	assign g9[63] = l[1463];
	
    always_ff @(posedge clk) begin
        g9_reg <= g9;
    end
    
	logic [2:0] v9c8l0_out [0:15];
	logic [2:0] v9c8l0 [0:15];
	assign v9c8l0_out[0] = g9_reg[0] + g9_reg[1] + g9_reg[2] + g9_reg[3];
	assign v9c8l0_out[1] = g9_reg[4] + g9_reg[5] + g9_reg[6] + g9_reg[7];
	assign v9c8l0_out[2] = g9_reg[8] + g9_reg[9] + g9_reg[10] + g9_reg[11];
	assign v9c8l0_out[3] = g9_reg[12] + g9_reg[13] + g9_reg[14] + g9_reg[15];
	assign v9c8l0_out[4] = g9_reg[16] + g9_reg[17] + g9_reg[18] + g9_reg[19];
	assign v9c8l0_out[5] = g9_reg[20] + g9_reg[21] + g9_reg[22] + g9_reg[23];
	assign v9c8l0_out[6] = g9_reg[24] + g9_reg[25] + g9_reg[26] + g9_reg[27];
	assign v9c8l0_out[7] = g9_reg[28] + g9_reg[29] + g9_reg[30] + g9_reg[31];
	assign v9c8l0_out[8] = g9_reg[32] + g9_reg[33] + g9_reg[34] + g9_reg[35];
	assign v9c8l0_out[9] = g9_reg[36] + g9_reg[37] + g9_reg[38] + g9_reg[39];
	assign v9c8l0_out[10] = g9_reg[40] + g9_reg[41] + g9_reg[42] + g9_reg[43];
	assign v9c8l0_out[11] = g9_reg[44] + g9_reg[45] + g9_reg[46] + g9_reg[47];
	assign v9c8l0_out[12] = g9_reg[48] + g9_reg[49] + g9_reg[50] + g9_reg[51];
	assign v9c8l0_out[13] = g9_reg[52] + g9_reg[53] + g9_reg[54] + g9_reg[55];
	assign v9c8l0_out[14] = g9_reg[56] + g9_reg[57] + g9_reg[58] + g9_reg[59];
	assign v9c8l0_out[15] = g9_reg[60] + g9_reg[61] + g9_reg[62] + g9_reg[63];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 16; i = i + 1)
            v9c8l0[i] <= v9c8l0_out[i];
    end

	reg [3:0] v9c8l1 [0:7];
	logic [3:0] v9c8l1_out [0:7];
	assign v9c8l1_out[0] = v9c8l0[0] + v9c8l0[1];
	assign v9c8l1_out[1] = v9c8l0[2] + v9c8l0[3];
	assign v9c8l1_out[2] = v9c8l0[4] + v9c8l0[5];
	assign v9c8l1_out[3] = v9c8l0[6] + v9c8l0[7];
	assign v9c8l1_out[4] = v9c8l0[8] + v9c8l0[9];
	assign v9c8l1_out[5] = v9c8l0[10] + v9c8l0[11];
	assign v9c8l1_out[6] = v9c8l0[12] + v9c8l0[13];
	assign v9c8l1_out[7] = v9c8l0[14] + v9c8l0[15];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 8; i = i + 1)
            v9c8l1[i] <= v9c8l1_out[i];
    end

	reg [4:0] v9c8l2 [0:3];
	logic [4:0] v9c8l2_out [0:3];
	assign v9c8l2_out[0] = v9c8l1[0] + v9c8l1[1];
	assign v9c8l2_out[1] = v9c8l1[2] + v9c8l1[3];
	assign v9c8l2_out[2] = v9c8l1[4] + v9c8l1[5];
	assign v9c8l2_out[3] = v9c8l1[6] + v9c8l1[7];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 4; i = i + 1)
            v9c8l2[i] <= v9c8l2_out[i];
    end

	reg [5:0] v9c8l3 [0:1];
	logic [5:0] v9c8l3_out [0:1];
	assign v9c8l3_out[0] = v9c8l2[0] + v9c8l2[1];
	assign v9c8l3_out[1] = v9c8l2[2] + v9c8l2[3];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 2; i = i + 1)
            v9c8l3[i] <= v9c8l3_out[i];
    end

	reg [6:0] v9c8l4 [0:0];
	logic [6:0] v9c8l4_out [0:0];
	assign v9c8l4_out[0] = v9c8l3[0] + v9c8l3[1];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 1; i = i + 1)
            v9c8l4[i] <= v9c8l4_out[i];
    end

	reg [7:0] v9c8l5 [0:0];
	logic [7:0] v9c8l5_out [0:0];
	assign v9c8l5_out[0] = v9c8l4[0];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 1; i = i + 1)
            v9c8l5[i] <= v9c8l5_out[i];
    end

	assign val[9] = v9c8l5[0];
	
	// 0.5
	logic [0:11] g10;
	reg [0:11] g10_reg;
	assign g10[0] = l[3] || l[12];
	assign g10[1] = l[27] || l[29] || l[31];
	assign g10[2] = l[38] || l[43] || l[46];
	assign g10[3] = l[55] || l[61];
	assign g10[4] = l[115];
	assign g10[5] = l[138];
	assign g10[6] = l[221];
	assign g10[7] = l[309];
	assign g10[8] = l[364];
	assign g10[9] = l[514];
	assign g10[10] = l[584];
	assign g10[11] = l[644];
	
    always_ff @(posedge clk) begin
        g10_reg <= g10;
    end
    
	logic [2:0] v10c8l0_out [0:2];
	logic [2:0] v10c8l0 [0:2];
	assign v10c8l0_out[0] = g10_reg[0] + g10_reg[1] + g10_reg[2] + g10_reg[3];
	assign v10c8l0_out[1] = g10_reg[4] + g10_reg[5] + g10_reg[6] + g10_reg[7];
	assign v10c8l0_out[2] = g10_reg[8] + g10_reg[9] + g10_reg[10] + g10_reg[11];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 3; i = i + 1)
            v10c8l0[i] <= v10c8l0_out[i];
    end

	reg [3:0] v10c8l1 [0:1];
	logic [3:0] v10c8l1_out [0:1];
	assign v10c8l1_out[0] = v10c8l0[0] + v10c8l0[1];
	assign v10c8l1_out[1] = v10c8l0[2];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 2; i = i + 1)
            v10c8l1[i] <= v10c8l1_out[i];
    end

	reg [4:0] v10c8l2 [0:0];
	logic [4:0] v10c8l2_out [0:0];
	assign v10c8l2_out[0] = v10c8l1[0] + v10c8l1[1];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 1; i = i + 1)
            v10c8l2[i] <= v10c8l2_out[i];
    end

	reg [5:0] v10c8l3 [0:0];
	logic [5:0] v10c8l3_out [0:0];
	assign v10c8l3_out[0] = v10c8l2[0];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 1; i = i + 1)
            v10c8l3[i] <= v10c8l3_out[i];
    end

	reg [6:0] v10c8l4 [0:0];
	logic [6:0] v10c8l4_out [0:0];
	assign v10c8l4_out[0] = v10c8l3[0];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 1; i = i + 1)
            v10c8l4[i] <= v10c8l4_out[i];
    end

	reg [7:0] v10c8l5 [0:0];
	logic [7:0] v10c8l5_out [0:0];
	assign v10c8l5_out[0] = v10c8l4[0];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 1; i = i + 1)
            v10c8l5[i] <= v10c8l5_out[i];
    end

	assign val[10] = v10c8l5[0];
	
	// 1.0
	logic [0:1] g11;
	reg [0:1] g11_reg;
	assign g11[0] = l[7] || l[11] || l[15];
	assign g11[1] = l[21];
	
    always_ff @(posedge clk) begin
        g11_reg <= g11;
    end
    
	logic [2:0] v11c8l0_out [0:0];
	logic [2:0] v11c8l0 [0:0];
	assign v11c8l0_out[0] = g11_reg[0] + g11_reg[1];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 1; i = i + 1)
            v11c8l0[i] <= v11c8l0_out[i];
    end

	reg [3:0] v11c8l1 [0:0];
	logic [3:0] v11c8l1_out [0:0];
	assign v11c8l1_out[0] = v11c8l0[0];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 1; i = i + 1)
            v11c8l1[i] <= v11c8l1_out[i];
    end

	reg [4:0] v11c8l2 [0:0];
	logic [4:0] v11c8l2_out [0:0];
	assign v11c8l2_out[0] = v11c8l1[0];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 1; i = i + 1)
            v11c8l2[i] <= v11c8l2_out[i];
    end

	reg [5:0] v11c8l3 [0:0];
	logic [5:0] v11c8l3_out [0:0];
	assign v11c8l3_out[0] = v11c8l2[0];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 1; i = i + 1)
            v11c8l3[i] <= v11c8l3_out[i];
    end

	reg [6:0] v11c8l4 [0:0];
	logic [6:0] v11c8l4_out [0:0];
	assign v11c8l4_out[0] = v11c8l3[0];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 1; i = i + 1)
            v11c8l4[i] <= v11c8l4_out[i];
    end

	reg [7:0] v11c8l5 [0:0];
	logic [7:0] v11c8l5_out [0:0];
	assign v11c8l5_out[0] = v11c8l4[0];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 1; i = i + 1)
            v11c8l5[i] <= v11c8l5_out[i];
    end

	assign val[11] = v11c8l5[0];
	
	// 2.0
	assign val[12] = 0;
	
endmodule


module leaf_counter_9(input logic clk, input logic [0:1347] l, output logic [7:0] val [0:12]);
    integer i;
	// -0.25
	logic [0:59] g0;
	reg [0:59] g0_reg;
	assign g0[0] = l[24] || l[28];
	assign g0[1] = l[53];
	assign g0[2] = l[81];
	assign g0[3] = l[93];
	assign g0[4] = l[110] || l[119];
	assign g0[5] = l[123] || l[129] || l[133];
	assign g0[6] = l[145];
	assign g0[7] = l[155] || l[159];
	assign g0[8] = l[171] || l[173];
	assign g0[9] = l[196];
	assign g0[10] = l[207] || l[210];
	assign g0[11] = l[223];
	assign g0[12] = l[234] || l[237] || l[240];
	assign g0[13] = l[245] || l[250];
	assign g0[14] = l[260] || l[266];
	assign g0[15] = l[275] || l[277];
	assign g0[16] = l[296];
	assign g0[17] = l[305] || l[308];
	assign g0[18] = l[319] || l[321] || l[325];
	assign g0[19] = l[341];
	assign g0[20] = l[351] || l[352] || l[357];
	assign g0[21] = l[367] || l[368] || l[377];
	assign g0[22] = l[394];
	assign g0[23] = l[421];
	assign g0[24] = l[426] || l[429];
	assign g0[25] = l[442];
	assign g0[26] = l[468] || l[477];
	assign g0[27] = l[492];
	assign g0[28] = l[496] || l[507];
	assign g0[29] = l[519];
	assign g0[30] = l[531];
	assign g0[31] = l[535];
	assign g0[32] = l[558];
	assign g0[33] = l[563] || l[572];
	assign g0[34] = l[591] || l[602];
	assign g0[35] = l[608] || l[612];
	assign g0[36] = l[617] || l[623] || l[626];
	assign g0[37] = l[636];
	assign g0[38] = l[644];
	assign g0[39] = l[655] || l[661];
	assign g0[40] = l[669] || l[676];
	assign g0[41] = l[687];
	assign g0[42] = l[697] || l[700];
	assign g0[43] = l[718];
	assign g0[44] = l[725];
	assign g0[45] = l[748];
	assign g0[46] = l[754] || l[761];
	assign g0[47] = l[820];
	assign g0[48] = l[828];
	assign g0[49] = l[846];
	assign g0[50] = l[869];
	assign g0[51] = l[885];
	assign g0[52] = l[909];
	assign g0[53] = l[948];
	assign g0[54] = l[982];
	assign g0[55] = l[1041] || l[1052];
	assign g0[56] = l[1104];
	assign g0[57] = l[1111];
	assign g0[58] = l[1182];
	assign g0[59] = l[1292];
	
    always_ff @(posedge clk) begin
        g0_reg <= g0;
    end
    
	logic [2:0] v0c9l0_out [0:14];
	logic [2:0] v0c9l0 [0:14];
	assign v0c9l0_out[0] = g0_reg[0] + g0_reg[1] + g0_reg[2] + g0_reg[3];
	assign v0c9l0_out[1] = g0_reg[4] + g0_reg[5] + g0_reg[6] + g0_reg[7];
	assign v0c9l0_out[2] = g0_reg[8] + g0_reg[9] + g0_reg[10] + g0_reg[11];
	assign v0c9l0_out[3] = g0_reg[12] + g0_reg[13] + g0_reg[14] + g0_reg[15];
	assign v0c9l0_out[4] = g0_reg[16] + g0_reg[17] + g0_reg[18] + g0_reg[19];
	assign v0c9l0_out[5] = g0_reg[20] + g0_reg[21] + g0_reg[22] + g0_reg[23];
	assign v0c9l0_out[6] = g0_reg[24] + g0_reg[25] + g0_reg[26] + g0_reg[27];
	assign v0c9l0_out[7] = g0_reg[28] + g0_reg[29] + g0_reg[30] + g0_reg[31];
	assign v0c9l0_out[8] = g0_reg[32] + g0_reg[33] + g0_reg[34] + g0_reg[35];
	assign v0c9l0_out[9] = g0_reg[36] + g0_reg[37] + g0_reg[38] + g0_reg[39];
	assign v0c9l0_out[10] = g0_reg[40] + g0_reg[41] + g0_reg[42] + g0_reg[43];
	assign v0c9l0_out[11] = g0_reg[44] + g0_reg[45] + g0_reg[46] + g0_reg[47];
	assign v0c9l0_out[12] = g0_reg[48] + g0_reg[49] + g0_reg[50] + g0_reg[51];
	assign v0c9l0_out[13] = g0_reg[52] + g0_reg[53] + g0_reg[54] + g0_reg[55];
	assign v0c9l0_out[14] = g0_reg[56] + g0_reg[57] + g0_reg[58] + g0_reg[59];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 15; i = i + 1)
            v0c9l0[i] <= v0c9l0_out[i];
    end

	reg [3:0] v0c9l1 [0:7];
	logic [3:0] v0c9l1_out [0:7];
	assign v0c9l1_out[0] = v0c9l0[0] + v0c9l0[1];
	assign v0c9l1_out[1] = v0c9l0[2] + v0c9l0[3];
	assign v0c9l1_out[2] = v0c9l0[4] + v0c9l0[5];
	assign v0c9l1_out[3] = v0c9l0[6] + v0c9l0[7];
	assign v0c9l1_out[4] = v0c9l0[8] + v0c9l0[9];
	assign v0c9l1_out[5] = v0c9l0[10] + v0c9l0[11];
	assign v0c9l1_out[6] = v0c9l0[12] + v0c9l0[13];
	assign v0c9l1_out[7] = v0c9l0[14];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 8; i = i + 1)
            v0c9l1[i] <= v0c9l1_out[i];
    end

	reg [4:0] v0c9l2 [0:3];
	logic [4:0] v0c9l2_out [0:3];
	assign v0c9l2_out[0] = v0c9l1[0] + v0c9l1[1];
	assign v0c9l2_out[1] = v0c9l1[2] + v0c9l1[3];
	assign v0c9l2_out[2] = v0c9l1[4] + v0c9l1[5];
	assign v0c9l2_out[3] = v0c9l1[6] + v0c9l1[7];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 4; i = i + 1)
            v0c9l2[i] <= v0c9l2_out[i];
    end

	reg [5:0] v0c9l3 [0:1];
	logic [5:0] v0c9l3_out [0:1];
	assign v0c9l3_out[0] = v0c9l2[0] + v0c9l2[1];
	assign v0c9l3_out[1] = v0c9l2[2] + v0c9l2[3];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 2; i = i + 1)
            v0c9l3[i] <= v0c9l3_out[i];
    end

	reg [6:0] v0c9l4 [0:0];
	logic [6:0] v0c9l4_out [0:0];
	assign v0c9l4_out[0] = v0c9l3[0] + v0c9l3[1];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 1; i = i + 1)
            v0c9l4[i] <= v0c9l4_out[i];
    end

	reg [7:0] v0c9l5 [0:0];
	logic [7:0] v0c9l5_out [0:0];
	assign v0c9l5_out[0] = v0c9l4[0];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 1; i = i + 1)
            v0c9l5[i] <= v0c9l5_out[i];
    end

	assign val[0] = v0c9l5[0];
	
	// -0.125
	logic [0:96] g1;
	reg [0:96] g1_reg;
	assign g1[0] = l[0] || l[8];
	assign g1[1] = l[16] || l[20] || l[25] || l[27];
	assign g1[2] = l[30] || l[34] || l[38] || l[41];
	assign g1[3] = l[45] || l[49] || l[57];
	assign g1[4] = l[60] || l[64] || l[68] || l[70] || l[72];
	assign g1[5] = l[80] || l[83] || l[87] || l[89];
	assign g1[6] = l[98] || l[99];
	assign g1[7] = l[109] || l[111] || l[112] || l[114] || l[115] || l[117];
	assign g1[8] = l[122] || l[125] || l[130] || l[132] || l[136];
	assign g1[9] = l[137] || l[141] || l[143] || l[148] || l[152];
	assign g1[10] = l[161] || l[164] || l[165];
	assign g1[11] = l[174] || l[176] || l[177] || l[179] || l[180] || l[182];
	assign g1[12] = l[184] || l[187] || l[188] || l[191] || l[194] || l[198];
	assign g1[13] = l[201] || l[205] || l[206] || l[208] || l[211] || l[213];
	assign g1[14] = l[215] || l[218] || l[221] || l[224] || l[226] || l[229];
	assign g1[15] = l[232];
	assign g1[16] = l[243] || l[244] || l[246] || l[251] || l[252] || l[254] || l[256];
	assign g1[17] = l[263];
	assign g1[18] = l[279] || l[280] || l[282] || l[283];
	assign g1[19] = l[287] || l[292] || l[295] || l[297] || l[300];
	assign g1[20] = l[302] || l[303] || l[306] || l[310] || l[312] || l[315];
	assign g1[21] = l[323] || l[327] || l[329];
	assign g1[22] = l[336] || l[345];
	assign g1[23] = l[354] || l[356] || l[358] || l[363];
	assign g1[24] = l[365] || l[371] || l[373];
	assign g1[25] = l[379] || l[382] || l[384] || l[385] || l[391];
	assign g1[26] = l[396] || l[397] || l[400] || l[402] || l[403] || l[409];
	assign g1[27] = l[412] || l[417] || l[419];
	assign g1[28] = l[424] || l[427] || l[431] || l[433];
	assign g1[29] = l[436] || l[440] || l[448] || l[450];
	assign g1[30] = l[454] || l[459] || l[460] || l[461] || l[463];
	assign g1[31] = l[466] || l[478];
	assign g1[32] = l[484] || l[490];
	assign g1[33] = l[501] || l[510];
	assign g1[34] = l[513] || l[515] || l[517];
	assign g1[35] = l[524] || l[526] || l[532];
	assign g1[36] = l[539] || l[541];
	assign g1[37] = l[548] || l[554] || l[556];
	assign g1[38] = l[565] || l[566];
	assign g1[39] = l[574] || l[580] || l[584] || l[588];
	assign g1[40] = l[590];
	assign g1[41] = l[614] || l[629];
	assign g1[42] = l[634];
	assign g1[43] = l[651];
	assign g1[44] = l[674];
	assign g1[45] = l[680] || l[683] || l[686] || l[690] || l[693];
	assign g1[46] = l[703];
	assign g1[47] = l[707] || l[708] || l[710] || l[714] || l[717];
	assign g1[48] = l[729];
	assign g1[49] = l[732] || l[736] || l[738] || l[742];
	assign g1[50] = l[755] || l[757];
	assign g1[51] = l[768] || l[775] || l[780];
	assign g1[52] = l[787] || l[791] || l[795];
	assign g1[53] = l[797] || l[798] || l[802] || l[804];
	assign g1[54] = l[811] || l[812];
	assign g1[55] = l[817] || l[818] || l[821];
	assign g1[56] = l[825] || l[826] || l[832];
	assign g1[57] = l[839] || l[840] || l[849];
	assign g1[58] = l[853] || l[859];
	assign g1[59] = l[870] || l[873];
	assign g1[60] = l[886] || l[891];
	assign g1[61] = l[898] || l[900] || l[906] || l[908] || l[910];
	assign g1[62] = l[914] || l[919] || l[921];
	assign g1[63] = l[929] || l[937];
	assign g1[64] = l[947] || l[951] || l[953];
	assign g1[65] = l[954] || l[961] || l[965] || l[969];
	assign g1[66] = l[971] || l[978];
	assign g1[67] = l[980] || l[981];
	assign g1[68] = l[992] || l[994] || l[997];
	assign g1[69] = l[1003] || l[1005] || l[1009];
	assign g1[70] = l[1020];
	assign g1[71] = l[1027] || l[1035] || l[1037];
	assign g1[72] = l[1049] || l[1053];
	assign g1[73] = l[1058] || l[1059] || l[1063];
	assign g1[74] = l[1069] || l[1071] || l[1075] || l[1081];
	assign g1[75] = l[1085] || l[1088] || l[1094];
	assign g1[76] = l[1106];
	assign g1[77] = l[1115] || l[1117];
	assign g1[78] = l[1123] || l[1128];
	assign g1[79] = l[1132] || l[1136] || l[1139] || l[1143];
	assign g1[80] = l[1148] || l[1150] || l[1154];
	assign g1[81] = l[1165] || l[1168];
	assign g1[82] = l[1172];
	assign g1[83] = l[1185] || l[1186] || l[1187];
	assign g1[84] = l[1193] || l[1198] || l[1201];
	assign g1[85] = l[1204] || l[1205] || l[1215];
	assign g1[86] = l[1221] || l[1229] || l[1230];
	assign g1[87] = l[1236] || l[1241];
	assign g1[88] = l[1255];
	assign g1[89] = l[1260] || l[1265];
	assign g1[90] = l[1273] || l[1274];
	assign g1[91] = l[1279] || l[1280];
	assign g1[92] = l[1286] || l[1287] || l[1289];
	assign g1[93] = l[1293] || l[1300] || l[1302];
	assign g1[94] = l[1314];
	assign g1[95] = l[1317] || l[1323] || l[1325] || l[1328];
	assign g1[96] = l[1333] || l[1343] || l[1344];
	
    always_ff @(posedge clk) begin
        g1_reg <= g1;
    end
    
	logic [2:0] v1c9l0_out [0:24];
	logic [2:0] v1c9l0 [0:24];
	assign v1c9l0_out[0] = g1_reg[0] + g1_reg[1] + g1_reg[2] + g1_reg[3];
	assign v1c9l0_out[1] = g1_reg[4] + g1_reg[5] + g1_reg[6] + g1_reg[7];
	assign v1c9l0_out[2] = g1_reg[8] + g1_reg[9] + g1_reg[10] + g1_reg[11];
	assign v1c9l0_out[3] = g1_reg[12] + g1_reg[13] + g1_reg[14] + g1_reg[15];
	assign v1c9l0_out[4] = g1_reg[16] + g1_reg[17] + g1_reg[18] + g1_reg[19];
	assign v1c9l0_out[5] = g1_reg[20] + g1_reg[21] + g1_reg[22] + g1_reg[23];
	assign v1c9l0_out[6] = g1_reg[24] + g1_reg[25] + g1_reg[26] + g1_reg[27];
	assign v1c9l0_out[7] = g1_reg[28] + g1_reg[29] + g1_reg[30] + g1_reg[31];
	assign v1c9l0_out[8] = g1_reg[32] + g1_reg[33] + g1_reg[34] + g1_reg[35];
	assign v1c9l0_out[9] = g1_reg[36] + g1_reg[37] + g1_reg[38] + g1_reg[39];
	assign v1c9l0_out[10] = g1_reg[40] + g1_reg[41] + g1_reg[42] + g1_reg[43];
	assign v1c9l0_out[11] = g1_reg[44] + g1_reg[45] + g1_reg[46] + g1_reg[47];
	assign v1c9l0_out[12] = g1_reg[48] + g1_reg[49] + g1_reg[50] + g1_reg[51];
	assign v1c9l0_out[13] = g1_reg[52] + g1_reg[53] + g1_reg[54] + g1_reg[55];
	assign v1c9l0_out[14] = g1_reg[56] + g1_reg[57] + g1_reg[58] + g1_reg[59];
	assign v1c9l0_out[15] = g1_reg[60] + g1_reg[61] + g1_reg[62] + g1_reg[63];
	assign v1c9l0_out[16] = g1_reg[64] + g1_reg[65] + g1_reg[66] + g1_reg[67];
	assign v1c9l0_out[17] = g1_reg[68] + g1_reg[69] + g1_reg[70] + g1_reg[71];
	assign v1c9l0_out[18] = g1_reg[72] + g1_reg[73] + g1_reg[74] + g1_reg[75];
	assign v1c9l0_out[19] = g1_reg[76] + g1_reg[77] + g1_reg[78] + g1_reg[79];
	assign v1c9l0_out[20] = g1_reg[80] + g1_reg[81] + g1_reg[82] + g1_reg[83];
	assign v1c9l0_out[21] = g1_reg[84] + g1_reg[85] + g1_reg[86] + g1_reg[87];
	assign v1c9l0_out[22] = g1_reg[88] + g1_reg[89] + g1_reg[90] + g1_reg[91];
	assign v1c9l0_out[23] = g1_reg[92] + g1_reg[93] + g1_reg[94] + g1_reg[95];
	assign v1c9l0_out[24] = g1_reg[96];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 25; i = i + 1)
            v1c9l0[i] <= v1c9l0_out[i];
    end

	reg [3:0] v1c9l1 [0:12];
	logic [3:0] v1c9l1_out [0:12];
	assign v1c9l1_out[0] = v1c9l0[0] + v1c9l0[1];
	assign v1c9l1_out[1] = v1c9l0[2] + v1c9l0[3];
	assign v1c9l1_out[2] = v1c9l0[4] + v1c9l0[5];
	assign v1c9l1_out[3] = v1c9l0[6] + v1c9l0[7];
	assign v1c9l1_out[4] = v1c9l0[8] + v1c9l0[9];
	assign v1c9l1_out[5] = v1c9l0[10] + v1c9l0[11];
	assign v1c9l1_out[6] = v1c9l0[12] + v1c9l0[13];
	assign v1c9l1_out[7] = v1c9l0[14] + v1c9l0[15];
	assign v1c9l1_out[8] = v1c9l0[16] + v1c9l0[17];
	assign v1c9l1_out[9] = v1c9l0[18] + v1c9l0[19];
	assign v1c9l1_out[10] = v1c9l0[20] + v1c9l0[21];
	assign v1c9l1_out[11] = v1c9l0[22] + v1c9l0[23];
	assign v1c9l1_out[12] = v1c9l0[24];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 13; i = i + 1)
            v1c9l1[i] <= v1c9l1_out[i];
    end

	reg [4:0] v1c9l2 [0:6];
	logic [4:0] v1c9l2_out [0:6];
	assign v1c9l2_out[0] = v1c9l1[0] + v1c9l1[1];
	assign v1c9l2_out[1] = v1c9l1[2] + v1c9l1[3];
	assign v1c9l2_out[2] = v1c9l1[4] + v1c9l1[5];
	assign v1c9l2_out[3] = v1c9l1[6] + v1c9l1[7];
	assign v1c9l2_out[4] = v1c9l1[8] + v1c9l1[9];
	assign v1c9l2_out[5] = v1c9l1[10] + v1c9l1[11];
	assign v1c9l2_out[6] = v1c9l1[12];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 7; i = i + 1)
            v1c9l2[i] <= v1c9l2_out[i];
    end

	reg [5:0] v1c9l3 [0:3];
	logic [5:0] v1c9l3_out [0:3];
	assign v1c9l3_out[0] = v1c9l2[0] + v1c9l2[1];
	assign v1c9l3_out[1] = v1c9l2[2] + v1c9l2[3];
	assign v1c9l3_out[2] = v1c9l2[4] + v1c9l2[5];
	assign v1c9l3_out[3] = v1c9l2[6];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 4; i = i + 1)
            v1c9l3[i] <= v1c9l3_out[i];
    end

	reg [6:0] v1c9l4 [0:1];
	logic [6:0] v1c9l4_out [0:1];
	assign v1c9l4_out[0] = v1c9l3[0] + v1c9l3[1];
	assign v1c9l4_out[1] = v1c9l3[2] + v1c9l3[3];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 2; i = i + 1)
            v1c9l4[i] <= v1c9l4_out[i];
    end

	reg [7:0] v1c9l5 [0:0];
	logic [7:0] v1c9l5_out [0:0];
	assign v1c9l5_out[0] = v1c9l4[0] + v1c9l4[1];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 1; i = i + 1)
            v1c9l5[i] <= v1c9l5_out[i];
    end

	assign val[1] = v1c9l5[0];
	
	// -0.0625
	logic [0:78] g2;
	reg [0:78] g2_reg;
	assign g2[0] = l[4];
	assign g2[1] = l[47] || l[52] || l[55];
	assign g2[2] = l[76] || l[79];
	assign g2[3] = l[91] || l[94] || l[95] || l[100] || l[101] || l[103];
	assign g2[4] = l[106];
	assign g2[5] = l[134];
	assign g2[6] = l[149] || l[151];
	assign g2[7] = l[154] || l[166];
	assign g2[8] = l[172] || l[175] || l[178];
	assign g2[9] = l[212];
	assign g2[10] = l[238] || l[239];
	assign g2[11] = l[253];
	assign g2[12] = l[257];
	assign g2[13] = l[281] || l[284];
	assign g2[14] = l[309];
	assign g2[15] = l[320] || l[322] || l[326] || l[330] || l[332];
	assign g2[16] = l[335];
	assign g2[17] = l[350] || l[353];
	assign g2[18] = l[366] || l[375];
	assign g2[19] = l[389] || l[393];
	assign g2[20] = l[414];
	assign g2[21] = l[434];
	assign g2[22] = l[456];
	assign g2[23] = l[469] || l[470] || l[472] || l[476];
	assign g2[24] = l[487] || l[494];
	assign g2[25] = l[495] || l[500] || l[504] || l[505];
	assign g2[26] = l[525] || l[527];
	assign g2[27] = l[534] || l[537];
	assign g2[28] = l[553] || l[559];
	assign g2[29] = l[561] || l[570] || l[573];
	assign g2[30] = l[582] || l[585] || l[587];
	assign g2[31] = l[592] || l[596] || l[601];
	assign g2[32] = l[605];
	assign g2[33] = l[619] || l[621];
	assign g2[34] = l[631];
	assign g2[35] = l[666] || l[677];
	assign g2[36] = l[691];
	assign g2[37] = l[699] || l[701];
	assign g2[38] = l[719];
	assign g2[39] = l[724];
	assign g2[40] = l[733];
	assign g2[41] = l[760] || l[763];
	assign g2[42] = l[765] || l[769];
	assign g2[43] = l[785];
	assign g2[44] = l[805];
	assign g2[45] = l[806];
	assign g2[46] = l[823];
	assign g2[47] = l[836] || l[841] || l[842];
	assign g2[48] = l[854] || l[862];
	assign g2[49] = l[865] || l[876];
	assign g2[50] = l[915] || l[917] || l[923];
	assign g2[51] = l[925] || l[933];
	assign g2[52] = l[938] || l[941] || l[943] || l[945];
	assign g2[53] = l[957] || l[959];
	assign g2[54] = l[976];
	assign g2[55] = l[984];
	assign g2[56] = l[990];
	assign g2[57] = l[998] || l[1007] || l[1008];
	assign g2[58] = l[1014];
	assign g2[59] = l[1043] || l[1045];
	assign g2[60] = l[1066];
	assign g2[61] = l[1090] || l[1093] || l[1096];
	assign g2[62] = l[1126];
	assign g2[63] = l[1141] || l[1144];
	assign g2[64] = l[1153];
	assign g2[65] = l[1170] || l[1174] || l[1176];
	assign g2[66] = l[1188] || l[1191];
	assign g2[67] = l[1218];
	assign g2[68] = l[1220] || l[1224] || l[1227];
	assign g2[69] = l[1239];
	assign g2[70] = l[1243] || l[1247];
	assign g2[71] = l[1257] || l[1259] || l[1262];
	assign g2[72] = l[1268];
	assign g2[73] = l[1278];
	assign g2[74] = l[1281] || l[1284];
	assign g2[75] = l[1290] || l[1294];
	assign g2[76] = l[1311];
	assign g2[77] = l[1318] || l[1320] || l[1330];
	assign g2[78] = l[1339];
	
    always_ff @(posedge clk) begin
        g2_reg <= g2;
    end
    
	logic [2:0] v2c9l0_out [0:19];
	logic [2:0] v2c9l0 [0:19];
	assign v2c9l0_out[0] = g2_reg[0] + g2_reg[1] + g2_reg[2] + g2_reg[3];
	assign v2c9l0_out[1] = g2_reg[4] + g2_reg[5] + g2_reg[6] + g2_reg[7];
	assign v2c9l0_out[2] = g2_reg[8] + g2_reg[9] + g2_reg[10] + g2_reg[11];
	assign v2c9l0_out[3] = g2_reg[12] + g2_reg[13] + g2_reg[14] + g2_reg[15];
	assign v2c9l0_out[4] = g2_reg[16] + g2_reg[17] + g2_reg[18] + g2_reg[19];
	assign v2c9l0_out[5] = g2_reg[20] + g2_reg[21] + g2_reg[22] + g2_reg[23];
	assign v2c9l0_out[6] = g2_reg[24] + g2_reg[25] + g2_reg[26] + g2_reg[27];
	assign v2c9l0_out[7] = g2_reg[28] + g2_reg[29] + g2_reg[30] + g2_reg[31];
	assign v2c9l0_out[8] = g2_reg[32] + g2_reg[33] + g2_reg[34] + g2_reg[35];
	assign v2c9l0_out[9] = g2_reg[36] + g2_reg[37] + g2_reg[38] + g2_reg[39];
	assign v2c9l0_out[10] = g2_reg[40] + g2_reg[41] + g2_reg[42] + g2_reg[43];
	assign v2c9l0_out[11] = g2_reg[44] + g2_reg[45] + g2_reg[46] + g2_reg[47];
	assign v2c9l0_out[12] = g2_reg[48] + g2_reg[49] + g2_reg[50] + g2_reg[51];
	assign v2c9l0_out[13] = g2_reg[52] + g2_reg[53] + g2_reg[54] + g2_reg[55];
	assign v2c9l0_out[14] = g2_reg[56] + g2_reg[57] + g2_reg[58] + g2_reg[59];
	assign v2c9l0_out[15] = g2_reg[60] + g2_reg[61] + g2_reg[62] + g2_reg[63];
	assign v2c9l0_out[16] = g2_reg[64] + g2_reg[65] + g2_reg[66] + g2_reg[67];
	assign v2c9l0_out[17] = g2_reg[68] + g2_reg[69] + g2_reg[70] + g2_reg[71];
	assign v2c9l0_out[18] = g2_reg[72] + g2_reg[73] + g2_reg[74] + g2_reg[75];
	assign v2c9l0_out[19] = g2_reg[76] + g2_reg[77] + g2_reg[78];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 20; i = i + 1)
            v2c9l0[i] <= v2c9l0_out[i];
    end

	reg [3:0] v2c9l1 [0:9];
	logic [3:0] v2c9l1_out [0:9];
	assign v2c9l1_out[0] = v2c9l0[0] + v2c9l0[1];
	assign v2c9l1_out[1] = v2c9l0[2] + v2c9l0[3];
	assign v2c9l1_out[2] = v2c9l0[4] + v2c9l0[5];
	assign v2c9l1_out[3] = v2c9l0[6] + v2c9l0[7];
	assign v2c9l1_out[4] = v2c9l0[8] + v2c9l0[9];
	assign v2c9l1_out[5] = v2c9l0[10] + v2c9l0[11];
	assign v2c9l1_out[6] = v2c9l0[12] + v2c9l0[13];
	assign v2c9l1_out[7] = v2c9l0[14] + v2c9l0[15];
	assign v2c9l1_out[8] = v2c9l0[16] + v2c9l0[17];
	assign v2c9l1_out[9] = v2c9l0[18] + v2c9l0[19];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 10; i = i + 1)
            v2c9l1[i] <= v2c9l1_out[i];
    end

	reg [4:0] v2c9l2 [0:4];
	logic [4:0] v2c9l2_out [0:4];
	assign v2c9l2_out[0] = v2c9l1[0] + v2c9l1[1];
	assign v2c9l2_out[1] = v2c9l1[2] + v2c9l1[3];
	assign v2c9l2_out[2] = v2c9l1[4] + v2c9l1[5];
	assign v2c9l2_out[3] = v2c9l1[6] + v2c9l1[7];
	assign v2c9l2_out[4] = v2c9l1[8] + v2c9l1[9];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 5; i = i + 1)
            v2c9l2[i] <= v2c9l2_out[i];
    end

	reg [5:0] v2c9l3 [0:2];
	logic [5:0] v2c9l3_out [0:2];
	assign v2c9l3_out[0] = v2c9l2[0] + v2c9l2[1];
	assign v2c9l3_out[1] = v2c9l2[2] + v2c9l2[3];
	assign v2c9l3_out[2] = v2c9l2[4];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 3; i = i + 1)
            v2c9l3[i] <= v2c9l3_out[i];
    end

	reg [6:0] v2c9l4 [0:1];
	logic [6:0] v2c9l4_out [0:1];
	assign v2c9l4_out[0] = v2c9l3[0] + v2c9l3[1];
	assign v2c9l4_out[1] = v2c9l3[2];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 2; i = i + 1)
            v2c9l4[i] <= v2c9l4_out[i];
    end

	reg [7:0] v2c9l5 [0:0];
	logic [7:0] v2c9l5_out [0:0];
	assign v2c9l5_out[0] = v2c9l4[0] + v2c9l4[1];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 1; i = i + 1)
            v2c9l5[i] <= v2c9l5_out[i];
    end

	assign val[2] = v2c9l5[0];
	
	// -0.03125
	logic [0:50] g3;
	reg [0:50] g3_reg;
	assign g3[0] = l[2];
	assign g3[1] = l[46];
	assign g3[2] = l[75];
	assign g3[3] = l[127];
	assign g3[4] = l[147];
	assign g3[5] = l[216];
	assign g3[6] = l[233];
	assign g3[7] = l[247];
	assign g3[8] = l[313];
	assign g3[9] = l[333] || l[337];
	assign g3[10] = l[360] || l[362];
	assign g3[11] = l[438] || l[441];
	assign g3[12] = l[480] || l[483];
	assign g3[13] = l[516];
	assign g3[14] = l[522];
	assign g3[15] = l[544];
	assign g3[16] = l[562];
	assign g3[17] = l[577];
	assign g3[18] = l[594];
	assign g3[19] = l[613];
	assign g3[20] = l[627];
	assign g3[21] = l[637] || l[641];
	assign g3[22] = l[654] || l[660];
	assign g3[23] = l[670];
	assign g3[24] = l[722] || l[726] || l[728];
	assign g3[25] = l[731] || l[741];
	assign g3[26] = l[788];
	assign g3[27] = l[831] || l[833];
	assign g3[28] = l[856];
	assign g3[29] = l[880] || l[884] || l[889];
	assign g3[30] = l[972];
	assign g3[31] = l[989] || l[996];
	assign g3[32] = l[1001] || l[1013];
	assign g3[33] = l[1017];
	assign g3[34] = l[1023] || l[1029] || l[1033];
	assign g3[35] = l[1047];
	assign g3[36] = l[1067] || l[1074] || l[1079];
	assign g3[37] = l[1084];
	assign g3[38] = l[1100] || l[1102] || l[1105];
	assign g3[39] = l[1108] || l[1116];
	assign g3[40] = l[1137];
	assign g3[41] = l[1160];
	assign g3[42] = l[1171];
	assign g3[43] = l[1195];
	assign g3[44] = l[1210] || l[1211];
	assign g3[45] = l[1238] || l[1242];
	assign g3[46] = l[1276];
	assign g3[47] = l[1297];
	assign g3[48] = l[1307] || l[1312];
	assign g3[49] = l[1316] || l[1322] || l[1329];
	assign g3[50] = l[1332] || l[1334] || l[1340];
	
    always_ff @(posedge clk) begin
        g3_reg <= g3;
    end
    
	logic [2:0] v3c9l0_out [0:12];
	logic [2:0] v3c9l0 [0:12];
	assign v3c9l0_out[0] = g3_reg[0] + g3_reg[1] + g3_reg[2] + g3_reg[3];
	assign v3c9l0_out[1] = g3_reg[4] + g3_reg[5] + g3_reg[6] + g3_reg[7];
	assign v3c9l0_out[2] = g3_reg[8] + g3_reg[9] + g3_reg[10] + g3_reg[11];
	assign v3c9l0_out[3] = g3_reg[12] + g3_reg[13] + g3_reg[14] + g3_reg[15];
	assign v3c9l0_out[4] = g3_reg[16] + g3_reg[17] + g3_reg[18] + g3_reg[19];
	assign v3c9l0_out[5] = g3_reg[20] + g3_reg[21] + g3_reg[22] + g3_reg[23];
	assign v3c9l0_out[6] = g3_reg[24] + g3_reg[25] + g3_reg[26] + g3_reg[27];
	assign v3c9l0_out[7] = g3_reg[28] + g3_reg[29] + g3_reg[30] + g3_reg[31];
	assign v3c9l0_out[8] = g3_reg[32] + g3_reg[33] + g3_reg[34] + g3_reg[35];
	assign v3c9l0_out[9] = g3_reg[36] + g3_reg[37] + g3_reg[38] + g3_reg[39];
	assign v3c9l0_out[10] = g3_reg[40] + g3_reg[41] + g3_reg[42] + g3_reg[43];
	assign v3c9l0_out[11] = g3_reg[44] + g3_reg[45] + g3_reg[46] + g3_reg[47];
	assign v3c9l0_out[12] = g3_reg[48] + g3_reg[49] + g3_reg[50];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 13; i = i + 1)
            v3c9l0[i] <= v3c9l0_out[i];
    end

	reg [3:0] v3c9l1 [0:6];
	logic [3:0] v3c9l1_out [0:6];
	assign v3c9l1_out[0] = v3c9l0[0] + v3c9l0[1];
	assign v3c9l1_out[1] = v3c9l0[2] + v3c9l0[3];
	assign v3c9l1_out[2] = v3c9l0[4] + v3c9l0[5];
	assign v3c9l1_out[3] = v3c9l0[6] + v3c9l0[7];
	assign v3c9l1_out[4] = v3c9l0[8] + v3c9l0[9];
	assign v3c9l1_out[5] = v3c9l0[10] + v3c9l0[11];
	assign v3c9l1_out[6] = v3c9l0[12];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 7; i = i + 1)
            v3c9l1[i] <= v3c9l1_out[i];
    end

	reg [4:0] v3c9l2 [0:3];
	logic [4:0] v3c9l2_out [0:3];
	assign v3c9l2_out[0] = v3c9l1[0] + v3c9l1[1];
	assign v3c9l2_out[1] = v3c9l1[2] + v3c9l1[3];
	assign v3c9l2_out[2] = v3c9l1[4] + v3c9l1[5];
	assign v3c9l2_out[3] = v3c9l1[6];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 4; i = i + 1)
            v3c9l2[i] <= v3c9l2_out[i];
    end

	reg [5:0] v3c9l3 [0:1];
	logic [5:0] v3c9l3_out [0:1];
	assign v3c9l3_out[0] = v3c9l2[0] + v3c9l2[1];
	assign v3c9l3_out[1] = v3c9l2[2] + v3c9l2[3];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 2; i = i + 1)
            v3c9l3[i] <= v3c9l3_out[i];
    end

	reg [6:0] v3c9l4 [0:0];
	logic [6:0] v3c9l4_out [0:0];
	assign v3c9l4_out[0] = v3c9l3[0] + v3c9l3[1];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 1; i = i + 1)
            v3c9l4[i] <= v3c9l4_out[i];
    end

	reg [7:0] v3c9l5 [0:0];
	logic [7:0] v3c9l5_out [0:0];
	assign v3c9l5_out[0] = v3c9l4[0];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 1; i = i + 1)
            v3c9l5[i] <= v3c9l5_out[i];
    end

	assign val[3] = v3c9l5[0];
	
	// -0.015625
	logic [0:43] g4;
	reg [0:43] g4_reg;
	assign g4[0] = l[17] || l[29];
	assign g4[1] = l[113];
	assign g4[2] = l[156] || l[168];
	assign g4[3] = l[195];
	assign g4[4] = l[220];
	assign g4[5] = l[274];
	assign g4[6] = l[290];
	assign g4[7] = l[369];
	assign g4[8] = l[388];
	assign g4[9] = l[458];
	assign g4[10] = l[497];
	assign g4[11] = l[555];
	assign g4[12] = l[609] || l[610];
	assign g4[13] = l[622] || l[625];
	assign g4[14] = l[635];
	assign g4[15] = l[640];
	assign g4[16] = l[667];
	assign g4[17] = l[682];
	assign g4[18] = l[698];
	assign g4[19] = l[713];
	assign g4[20] = l[744];
	assign g4[21] = l[782];
	assign g4[22] = l[875];
	assign g4[23] = l[883] || l[894];
	assign g4[24] = l[896];
	assign g4[25] = l[928];
	assign g4[26] = l[963];
	assign g4[27] = l[983];
	assign g4[28] = l[1042];
	assign g4[29] = l[1060];
	assign g4[30] = l[1076];
	assign g4[31] = l[1083];
	assign g4[32] = l[1109] || l[1112] || l[1114];
	assign g4[33] = l[1124] || l[1129];
	assign g4[34] = l[1135];
	assign g4[35] = l[1146];
	assign g4[36] = l[1177];
	assign g4[37] = l[1184];
	assign g4[38] = l[1214];
	assign g4[39] = l[1234];
	assign g4[40] = l[1246] || l[1253];
	assign g4[41] = l[1270] || l[1272];
	assign g4[42] = l[1298];
	assign g4[43] = l[1336] || l[1342] || l[1347];
	
    always_ff @(posedge clk) begin
        g4_reg <= g4;
    end
    
	logic [2:0] v4c9l0_out [0:10];
	logic [2:0] v4c9l0 [0:10];
	assign v4c9l0_out[0] = g4_reg[0] + g4_reg[1] + g4_reg[2] + g4_reg[3];
	assign v4c9l0_out[1] = g4_reg[4] + g4_reg[5] + g4_reg[6] + g4_reg[7];
	assign v4c9l0_out[2] = g4_reg[8] + g4_reg[9] + g4_reg[10] + g4_reg[11];
	assign v4c9l0_out[3] = g4_reg[12] + g4_reg[13] + g4_reg[14] + g4_reg[15];
	assign v4c9l0_out[4] = g4_reg[16] + g4_reg[17] + g4_reg[18] + g4_reg[19];
	assign v4c9l0_out[5] = g4_reg[20] + g4_reg[21] + g4_reg[22] + g4_reg[23];
	assign v4c9l0_out[6] = g4_reg[24] + g4_reg[25] + g4_reg[26] + g4_reg[27];
	assign v4c9l0_out[7] = g4_reg[28] + g4_reg[29] + g4_reg[30] + g4_reg[31];
	assign v4c9l0_out[8] = g4_reg[32] + g4_reg[33] + g4_reg[34] + g4_reg[35];
	assign v4c9l0_out[9] = g4_reg[36] + g4_reg[37] + g4_reg[38] + g4_reg[39];
	assign v4c9l0_out[10] = g4_reg[40] + g4_reg[41] + g4_reg[42] + g4_reg[43];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 11; i = i + 1)
            v4c9l0[i] <= v4c9l0_out[i];
    end

	reg [3:0] v4c9l1 [0:5];
	logic [3:0] v4c9l1_out [0:5];
	assign v4c9l1_out[0] = v4c9l0[0] + v4c9l0[1];
	assign v4c9l1_out[1] = v4c9l0[2] + v4c9l0[3];
	assign v4c9l1_out[2] = v4c9l0[4] + v4c9l0[5];
	assign v4c9l1_out[3] = v4c9l0[6] + v4c9l0[7];
	assign v4c9l1_out[4] = v4c9l0[8] + v4c9l0[9];
	assign v4c9l1_out[5] = v4c9l0[10];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 6; i = i + 1)
            v4c9l1[i] <= v4c9l1_out[i];
    end

	reg [4:0] v4c9l2 [0:2];
	logic [4:0] v4c9l2_out [0:2];
	assign v4c9l2_out[0] = v4c9l1[0] + v4c9l1[1];
	assign v4c9l2_out[1] = v4c9l1[2] + v4c9l1[3];
	assign v4c9l2_out[2] = v4c9l1[4] + v4c9l1[5];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 3; i = i + 1)
            v4c9l2[i] <= v4c9l2_out[i];
    end

	reg [5:0] v4c9l3 [0:1];
	logic [5:0] v4c9l3_out [0:1];
	assign v4c9l3_out[0] = v4c9l2[0] + v4c9l2[1];
	assign v4c9l3_out[1] = v4c9l2[2];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 2; i = i + 1)
            v4c9l3[i] <= v4c9l3_out[i];
    end

	reg [6:0] v4c9l4 [0:0];
	logic [6:0] v4c9l4_out [0:0];
	assign v4c9l4_out[0] = v4c9l3[0] + v4c9l3[1];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 1; i = i + 1)
            v4c9l4[i] <= v4c9l4_out[i];
    end

	reg [7:0] v4c9l5 [0:0];
	logic [7:0] v4c9l5_out [0:0];
	assign v4c9l5_out[0] = v4c9l4[0];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 1; i = i + 1)
            v4c9l5[i] <= v4c9l5_out[i];
    end

	assign val[4] = v4c9l5[0];
	
	// 0.015625
	logic [0:40] g5;
	reg [0:40] g5_reg;
	assign g5[0] = l[37];
	assign g5[1] = l[204];
	assign g5[2] = l[241];
	assign g5[3] = l[271];
	assign g5[4] = l[346];
	assign g5[5] = l[372];
	assign g5[6] = l[395];
	assign g5[7] = l[432];
	assign g5[8] = l[449];
	assign g5[9] = l[464];
	assign g5[10] = l[506];
	assign g5[11] = l[560] || l[564];
	assign g5[12] = l[578] || l[581];
	assign g5[13] = l[600];
	assign g5[14] = l[606];
	assign g5[15] = l[638];
	assign g5[16] = l[656];
	assign g5[17] = l[684];
	assign g5[18] = l[706] || l[709] || l[716];
	assign g5[19] = l[745];
	assign g5[20] = l[762];
	assign g5[21] = l[781] || l[786];
	assign g5[22] = l[807];
	assign g5[23] = l[827];
	assign g5[24] = l[837] || l[838];
	assign g5[25] = l[895];
	assign g5[26] = l[926] || l[930];
	assign g5[27] = l[964] || l[966] || l[968];
	assign g5[28] = l[1018];
	assign g5[29] = l[1080];
	assign g5[30] = l[1120];
	assign g5[31] = l[1147];
	assign g5[32] = l[1163];
	assign g5[33] = l[1189];
	assign g5[34] = l[1226] || l[1231];
	assign g5[35] = l[1235];
	assign g5[36] = l[1258];
	assign g5[37] = l[1269];
	assign g5[38] = l[1275];
	assign g5[39] = l[1309];
	assign g5[40] = l[1327];
	
    always_ff @(posedge clk) begin
        g5_reg <= g5;
    end
    
	logic [2:0] v5c9l0_out [0:10];
	logic [2:0] v5c9l0 [0:10];
	assign v5c9l0_out[0] = g5_reg[0] + g5_reg[1] + g5_reg[2] + g5_reg[3];
	assign v5c9l0_out[1] = g5_reg[4] + g5_reg[5] + g5_reg[6] + g5_reg[7];
	assign v5c9l0_out[2] = g5_reg[8] + g5_reg[9] + g5_reg[10] + g5_reg[11];
	assign v5c9l0_out[3] = g5_reg[12] + g5_reg[13] + g5_reg[14] + g5_reg[15];
	assign v5c9l0_out[4] = g5_reg[16] + g5_reg[17] + g5_reg[18] + g5_reg[19];
	assign v5c9l0_out[5] = g5_reg[20] + g5_reg[21] + g5_reg[22] + g5_reg[23];
	assign v5c9l0_out[6] = g5_reg[24] + g5_reg[25] + g5_reg[26] + g5_reg[27];
	assign v5c9l0_out[7] = g5_reg[28] + g5_reg[29] + g5_reg[30] + g5_reg[31];
	assign v5c9l0_out[8] = g5_reg[32] + g5_reg[33] + g5_reg[34] + g5_reg[35];
	assign v5c9l0_out[9] = g5_reg[36] + g5_reg[37] + g5_reg[38] + g5_reg[39];
	assign v5c9l0_out[10] = g5_reg[40];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 11; i = i + 1)
            v5c9l0[i] <= v5c9l0_out[i];
    end

	reg [3:0] v5c9l1 [0:5];
	logic [3:0] v5c9l1_out [0:5];
	assign v5c9l1_out[0] = v5c9l0[0] + v5c9l0[1];
	assign v5c9l1_out[1] = v5c9l0[2] + v5c9l0[3];
	assign v5c9l1_out[2] = v5c9l0[4] + v5c9l0[5];
	assign v5c9l1_out[3] = v5c9l0[6] + v5c9l0[7];
	assign v5c9l1_out[4] = v5c9l0[8] + v5c9l0[9];
	assign v5c9l1_out[5] = v5c9l0[10];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 6; i = i + 1)
            v5c9l1[i] <= v5c9l1_out[i];
    end

	reg [4:0] v5c9l2 [0:2];
	logic [4:0] v5c9l2_out [0:2];
	assign v5c9l2_out[0] = v5c9l1[0] + v5c9l1[1];
	assign v5c9l2_out[1] = v5c9l1[2] + v5c9l1[3];
	assign v5c9l2_out[2] = v5c9l1[4] + v5c9l1[5];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 3; i = i + 1)
            v5c9l2[i] <= v5c9l2_out[i];
    end

	reg [5:0] v5c9l3 [0:1];
	logic [5:0] v5c9l3_out [0:1];
	assign v5c9l3_out[0] = v5c9l2[0] + v5c9l2[1];
	assign v5c9l3_out[1] = v5c9l2[2];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 2; i = i + 1)
            v5c9l3[i] <= v5c9l3_out[i];
    end

	reg [6:0] v5c9l4 [0:0];
	logic [6:0] v5c9l4_out [0:0];
	assign v5c9l4_out[0] = v5c9l3[0] + v5c9l3[1];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 1; i = i + 1)
            v5c9l4[i] <= v5c9l4_out[i];
    end

	reg [7:0] v5c9l5 [0:0];
	logic [7:0] v5c9l5_out [0:0];
	assign v5c9l5_out[0] = v5c9l4[0];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 1; i = i + 1)
            v5c9l5[i] <= v5c9l5_out[i];
    end

	assign val[5] = v5c9l5[0];
	
	// 0.03125
	logic [0:64] g6;
	reg [0:64] g6_reg;
	assign g6[0] = l[21];
	assign g6[1] = l[31];
	assign g6[2] = l[54];
	assign g6[3] = l[82];
	assign g6[4] = l[126];
	assign g6[5] = l[138];
	assign g6[6] = l[200] || l[214];
	assign g6[7] = l[222];
	assign g6[8] = l[242];
	assign g6[9] = l[286];
	assign g6[10] = l[301];
	assign g6[11] = l[328];
	assign g6[12] = l[364];
	assign g6[13] = l[411];
	assign g6[14] = l[423] || l[428];
	assign g6[15] = l[437];
	assign g6[16] = l[453];
	assign g6[17] = l[485] || l[489];
	assign g6[18] = l[503] || l[508];
	assign g6[19] = l[521] || l[528];
	assign g6[20] = l[533];
	assign g6[21] = l[549];
	assign g6[22] = l[567];
	assign g6[23] = l[576] || l[589];
	assign g6[24] = l[616] || l[618];
	assign g6[25] = l[649];
	assign g6[26] = l[657];
	assign g6[27] = l[668];
	assign g6[28] = l[689];
	assign g6[29] = l[715];
	assign g6[30] = l[721];
	assign g6[31] = l[735] || l[740] || l[743];
	assign g6[32] = l[750];
	assign g6[33] = l[752];
	assign g6[34] = l[773];
	assign g6[35] = l[799];
	assign g6[36] = l[810];
	assign g6[37] = l[824];
	assign g6[38] = l[852] || l[857] || l[858];
	assign g6[39] = l[871] || l[872];
	assign g6[40] = l[881] || l[882] || l[887];
	assign g6[41] = l[897] || l[903] || l[905];
	assign g6[42] = l[912];
	assign g6[43] = l[942] || l[946] || l[950];
	assign g6[44] = l[958];
	assign g6[45] = l[973];
	assign g6[46] = l[1006] || l[1012];
	assign g6[47] = l[1015] || l[1016];
	assign g6[48] = l[1024] || l[1031];
	assign g6[49] = l[1072];
	assign g6[50] = l[1082] || l[1089];
	assign g6[51] = l[1103];
	assign g6[52] = l[1107];
	assign g6[53] = l[1122];
	assign g6[54] = l[1164];
	assign g6[55] = l[1173] || l[1175] || l[1181];
	assign g6[56] = l[1190] || l[1192] || l[1194] || l[1199];
	assign g6[57] = l[1206] || l[1212] || l[1216];
	assign g6[58] = l[1219] || l[1222] || l[1223];
	assign g6[59] = l[1245] || l[1251];
	assign g6[60] = l[1283];
	assign g6[61] = l[1299];
	assign g6[62] = l[1313];
	assign g6[63] = l[1321] || l[1331];
	assign g6[64] = l[1335];
	
    always_ff @(posedge clk) begin
        g6_reg <= g6;
    end
    
	logic [2:0] v6c9l0_out [0:16];
	logic [2:0] v6c9l0 [0:16];
	assign v6c9l0_out[0] = g6_reg[0] + g6_reg[1] + g6_reg[2] + g6_reg[3];
	assign v6c9l0_out[1] = g6_reg[4] + g6_reg[5] + g6_reg[6] + g6_reg[7];
	assign v6c9l0_out[2] = g6_reg[8] + g6_reg[9] + g6_reg[10] + g6_reg[11];
	assign v6c9l0_out[3] = g6_reg[12] + g6_reg[13] + g6_reg[14] + g6_reg[15];
	assign v6c9l0_out[4] = g6_reg[16] + g6_reg[17] + g6_reg[18] + g6_reg[19];
	assign v6c9l0_out[5] = g6_reg[20] + g6_reg[21] + g6_reg[22] + g6_reg[23];
	assign v6c9l0_out[6] = g6_reg[24] + g6_reg[25] + g6_reg[26] + g6_reg[27];
	assign v6c9l0_out[7] = g6_reg[28] + g6_reg[29] + g6_reg[30] + g6_reg[31];
	assign v6c9l0_out[8] = g6_reg[32] + g6_reg[33] + g6_reg[34] + g6_reg[35];
	assign v6c9l0_out[9] = g6_reg[36] + g6_reg[37] + g6_reg[38] + g6_reg[39];
	assign v6c9l0_out[10] = g6_reg[40] + g6_reg[41] + g6_reg[42] + g6_reg[43];
	assign v6c9l0_out[11] = g6_reg[44] + g6_reg[45] + g6_reg[46] + g6_reg[47];
	assign v6c9l0_out[12] = g6_reg[48] + g6_reg[49] + g6_reg[50] + g6_reg[51];
	assign v6c9l0_out[13] = g6_reg[52] + g6_reg[53] + g6_reg[54] + g6_reg[55];
	assign v6c9l0_out[14] = g6_reg[56] + g6_reg[57] + g6_reg[58] + g6_reg[59];
	assign v6c9l0_out[15] = g6_reg[60] + g6_reg[61] + g6_reg[62] + g6_reg[63];
	assign v6c9l0_out[16] = g6_reg[64];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 17; i = i + 1)
            v6c9l0[i] <= v6c9l0_out[i];
    end

	reg [3:0] v6c9l1 [0:8];
	logic [3:0] v6c9l1_out [0:8];
	assign v6c9l1_out[0] = v6c9l0[0] + v6c9l0[1];
	assign v6c9l1_out[1] = v6c9l0[2] + v6c9l0[3];
	assign v6c9l1_out[2] = v6c9l0[4] + v6c9l0[5];
	assign v6c9l1_out[3] = v6c9l0[6] + v6c9l0[7];
	assign v6c9l1_out[4] = v6c9l0[8] + v6c9l0[9];
	assign v6c9l1_out[5] = v6c9l0[10] + v6c9l0[11];
	assign v6c9l1_out[6] = v6c9l0[12] + v6c9l0[13];
	assign v6c9l1_out[7] = v6c9l0[14] + v6c9l0[15];
	assign v6c9l1_out[8] = v6c9l0[16];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 9; i = i + 1)
            v6c9l1[i] <= v6c9l1_out[i];
    end

	reg [4:0] v6c9l2 [0:4];
	logic [4:0] v6c9l2_out [0:4];
	assign v6c9l2_out[0] = v6c9l1[0] + v6c9l1[1];
	assign v6c9l2_out[1] = v6c9l1[2] + v6c9l1[3];
	assign v6c9l2_out[2] = v6c9l1[4] + v6c9l1[5];
	assign v6c9l2_out[3] = v6c9l1[6] + v6c9l1[7];
	assign v6c9l2_out[4] = v6c9l1[8];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 5; i = i + 1)
            v6c9l2[i] <= v6c9l2_out[i];
    end

	reg [5:0] v6c9l3 [0:2];
	logic [5:0] v6c9l3_out [0:2];
	assign v6c9l3_out[0] = v6c9l2[0] + v6c9l2[1];
	assign v6c9l3_out[1] = v6c9l2[2] + v6c9l2[3];
	assign v6c9l3_out[2] = v6c9l2[4];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 3; i = i + 1)
            v6c9l3[i] <= v6c9l3_out[i];
    end

	reg [6:0] v6c9l4 [0:1];
	logic [6:0] v6c9l4_out [0:1];
	assign v6c9l4_out[0] = v6c9l3[0] + v6c9l3[1];
	assign v6c9l4_out[1] = v6c9l3[2];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 2; i = i + 1)
            v6c9l4[i] <= v6c9l4_out[i];
    end

	reg [7:0] v6c9l5 [0:0];
	logic [7:0] v6c9l5_out [0:0];
	assign v6c9l5_out[0] = v6c9l4[0] + v6c9l4[1];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 1; i = i + 1)
            v6c9l5[i] <= v6c9l5_out[i];
    end

	assign val[6] = v6c9l5[0];
	
	// 0.0625
	logic [0:76] g7;
	reg [0:76] g7_reg;
	assign g7[0] = l[13] || l[14];
	assign g7[1] = l[50] || l[58];
	assign g7[2] = l[62] || l[67];
	assign g7[3] = l[85] || l[88];
	assign g7[4] = l[92] || l[104];
	assign g7[5] = l[135];
	assign g7[6] = l[146];
	assign g7[7] = l[153] || l[158];
	assign g7[8] = l[181];
	assign g7[9] = l[185] || l[186] || l[189] || l[190];
	assign g7[10] = l[217] || l[219];
	assign g7[11] = l[231] || l[235];
	assign g7[12] = l[255];
	assign g7[13] = l[278];
	assign g7[14] = l[293];
	assign g7[15] = l[316];
	assign g7[16] = l[318] || l[324];
	assign g7[17] = l[349] || l[355];
	assign g7[18] = l[378];
	assign g7[19] = l[381] || l[383] || l[390];
	assign g7[20] = l[399] || l[401] || l[406] || l[408];
	assign g7[21] = l[415] || l[420];
	assign g7[22] = l[457];
	assign g7[23] = l[465] || l[467] || l[473] || l[479];
	assign g7[24] = l[502];
	assign g7[25] = l[536];
	assign g7[26] = l[550] || l[552];
	assign g7[27] = l[583];
	assign g7[28] = l[597] || l[599];
	assign g7[29] = l[607];
	assign g7[30] = l[620];
	assign g7[31] = l[643];
	assign g7[32] = l[663];
	assign g7[33] = l[671] || l[678];
	assign g7[34] = l[685] || l[694];
	assign g7[35] = l[705] || l[712];
	assign g7[36] = l[723] || l[730];
	assign g7[37] = l[759];
	assign g7[38] = l[766] || l[770] || l[772];
	assign g7[39] = l[800];
	assign g7[40] = l[813];
	assign g7[41] = l[829];
	assign g7[42] = l[835] || l[848];
	assign g7[43] = l[851] || l[855] || l[861];
	assign g7[44] = l[874];
	assign g7[45] = l[902] || l[907];
	assign g7[46] = l[918] || l[920];
	assign g7[47] = l[927] || l[932] || l[935];
	assign g7[48] = l[944] || l[952];
	assign g7[49] = l[956] || l[960];
	assign g7[50] = l[975] || l[977];
	assign g7[51] = l[987];
	assign g7[52] = l[1004];
	assign g7[53] = l[1021];
	assign g7[54] = l[1025] || l[1034] || l[1038];
	assign g7[55] = l[1040] || l[1044] || l[1046] || l[1048];
	assign g7[56] = l[1056];
	assign g7[57] = l[1068] || l[1073] || l[1078];
	assign g7[58] = l[1092];
	assign g7[59] = l[1099] || l[1101];
	assign g7[60] = l[1110] || l[1118];
	assign g7[61] = l[1125] || l[1127];
	assign g7[62] = l[1131] || l[1138] || l[1140] || l[1145];
	assign g7[63] = l[1151] || l[1152] || l[1155] || l[1158];
	assign g7[64] = l[1166];
	assign g7[65] = l[1169] || l[1179];
	assign g7[66] = l[1202];
	assign g7[67] = l[1203] || l[1208] || l[1209] || l[1217];
	assign g7[68] = l[1232];
	assign g7[69] = l[1240];
	assign g7[70] = l[1264];
	assign g7[71] = l[1267] || l[1271];
	assign g7[72] = l[1282] || l[1285];
	assign g7[73] = l[1301];
	assign g7[74] = l[1310];
	assign g7[75] = l[1319];
	assign g7[76] = l[1345] || l[1346];
	
    always_ff @(posedge clk) begin
        g7_reg <= g7;
    end
    
	logic [2:0] v7c9l0_out [0:19];
	logic [2:0] v7c9l0 [0:19];
	assign v7c9l0_out[0] = g7_reg[0] + g7_reg[1] + g7_reg[2] + g7_reg[3];
	assign v7c9l0_out[1] = g7_reg[4] + g7_reg[5] + g7_reg[6] + g7_reg[7];
	assign v7c9l0_out[2] = g7_reg[8] + g7_reg[9] + g7_reg[10] + g7_reg[11];
	assign v7c9l0_out[3] = g7_reg[12] + g7_reg[13] + g7_reg[14] + g7_reg[15];
	assign v7c9l0_out[4] = g7_reg[16] + g7_reg[17] + g7_reg[18] + g7_reg[19];
	assign v7c9l0_out[5] = g7_reg[20] + g7_reg[21] + g7_reg[22] + g7_reg[23];
	assign v7c9l0_out[6] = g7_reg[24] + g7_reg[25] + g7_reg[26] + g7_reg[27];
	assign v7c9l0_out[7] = g7_reg[28] + g7_reg[29] + g7_reg[30] + g7_reg[31];
	assign v7c9l0_out[8] = g7_reg[32] + g7_reg[33] + g7_reg[34] + g7_reg[35];
	assign v7c9l0_out[9] = g7_reg[36] + g7_reg[37] + g7_reg[38] + g7_reg[39];
	assign v7c9l0_out[10] = g7_reg[40] + g7_reg[41] + g7_reg[42] + g7_reg[43];
	assign v7c9l0_out[11] = g7_reg[44] + g7_reg[45] + g7_reg[46] + g7_reg[47];
	assign v7c9l0_out[12] = g7_reg[48] + g7_reg[49] + g7_reg[50] + g7_reg[51];
	assign v7c9l0_out[13] = g7_reg[52] + g7_reg[53] + g7_reg[54] + g7_reg[55];
	assign v7c9l0_out[14] = g7_reg[56] + g7_reg[57] + g7_reg[58] + g7_reg[59];
	assign v7c9l0_out[15] = g7_reg[60] + g7_reg[61] + g7_reg[62] + g7_reg[63];
	assign v7c9l0_out[16] = g7_reg[64] + g7_reg[65] + g7_reg[66] + g7_reg[67];
	assign v7c9l0_out[17] = g7_reg[68] + g7_reg[69] + g7_reg[70] + g7_reg[71];
	assign v7c9l0_out[18] = g7_reg[72] + g7_reg[73] + g7_reg[74] + g7_reg[75];
	assign v7c9l0_out[19] = g7_reg[76];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 20; i = i + 1)
            v7c9l0[i] <= v7c9l0_out[i];
    end

	reg [3:0] v7c9l1 [0:9];
	logic [3:0] v7c9l1_out [0:9];
	assign v7c9l1_out[0] = v7c9l0[0] + v7c9l0[1];
	assign v7c9l1_out[1] = v7c9l0[2] + v7c9l0[3];
	assign v7c9l1_out[2] = v7c9l0[4] + v7c9l0[5];
	assign v7c9l1_out[3] = v7c9l0[6] + v7c9l0[7];
	assign v7c9l1_out[4] = v7c9l0[8] + v7c9l0[9];
	assign v7c9l1_out[5] = v7c9l0[10] + v7c9l0[11];
	assign v7c9l1_out[6] = v7c9l0[12] + v7c9l0[13];
	assign v7c9l1_out[7] = v7c9l0[14] + v7c9l0[15];
	assign v7c9l1_out[8] = v7c9l0[16] + v7c9l0[17];
	assign v7c9l1_out[9] = v7c9l0[18] + v7c9l0[19];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 10; i = i + 1)
            v7c9l1[i] <= v7c9l1_out[i];
    end

	reg [4:0] v7c9l2 [0:4];
	logic [4:0] v7c9l2_out [0:4];
	assign v7c9l2_out[0] = v7c9l1[0] + v7c9l1[1];
	assign v7c9l2_out[1] = v7c9l1[2] + v7c9l1[3];
	assign v7c9l2_out[2] = v7c9l1[4] + v7c9l1[5];
	assign v7c9l2_out[3] = v7c9l1[6] + v7c9l1[7];
	assign v7c9l2_out[4] = v7c9l1[8] + v7c9l1[9];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 5; i = i + 1)
            v7c9l2[i] <= v7c9l2_out[i];
    end

	reg [5:0] v7c9l3 [0:2];
	logic [5:0] v7c9l3_out [0:2];
	assign v7c9l3_out[0] = v7c9l2[0] + v7c9l2[1];
	assign v7c9l3_out[1] = v7c9l2[2] + v7c9l2[3];
	assign v7c9l3_out[2] = v7c9l2[4];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 3; i = i + 1)
            v7c9l3[i] <= v7c9l3_out[i];
    end

	reg [6:0] v7c9l4 [0:1];
	logic [6:0] v7c9l4_out [0:1];
	assign v7c9l4_out[0] = v7c9l3[0] + v7c9l3[1];
	assign v7c9l4_out[1] = v7c9l3[2];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 2; i = i + 1)
            v7c9l4[i] <= v7c9l4_out[i];
    end

	reg [7:0] v7c9l5 [0:0];
	logic [7:0] v7c9l5_out [0:0];
	assign v7c9l5_out[0] = v7c9l4[0] + v7c9l4[1];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 1; i = i + 1)
            v7c9l5[i] <= v7c9l5_out[i];
    end

	assign val[7] = v7c9l5[0];
	
	// 0.125
	logic [0:81] g8;
	reg [0:81] g8_reg;
	assign g8[0] = l[6] || l[9] || l[10];
	assign g8[1] = l[22];
	assign g8[2] = l[35] || l[44];
	assign g8[3] = l[61];
	assign g8[4] = l[78] || l[84];
	assign g8[5] = l[96];
	assign g8[6] = l[108] || l[118];
	assign g8[7] = l[121] || l[124] || l[131];
	assign g8[8] = l[139];
	assign g8[9] = l[160] || l[162];
	assign g8[10] = l[170] || l[183];
	assign g8[11] = l[193];
	assign g8[12] = l[203] || l[209];
	assign g8[13] = l[259] || l[261] || l[264] || l[267] || l[269];
	assign g8[14] = l[272] || l[276];
	assign g8[15] = l[289] || l[291];
	assign g8[16] = l[307] || l[311];
	assign g8[17] = l[334] || l[339] || l[342];
	assign g8[18] = l[361];
	assign g8[19] = l[370] || l[376];
	assign g8[20] = l[386] || l[387];
	assign g8[21] = l[398] || l[404] || l[410];
	assign g8[22] = l[418];
	assign g8[23] = l[439] || l[443] || l[444] || l[447] || l[451];
	assign g8[24] = l[471] || l[474];
	assign g8[25] = l[481] || l[482] || l[486] || l[491] || l[493];
	assign g8[26] = l[499] || l[509];
	assign g8[27] = l[518] || l[520];
	assign g8[28] = l[530];
	assign g8[29] = l[538] || l[540] || l[546];
	assign g8[30] = l[557];
	assign g8[31] = l[569] || l[571];
	assign g8[32] = l[575] || l[579] || l[586];
	assign g8[33] = l[593] || l[595];
	assign g8[34] = l[611];
	assign g8[35] = l[615] || l[624];
	assign g8[36] = l[632];
	assign g8[37] = l[639] || l[648] || l[652];
	assign g8[38] = l[673] || l[675];
	assign g8[39] = l[681];
	assign g8[40] = l[696] || l[702];
	assign g8[41] = l[711];
	assign g8[42] = l[734];
	assign g8[43] = l[746];
	assign g8[44] = l[774] || l[778];
	assign g8[45] = l[783] || l[789] || l[792] || l[794];
	assign g8[46] = l[809] || l[815];
	assign g8[47] = l[822];
	assign g8[48] = l[830];
	assign g8[49] = l[845];
	assign g8[50] = l[863];
	assign g8[51] = l[867] || l[868] || l[877];
	assign g8[52] = l[888] || l[892];
	assign g8[53] = l[899];
	assign g8[54] = l[916];
	assign g8[55] = l[931];
	assign g8[56] = l[939];
	assign g8[57] = l[962] || l[967];
	assign g8[58] = l[985];
	assign g8[59] = l[995];
	assign g8[60] = l[999] || l[1000] || l[1010];
	assign g8[61] = l[1019];
	assign g8[62] = l[1032];
	assign g8[63] = l[1054];
	assign g8[64] = l[1061] || l[1065];
	assign g8[65] = l[1077];
	assign g8[66] = l[1086] || l[1091] || l[1097];
	assign g8[67] = l[1113] || l[1119];
	assign g8[68] = l[1134];
	assign g8[69] = l[1156];
	assign g8[70] = l[1162];
	assign g8[71] = l[1178];
	assign g8[72] = l[1197] || l[1200];
	assign g8[73] = l[1213];
	assign g8[74] = l[1225] || l[1228];
	assign g8[75] = l[1237];
	assign g8[76] = l[1248] || l[1254];
	assign g8[77] = l[1261];
	assign g8[78] = l[1288];
	assign g8[79] = l[1295] || l[1296] || l[1304];
	assign g8[80] = l[1326];
	assign g8[81] = l[1338] || l[1341];
	
    always_ff @(posedge clk) begin
        g8_reg <= g8;
    end
    
	logic [2:0] v8c9l0_out [0:20];
	logic [2:0] v8c9l0 [0:20];
	assign v8c9l0_out[0] = g8_reg[0] + g8_reg[1] + g8_reg[2] + g8_reg[3];
	assign v8c9l0_out[1] = g8_reg[4] + g8_reg[5] + g8_reg[6] + g8_reg[7];
	assign v8c9l0_out[2] = g8_reg[8] + g8_reg[9] + g8_reg[10] + g8_reg[11];
	assign v8c9l0_out[3] = g8_reg[12] + g8_reg[13] + g8_reg[14] + g8_reg[15];
	assign v8c9l0_out[4] = g8_reg[16] + g8_reg[17] + g8_reg[18] + g8_reg[19];
	assign v8c9l0_out[5] = g8_reg[20] + g8_reg[21] + g8_reg[22] + g8_reg[23];
	assign v8c9l0_out[6] = g8_reg[24] + g8_reg[25] + g8_reg[26] + g8_reg[27];
	assign v8c9l0_out[7] = g8_reg[28] + g8_reg[29] + g8_reg[30] + g8_reg[31];
	assign v8c9l0_out[8] = g8_reg[32] + g8_reg[33] + g8_reg[34] + g8_reg[35];
	assign v8c9l0_out[9] = g8_reg[36] + g8_reg[37] + g8_reg[38] + g8_reg[39];
	assign v8c9l0_out[10] = g8_reg[40] + g8_reg[41] + g8_reg[42] + g8_reg[43];
	assign v8c9l0_out[11] = g8_reg[44] + g8_reg[45] + g8_reg[46] + g8_reg[47];
	assign v8c9l0_out[12] = g8_reg[48] + g8_reg[49] + g8_reg[50] + g8_reg[51];
	assign v8c9l0_out[13] = g8_reg[52] + g8_reg[53] + g8_reg[54] + g8_reg[55];
	assign v8c9l0_out[14] = g8_reg[56] + g8_reg[57] + g8_reg[58] + g8_reg[59];
	assign v8c9l0_out[15] = g8_reg[60] + g8_reg[61] + g8_reg[62] + g8_reg[63];
	assign v8c9l0_out[16] = g8_reg[64] + g8_reg[65] + g8_reg[66] + g8_reg[67];
	assign v8c9l0_out[17] = g8_reg[68] + g8_reg[69] + g8_reg[70] + g8_reg[71];
	assign v8c9l0_out[18] = g8_reg[72] + g8_reg[73] + g8_reg[74] + g8_reg[75];
	assign v8c9l0_out[19] = g8_reg[76] + g8_reg[77] + g8_reg[78] + g8_reg[79];
	assign v8c9l0_out[20] = g8_reg[80] + g8_reg[81];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 21; i = i + 1)
            v8c9l0[i] <= v8c9l0_out[i];
    end

	reg [3:0] v8c9l1 [0:10];
	logic [3:0] v8c9l1_out [0:10];
	assign v8c9l1_out[0] = v8c9l0[0] + v8c9l0[1];
	assign v8c9l1_out[1] = v8c9l0[2] + v8c9l0[3];
	assign v8c9l1_out[2] = v8c9l0[4] + v8c9l0[5];
	assign v8c9l1_out[3] = v8c9l0[6] + v8c9l0[7];
	assign v8c9l1_out[4] = v8c9l0[8] + v8c9l0[9];
	assign v8c9l1_out[5] = v8c9l0[10] + v8c9l0[11];
	assign v8c9l1_out[6] = v8c9l0[12] + v8c9l0[13];
	assign v8c9l1_out[7] = v8c9l0[14] + v8c9l0[15];
	assign v8c9l1_out[8] = v8c9l0[16] + v8c9l0[17];
	assign v8c9l1_out[9] = v8c9l0[18] + v8c9l0[19];
	assign v8c9l1_out[10] = v8c9l0[20];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 11; i = i + 1)
            v8c9l1[i] <= v8c9l1_out[i];
    end

	reg [4:0] v8c9l2 [0:5];
	logic [4:0] v8c9l2_out [0:5];
	assign v8c9l2_out[0] = v8c9l1[0] + v8c9l1[1];
	assign v8c9l2_out[1] = v8c9l1[2] + v8c9l1[3];
	assign v8c9l2_out[2] = v8c9l1[4] + v8c9l1[5];
	assign v8c9l2_out[3] = v8c9l1[6] + v8c9l1[7];
	assign v8c9l2_out[4] = v8c9l1[8] + v8c9l1[9];
	assign v8c9l2_out[5] = v8c9l1[10];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 6; i = i + 1)
            v8c9l2[i] <= v8c9l2_out[i];
    end

	reg [5:0] v8c9l3 [0:2];
	logic [5:0] v8c9l3_out [0:2];
	assign v8c9l3_out[0] = v8c9l2[0] + v8c9l2[1];
	assign v8c9l3_out[1] = v8c9l2[2] + v8c9l2[3];
	assign v8c9l3_out[2] = v8c9l2[4] + v8c9l2[5];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 3; i = i + 1)
            v8c9l3[i] <= v8c9l3_out[i];
    end

	reg [6:0] v8c9l4 [0:1];
	logic [6:0] v8c9l4_out [0:1];
	assign v8c9l4_out[0] = v8c9l3[0] + v8c9l3[1];
	assign v8c9l4_out[1] = v8c9l3[2];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 2; i = i + 1)
            v8c9l4[i] <= v8c9l4_out[i];
    end

	reg [7:0] v8c9l5 [0:0];
	logic [7:0] v8c9l5_out [0:0];
	assign v8c9l5_out[0] = v8c9l4[0] + v8c9l4[1];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 1; i = i + 1)
            v8c9l5[i] <= v8c9l5_out[i];
    end

	assign val[8] = v8c9l5[0];
	
	// 0.25
	logic [0:61] g9;
	reg [0:61] g9_reg;
	assign g9[0] = l[18];
	assign g9[1] = l[32] || l[36] || l[40];
	assign g9[2] = l[48] || l[51];
	assign g9[3] = l[65] || l[66] || l[71];
	assign g9[4] = l[77] || l[90];
	assign g9[5] = l[97] || l[102];
	assign g9[6] = l[107];
	assign g9[7] = l[128];
	assign g9[8] = l[142] || l[144] || l[150];
	assign g9[9] = l[157] || l[163];
	assign g9[10] = l[192] || l[197] || l[199];
	assign g9[11] = l[225] || l[227] || l[228];
	assign g9[12] = l[236];
	assign g9[13] = l[249];
	assign g9[14] = l[262] || l[265];
	assign g9[15] = l[273] || l[285];
	assign g9[16] = l[299];
	assign g9[17] = l[314];
	assign g9[18] = l[331];
	assign g9[19] = l[338] || l[343] || l[347];
	assign g9[20] = l[359];
	assign g9[21] = l[374];
	assign g9[22] = l[405];
	assign g9[23] = l[416];
	assign g9[24] = l[435];
	assign g9[25] = l[446];
	assign g9[26] = l[462];
	assign g9[27] = l[488];
	assign g9[28] = l[512];
	assign g9[29] = l[529];
	assign g9[30] = l[543] || l[545];
	assign g9[31] = l[568];
	assign g9[32] = l[642] || l[646] || l[647] || l[650];
	assign g9[33] = l[659] || l[664];
	assign g9[34] = l[672];
	assign g9[35] = l[692];
	assign g9[36] = l[727];
	assign g9[37] = l[739];
	assign g9[38] = l[749];
	assign g9[39] = l[764];
	assign g9[40] = l[801];
	assign g9[41] = l[814];
	assign g9[42] = l[843];
	assign g9[43] = l[860];
	assign g9[44] = l[878];
	assign g9[45] = l[890] || l[893];
	assign g9[46] = l[901] || l[904];
	assign g9[47] = l[913] || l[924];
	assign g9[48] = l[934];
	assign g9[49] = l[986];
	assign g9[50] = l[991];
	assign g9[51] = l[1022];
	assign g9[52] = l[1026] || l[1030];
	assign g9[53] = l[1064];
	assign g9[54] = l[1157];
	assign g9[55] = l[1180];
	assign g9[56] = l[1196];
	assign g9[57] = l[1207];
	assign g9[58] = l[1249] || l[1252];
	assign g9[59] = l[1263];
	assign g9[60] = l[1308];
	assign g9[61] = l[1337];
	
    always_ff @(posedge clk) begin
        g9_reg <= g9;
    end
    
	logic [2:0] v9c9l0_out [0:15];
	logic [2:0] v9c9l0 [0:15];
	assign v9c9l0_out[0] = g9_reg[0] + g9_reg[1] + g9_reg[2] + g9_reg[3];
	assign v9c9l0_out[1] = g9_reg[4] + g9_reg[5] + g9_reg[6] + g9_reg[7];
	assign v9c9l0_out[2] = g9_reg[8] + g9_reg[9] + g9_reg[10] + g9_reg[11];
	assign v9c9l0_out[3] = g9_reg[12] + g9_reg[13] + g9_reg[14] + g9_reg[15];
	assign v9c9l0_out[4] = g9_reg[16] + g9_reg[17] + g9_reg[18] + g9_reg[19];
	assign v9c9l0_out[5] = g9_reg[20] + g9_reg[21] + g9_reg[22] + g9_reg[23];
	assign v9c9l0_out[6] = g9_reg[24] + g9_reg[25] + g9_reg[26] + g9_reg[27];
	assign v9c9l0_out[7] = g9_reg[28] + g9_reg[29] + g9_reg[30] + g9_reg[31];
	assign v9c9l0_out[8] = g9_reg[32] + g9_reg[33] + g9_reg[34] + g9_reg[35];
	assign v9c9l0_out[9] = g9_reg[36] + g9_reg[37] + g9_reg[38] + g9_reg[39];
	assign v9c9l0_out[10] = g9_reg[40] + g9_reg[41] + g9_reg[42] + g9_reg[43];
	assign v9c9l0_out[11] = g9_reg[44] + g9_reg[45] + g9_reg[46] + g9_reg[47];
	assign v9c9l0_out[12] = g9_reg[48] + g9_reg[49] + g9_reg[50] + g9_reg[51];
	assign v9c9l0_out[13] = g9_reg[52] + g9_reg[53] + g9_reg[54] + g9_reg[55];
	assign v9c9l0_out[14] = g9_reg[56] + g9_reg[57] + g9_reg[58] + g9_reg[59];
	assign v9c9l0_out[15] = g9_reg[60] + g9_reg[61];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 16; i = i + 1)
            v9c9l0[i] <= v9c9l0_out[i];
    end

	reg [3:0] v9c9l1 [0:7];
	logic [3:0] v9c9l1_out [0:7];
	assign v9c9l1_out[0] = v9c9l0[0] + v9c9l0[1];
	assign v9c9l1_out[1] = v9c9l0[2] + v9c9l0[3];
	assign v9c9l1_out[2] = v9c9l0[4] + v9c9l0[5];
	assign v9c9l1_out[3] = v9c9l0[6] + v9c9l0[7];
	assign v9c9l1_out[4] = v9c9l0[8] + v9c9l0[9];
	assign v9c9l1_out[5] = v9c9l0[10] + v9c9l0[11];
	assign v9c9l1_out[6] = v9c9l0[12] + v9c9l0[13];
	assign v9c9l1_out[7] = v9c9l0[14] + v9c9l0[15];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 8; i = i + 1)
            v9c9l1[i] <= v9c9l1_out[i];
    end

	reg [4:0] v9c9l2 [0:3];
	logic [4:0] v9c9l2_out [0:3];
	assign v9c9l2_out[0] = v9c9l1[0] + v9c9l1[1];
	assign v9c9l2_out[1] = v9c9l1[2] + v9c9l1[3];
	assign v9c9l2_out[2] = v9c9l1[4] + v9c9l1[5];
	assign v9c9l2_out[3] = v9c9l1[6] + v9c9l1[7];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 4; i = i + 1)
            v9c9l2[i] <= v9c9l2_out[i];
    end

	reg [5:0] v9c9l3 [0:1];
	logic [5:0] v9c9l3_out [0:1];
	assign v9c9l3_out[0] = v9c9l2[0] + v9c9l2[1];
	assign v9c9l3_out[1] = v9c9l2[2] + v9c9l2[3];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 2; i = i + 1)
            v9c9l3[i] <= v9c9l3_out[i];
    end

	reg [6:0] v9c9l4 [0:0];
	logic [6:0] v9c9l4_out [0:0];
	assign v9c9l4_out[0] = v9c9l3[0] + v9c9l3[1];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 1; i = i + 1)
            v9c9l4[i] <= v9c9l4_out[i];
    end

	reg [7:0] v9c9l5 [0:0];
	logic [7:0] v9c9l5_out [0:0];
	assign v9c9l5_out[0] = v9c9l4[0];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 1; i = i + 1)
            v9c9l5[i] <= v9c9l5_out[i];
    end

	assign val[9] = v9c9l5[0];
	
	// 0.5
	logic [0:14] g10;
	reg [0:14] g10_reg;
	assign g10[0] = l[1] || l[5];
	assign g10[1] = l[23];
	assign g10[2] = l[42];
	assign g10[3] = l[56];
	assign g10[4] = l[63] || l[73] || l[74];
	assign g10[5] = l[86];
	assign g10[6] = l[105];
	assign g10[7] = l[116];
	assign g10[8] = l[167];
	assign g10[9] = l[268];
	assign g10[10] = l[407];
	assign g10[11] = l[498];
	assign g10[12] = l[658];
	assign g10[13] = l[790];
	assign g10[14] = l[844];
	
    always_ff @(posedge clk) begin
        g10_reg <= g10;
    end
    
	logic [2:0] v10c9l0_out [0:3];
	logic [2:0] v10c9l0 [0:3];
	assign v10c9l0_out[0] = g10_reg[0] + g10_reg[1] + g10_reg[2] + g10_reg[3];
	assign v10c9l0_out[1] = g10_reg[4] + g10_reg[5] + g10_reg[6] + g10_reg[7];
	assign v10c9l0_out[2] = g10_reg[8] + g10_reg[9] + g10_reg[10] + g10_reg[11];
	assign v10c9l0_out[3] = g10_reg[12] + g10_reg[13] + g10_reg[14];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 4; i = i + 1)
            v10c9l0[i] <= v10c9l0_out[i];
    end

	reg [3:0] v10c9l1 [0:1];
	logic [3:0] v10c9l1_out [0:1];
	assign v10c9l1_out[0] = v10c9l0[0] + v10c9l0[1];
	assign v10c9l1_out[1] = v10c9l0[2] + v10c9l0[3];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 2; i = i + 1)
            v10c9l1[i] <= v10c9l1_out[i];
    end

	reg [4:0] v10c9l2 [0:0];
	logic [4:0] v10c9l2_out [0:0];
	assign v10c9l2_out[0] = v10c9l1[0] + v10c9l1[1];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 1; i = i + 1)
            v10c9l2[i] <= v10c9l2_out[i];
    end

	reg [5:0] v10c9l3 [0:0];
	logic [5:0] v10c9l3_out [0:0];
	assign v10c9l3_out[0] = v10c9l2[0];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 1; i = i + 1)
            v10c9l3[i] <= v10c9l3_out[i];
    end

	reg [6:0] v10c9l4 [0:0];
	logic [6:0] v10c9l4_out [0:0];
	assign v10c9l4_out[0] = v10c9l3[0];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 1; i = i + 1)
            v10c9l4[i] <= v10c9l4_out[i];
    end

	reg [7:0] v10c9l5 [0:0];
	logic [7:0] v10c9l5_out [0:0];
	assign v10c9l5_out[0] = v10c9l4[0];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 1; i = i + 1)
            v10c9l5[i] <= v10c9l5_out[i];
    end

	assign val[10] = v10c9l5[0];
	
	// 1.0
	logic [0:3] g11;
	reg [0:3] g11_reg;
	assign g11[0] = l[3] || l[7] || l[11] || l[15];
	assign g11[1] = l[19];
	assign g11[2] = l[33] || l[43];
	assign g11[3] = l[59];
	
    always_ff @(posedge clk) begin
        g11_reg <= g11;
    end
    
	logic [2:0] v11c9l0_out [0:0];
	logic [2:0] v11c9l0 [0:0];
	assign v11c9l0_out[0] = g11_reg[0] + g11_reg[1] + g11_reg[2] + g11_reg[3];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 1; i = i + 1)
            v11c9l0[i] <= v11c9l0_out[i];
    end

	reg [3:0] v11c9l1 [0:0];
	logic [3:0] v11c9l1_out [0:0];
	assign v11c9l1_out[0] = v11c9l0[0];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 1; i = i + 1)
            v11c9l1[i] <= v11c9l1_out[i];
    end

	reg [4:0] v11c9l2 [0:0];
	logic [4:0] v11c9l2_out [0:0];
	assign v11c9l2_out[0] = v11c9l1[0];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 1; i = i + 1)
            v11c9l2[i] <= v11c9l2_out[i];
    end

	reg [5:0] v11c9l3 [0:0];
	logic [5:0] v11c9l3_out [0:0];
	assign v11c9l3_out[0] = v11c9l2[0];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 1; i = i + 1)
            v11c9l3[i] <= v11c9l3_out[i];
    end

	reg [6:0] v11c9l4 [0:0];
	logic [6:0] v11c9l4_out [0:0];
	assign v11c9l4_out[0] = v11c9l3[0];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 1; i = i + 1)
            v11c9l4[i] <= v11c9l4_out[i];
    end

	reg [7:0] v11c9l5 [0:0];
	logic [7:0] v11c9l5_out [0:0];
	assign v11c9l5_out[0] = v11c9l4[0];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 1; i = i + 1)
            v11c9l5[i] <= v11c9l5_out[i];
    end

	assign val[11] = v11c9l5[0];
	
	// 2.0
	logic [0:0] g12;
	reg [0:0] g12_reg;
	assign g12[0] = l[12];
	
    always_ff @(posedge clk) begin
        g12_reg <= g12;
    end
    
	logic [2:0] v12c9l0_out [0:0];
	logic [2:0] v12c9l0 [0:0];
	assign v12c9l0_out[0] = g12_reg[0];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 1; i = i + 1)
            v12c9l0[i] <= v12c9l0_out[i];
    end

	reg [3:0] v12c9l1 [0:0];
	logic [3:0] v12c9l1_out [0:0];
	assign v12c9l1_out[0] = v12c9l0[0];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 1; i = i + 1)
            v12c9l1[i] <= v12c9l1_out[i];
    end

	reg [4:0] v12c9l2 [0:0];
	logic [4:0] v12c9l2_out [0:0];
	assign v12c9l2_out[0] = v12c9l1[0];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 1; i = i + 1)
            v12c9l2[i] <= v12c9l2_out[i];
    end

	reg [5:0] v12c9l3 [0:0];
	logic [5:0] v12c9l3_out [0:0];
	assign v12c9l3_out[0] = v12c9l2[0];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 1; i = i + 1)
            v12c9l3[i] <= v12c9l3_out[i];
    end

	reg [6:0] v12c9l4 [0:0];
	logic [6:0] v12c9l4_out [0:0];
	assign v12c9l4_out[0] = v12c9l3[0];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 1; i = i + 1)
            v12c9l4[i] <= v12c9l4_out[i];
    end

	reg [7:0] v12c9l5 [0:0];
	logic [7:0] v12c9l5_out [0:0];
	assign v12c9l5_out[0] = v12c9l4[0];
	
    always_ff @(posedge clk) begin
        for (i = 0; i < 1; i = i + 1)
            v12c9l5[i] <= v12c9l5_out[i];
    end

	assign val[12] = v12c9l5[0];
	
endmodule